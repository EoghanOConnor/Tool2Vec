{
    "ec2.client.accept_address_transfer": {
        "new_func": "ec2.client.accept_address_transfer",
        "description": "Accepts an Elastic IP address transfer. Parameters: Address (string) - Required. The Elastic IP address to transfer. TagSpecifications (list) - Tags to apply to the resource. DryRun (boolean) - Checks required permissions without making the request. Returns: dict with details of the transferred address, including PublicIp, AllocationId, TransferAccountId, TransferOfferExpirationTimestamp, TransferOfferAcceptedTimestamp, and AddressTransferStatus."
    },
    "ec2.client.accept_reserved_instances_exchange_quote": {
        "new_func": "ec2.client.accept_reserved_instances_exchange_quote",
        "description": "Accepts a Convertible Reserved Instance exchange quote. Parameters: DryRun (boolean) - Checks required permissions without making the request. ReservedInstanceIds (list) - Required. IDs of the Convertible Reserved Instances to exchange. TargetConfigurations (list) - Configuration of the target Convertible Reserved Instance. Returns: dict with ExchangeId."
    },
    "ec2.client.accept_transit_gateway_multicast_domain_associations": {
        "new_func": "ec2.client.accept_transit_gateway_multicast_domain_associations",
        "description": "Accepts a request to associate subnets with a transit gateway multicast domain. Parameters: TransitGatewayMulticastDomainId (string) - Required. ID of the multicast domain. TransitGatewayAttachmentId (string) - ID of the transit gateway attachment. SubnetIds (list) - IDs of the subnets. DryRun (boolean) - Checks required permissions without making the request. Returns: dict with details of the associations, including TransitGatewayMulticastDomainId, TransitGatewayAttachmentId, ResourceId, ResourceType, ResourceOwnerId, and Subnets."
    },
    "ec2.client.accept_transit_gateway_peering_attachment": {
        "new_func": "ec2.client.accept_transit_gateway_peering_attachment",
        "description": "Accepts a transit gateway peering attachment request. Parameters: TransitGatewayAttachmentId (string) - Required. ID of the transit gateway attachment. DryRun (boolean) - Checks required permissions without making the request. Returns: dict with details of the peering attachment, including TransitGatewayAttachmentId, AccepterTransitGatewayAttachmentId, RequesterTgwInfo, AccepterTgwInfo, Options, Status, State, CreationTime, and Tags."
    },
    "ec2.client.accept_transit_gateway_vpc_attachment": {
        "new_func": "ec2.client.accept_transit_gateway_vpc_attachment",
        "description": "Accepts a request to attach a VPC to a transit gateway. Parameters: TransitGatewayAttachmentId (string) - Required. ID of the attachment. DryRun (boolean) - Checks required permissions without making the request. Returns: dict with details of the VPC attachment, including TransitGatewayAttachmentId, TransitGatewayId, VpcId, VpcOwnerId, State, SubnetIds, CreationTime, Options, and Tags."
    },
    "ec2.client.accept_vpc_endpoint_connections": {
        "new_func": "ec2.client.accept_vpc_endpoint_connections",
        "description": "Accepts VPC endpoint service connection requests. Parameters: DryRun (boolean) - Checks permissions without making the request. ServiceId (string) - Required. The VPC endpoint service ID. VpcEndpointIds (list) - Required. IDs of interface VPC endpoints. Returns: dict with 'Unsuccessful' key, detailing any endpoints not accepted."
    },
    "ec2.client.accept_vpc_peering_connection": {
        "new_func": "ec2.client.accept_vpc_peering_connection",
        "description": "Accepts a VPC peering connection request. Parameters: DryRun (boolean) - Checks permissions without making the request. VpcPeeringConnectionId (string) - Required. The ID of the VPC peering connection. Returns: dict with 'VpcPeeringConnection' detailing the peering connection information."
    },
    "ec2.client.advertise_byoip_cidr": {
        "new_func": "ec2.client.advertise_byoip_cidr",
        "description": "Advertises a BYOIP CIDR. Parameters: Cidr (string) - Required. The CIDR to advertise. Asn (string) - The ASN for the CIDR. DryRun (boolean) - Checks permissions without making the request. NetworkBorderGroup (string) - The network border group for advertisement. Returns: dict with 'ByoipCidr' containing details on the advertised CIDR."
    },
    "ec2.client.allocate_address": {
        "new_func": "ec2.client.allocate_address",
        "description": "Allocates an Elastic IP address. Parameters: Domain (string) - The domain for the address. Address (string) - The specific Elastic IP to recover. PublicIpv4Pool (string) - The address pool ID. NetworkBorderGroup (string) - The network border group. CustomerOwnedIpv4Pool (string) - The customer-owned address pool ID. DryRun (boolean) - Checks permissions without making the request. TagSpecifications (list) - Tags for the Elastic IP. Returns: dict with details of the allocated address."
    },
    "ec2.client.allocate_hosts": {
        "new_func": "ec2.client.allocate_hosts",
        "description": "Allocates a Dedicated Host to the account. Parameters: AutoPlacement (string) - Auto-placement setting for instance launches. AvailabilityZone (string) - Required. The AZ to allocate the host. ClientToken (string) - Idempotency token. InstanceType (string) - The instance type for the host. InstanceFamily (string) - The instance family for the host. Quantity (integer) - The number of hosts to allocate. TagSpecifications (list) - Tags for the host. HostRecovery (string) - Host recovery option. OutpostArn (string) - The ARN of the Outpost to allocate the host. HostMaintenance (string) - Host maintenance option. AssetIds (list) - IDs of Outpost hardware assets. Returns: dict with 'HostIds' listing the IDs of allocated Dedicated Hosts."
    },
    "ec2.client.allocate_ipam_pool_cidr": {
        "new_func": "ec2.client.allocate_ipam_pool_cidr",
        "description": "Allocates a CIDR from an IPAM pool. Parameters: DryRun (boolean) - Optional. IpamPoolId (string) - Required. The IPAM pool ID. Cidr (string) - Optional. Specific CIDR to allocate. NetmaskLength (integer) - Optional. Length of the netmask. ClientToken (string) - Optional. Unique, case-sensitive identifier. Description (string) - Optional. Textual description. Returns: dict with allocation details including the allocated CIDR."
    },
    "ec2.client.apply_security_groups_to_client_vpn_target_network": {
        "new_func": "ec2.client.apply_security_groups_to_client_vpn_target_network",
        "description": "Applies security groups to the association between a target network and a Client VPN endpoint. Parameters: ClientVpnEndpointId (string) - Required. The Client VPN endpoint ID. VpcId (string) - Required. The VPC ID. SecurityGroupIds (list) - Required. Security group IDs. DryRun (boolean) - Optional. Returns: dict with the IDs of the applied security groups."
    },
    "ec2.client.assign_ipv6_addresses": {
        "new_func": "ec2.client.assign_ipv6_addresses",
        "description": "Assigns IPv6 addresses to a network interface. Parameters: Ipv6AddressCount (integer) - Optional. Number of IPv6 addresses to assign. Ipv6Addresses (list) - Optional. Specific IPv6 addresses to assign. Ipv6PrefixCount (integer) - Optional. Number of IPv6 prefixes to assign. Ipv6Prefixes (list) - Optional. Specific IPv6 prefixes to assign. NetworkInterfaceId (string) - Required. The network interface ID. Returns: dict with the assigned IPv6 addresses and prefixes, and network interface ID."
    },
    "ec2.client.assign_private_ip_addresses": {
        "new_func": "ec2.client.assign_private_ip_addresses",
        "description": "Assigns secondary private IP addresses to a network interface. Parameters: AllowReassignment (boolean) - Optional. NetworkInterfaceId (string) - Required. PrivateIpAddresses (list) - Optional. Specific private IP addresses to assign. SecondaryPrivateIpAddressCount (integer) - Optional. Number of secondary IP addresses to assign. Ipv4Prefixes (list) - Optional. IPv4 prefixes to assign. Ipv4PrefixCount (integer) - Optional. Number of IPv4 prefixes to assign. Returns: dict with the network interface ID and the assigned private IP addresses and IPv4 prefixes."
    },
    "ec2.client.assign_private_nat_gateway_address": {
        "new_func": "ec2.client.assign_private_nat_gateway_address",
        "description": "Assigns private IPv4 addresses to a private NAT gateway. Parameters: NatGatewayId (string) - Required. The NAT gateway ID. PrivateIpAddresses (list) - Optional. Specific private IPv4 addresses to assign. PrivateIpAddressCount (integer) - Optional. Number of private IP addresses to assign. DryRun (boolean) - Optional. Returns: dict with the NAT gateway ID and details of NAT gateway addresses including allocation, association, and status."
    },
    "ec2.client.associate_address": {
        "new_func": "ec2.client.associate_address",
        "description": "Associates an Elastic IP address with an instance or network interface. Parameters: AllocationId (string) - Elastic IP allocation ID. InstanceId (string) - Instance ID to associate with. PublicIp (string) - Deprecated. AllowReassociation (boolean) - Allows reassociation of Elastic IP. DryRun (boolean) - Permission check without making request. NetworkInterfaceId (string) - Network interface ID. PrivateIpAddress (string) - Private IP to associate. Returns: dict with 'AssociationId' (string)."
    },
    "ec2.client.associate_client_vpn_target_network": {
        "new_func": "ec2.client.associate_client_vpn_target_network",
        "description": "Associates a subnet with a Client VPN endpoint. Parameters: ClientVpnEndpointId (string) - Required. ID of the Client VPN endpoint. SubnetId (string) - Required. ID of the subnet to associate. ClientToken (string) - Ensures idempotency. DryRun (boolean) - Permission check without making request. Returns: dict with 'AssociationId' (string) and 'Status' (dict) including 'Code' (string) and 'Message' (string)."
    },
    "ec2.client.associate_dhcp_options": {
        "new_func": "ec2.client.associate_dhcp_options",
        "description": "Associates a DHCP options set with a VPC. Parameters: DhcpOptionsId (string) - Required. ID of DHCP options set or 'default'. VpcId (string) - Required. ID of the VPC. DryRun (boolean) - Permission check without making request. Returns: None."
    },
    "ec2.client.associate_enclave_certificate_iam_role": {
        "new_func": "ec2.client.associate_enclave_certificate_iam_role",
        "description": "Associates an IAM role with an ACM certificate for use with AWS Nitro Enclaves. Parameters: CertificateArn (string) - Required. ARN of the ACM certificate. RoleArn (string) - Required. ARN of the IAM role. DryRun (boolean) - Permission check without making request. Returns: dict with 'CertificateS3BucketName' (string), 'CertificateS3ObjectKey' (string), and 'EncryptionKmsKeyId' (string)."
    },
    "ec2.client.associate_iam_instance_profile": {
        "new_func": "ec2.client.associate_iam_instance_profile",
        "description": "Associates an IAM instance profile with a running or stopped instance. Parameters: IamInstanceProfile (dict) - Required. Contains 'Arn' (string) and 'Name' (string). InstanceId (string) - Required. ID of the instance. Returns: dict with 'IamInstanceProfileAssociation' (dict) containing 'AssociationId' (string), 'InstanceId' (string), 'IamInstanceProfile' (dict), 'State' (string), and 'Timestamp' (datetime)."
    },
    "ec2.client.associate_instance_event_window": {
        "new_func": "ec2.client.associate_instance_event_window",
        "description": "Associates targets with an event window. Parameters: DryRun (boolean) - Checks permissions. InstanceEventWindowId (string) - Required. Event window ID. AssociationTarget (dict) - Required. Targets to associate, including InstanceIds (list), InstanceTags (list of Key-Value dict), and DedicatedHostIds (list). Returns: dict with detailed information about the event window including InstanceEventWindowId, TimeRanges, and AssociationTarget."
    },
    "ec2.client.associate_ipam_byoasn": {
        "new_func": "ec2.client.associate_ipam_byoasn",
        "description": "Associates an ASN with a BYOIP CIDR. Parameters: DryRun (boolean) - Checks permissions. Asn (string) - Required. ASN to associate. Cidr (string) - Required. BYOIP CIDR to associate with the ASN. Returns: dict with AsnAssociation details including Asn, Cidr, StatusMessage, and State."
    },
    "ec2.client.associate_ipam_resource_discovery": {
        "new_func": "ec2.client.associate_ipam_resource_discovery",
        "description": "Associates an IPAM resource discovery with an IPAM. Parameters: DryRun (boolean) - Checks permissions. IpamId (string) - Required. IPAM ID. IpamResourceDiscoveryId (string) - Required. Resource discovery ID. TagSpecifications (list of ResourceType and Tags dict) - Tags to apply. ClientToken (string) - Client token. Returns: dict with details of the IpamResourceDiscoveryAssociation including OwnerId, IpamResourceDiscoveryAssociationId, and State."
    },
    "ec2.client.associate_nat_gateway_address": {
        "new_func": "ec2.client.associate_nat_gateway_address",
        "description": "Associates EIPs and private IPv4 addresses with a public NAT gateway. Parameters: NatGatewayId (string) - Required. NAT gateway ID. AllocationIds (list of strings) - Allocation IDs of EIPs. PrivateIpAddresses (list of strings) - Private IPv4 addresses. DryRun (boolean) - Checks permissions. Returns: dict with NatGatewayId and a list of NatGatewayAddresses, including AllocationId, NetworkInterfaceId, and Status."
    },
    "ec2.client.associate_route_table": {
        "new_func": "ec2.client.associate_route_table",
        "description": "Associates a subnet or gateway with a route table. Parameters: DryRun (boolean) - Checks permissions. RouteTableId (string) - Required. Route table ID. SubnetId (string) - Subnet ID. GatewayId (string) - Gateway ID. Returns: dict with AssociationId and AssociationState including State and StatusMessage."
    },
    "ec2.client.associate_subnet_cidr_block": {
        "new_func": "ec2.client.associate_subnet_cidr_block",
        "description": "Associates an IPv6 CIDR block with a subnet. Parameters: Ipv6CidrBlock (string) - The IPv6 CIDR block. SubnetId (string) - Required. The subnet ID. Ipv6IpamPoolId (string) - The IPv6 IPAM pool ID. Ipv6NetmaskLength (integer) - The IPv6 netmask length. Returns: dict with Ipv6CidrBlockAssociation details including AssociationId, Ipv6CidrBlock, Ipv6CidrBlockState, and SubnetId."
    },
    "ec2.client.associate_transit_gateway_multicast_domain": {
        "new_func": "ec2.client.associate_transit_gateway_multicast_domain",
        "description": "Associates subnets and transit gateway attachments with a transit gateway multicast domain. Parameters: TransitGatewayMulticastDomainId (string) - Required. The multicast domain ID. TransitGatewayAttachmentId (string) - Required. The attachment ID. SubnetIds (list of strings) - Required. Subnet IDs. DryRun (boolean) - Permission check without request. Returns: dict with Associations details including TransitGatewayMulticastDomainId, TransitGatewayAttachmentId, ResourceId, ResourceType, ResourceOwnerId, and Subnets with state."
    },
    "ec2.client.associate_transit_gateway_policy_table": {
        "new_func": "ec2.client.associate_transit_gateway_policy_table",
        "description": "Associates a transit gateway attachment with a policy table. Parameters: TransitGatewayPolicyTableId (string) - Required. The policy table ID. TransitGatewayAttachmentId (string) - Required. The attachment ID. DryRun (boolean) - Permission check without request. Returns: dict with Association details including TransitGatewayPolicyTableId, TransitGatewayAttachmentId, ResourceId, ResourceType, and State."
    },
    "ec2.client.associate_transit_gateway_route_table": {
        "new_func": "ec2.client.associate_transit_gateway_route_table",
        "description": "Associates a transit gateway attachment with a route table. Parameters: TransitGatewayRouteTableId (string) - Required. The route table ID. TransitGatewayAttachmentId (string) - Required. The attachment ID. DryRun (boolean) - Permission check without request. Returns: dict with Association details including TransitGatewayRouteTableId, TransitGatewayAttachmentId, ResourceId, ResourceType, and State."
    },
    "ec2.client.associate_trunk_interface": {
        "new_func": "ec2.client.associate_trunk_interface",
        "description": "Associates a branch network interface with a trunk network interface. Parameters: BranchInterfaceId (string) - Required. The branch interface ID. TrunkInterfaceId (string) - Required. The trunk interface ID. VlanId (integer) - VLAN ID. GreKey (integer) - GRE protocol key. ClientToken (string) - Idempotency token. DryRun (boolean) - Permission check without request. Returns: dict with InterfaceAssociation details including AssociationId, BranchInterfaceId, TrunkInterfaceId, InterfaceProtocol, VlanId, GreKey, and Tags; and ClientToken."
    },
    "ec2.client.associate_vpc_cidr_block": {
        "new_func": "ec2.client.associate_vpc_cidr_block",
        "description": "Associates a CIDR block with a VPC. Parameters: AmazonProvidedIpv6CidrBlock (boolean), CidrBlock (string), VpcId (string) - Required, Ipv6CidrBlockNetworkBorderGroup (string), Ipv6Pool (string), Ipv6CidrBlock (string), Ipv4IpamPoolId (string), Ipv4NetmaskLength (integer), Ipv6IpamPoolId (string), Ipv6NetmaskLength (integer). Returns: dict with Ipv6CidrBlockAssociation, CidrBlockAssociation, and VpcId."
    },
    "ec2.client.attach_classic_link_vpc": {
        "new_func": "ec2.client.attach_classic_link_vpc",
        "description": "Links an EC2-Classic instance to a ClassicLink-enabled VPC. Deprecated. Parameters: DryRun (boolean), Groups (list) - Required, InstanceId (string) - Required, VpcId (string) - Required. Returns: dict with a boolean 'Return' indicating success."
    },
    "ec2.client.attach_internet_gateway": {
        "new_func": "ec2.client.attach_internet_gateway",
        "description": "Attaches an internet gateway to a VPC. Parameters: DryRun (boolean), InternetGatewayId (string) - Required, VpcId (string) - Required. Returns: None."
    },
    "ec2.client.attach_network_interface": {
        "new_func": "ec2.client.attach_network_interface",
        "description": "Attaches a network interface to an instance. Parameters: DeviceIndex (integer) - Required, DryRun (boolean), InstanceId (string) - Required, NetworkInterfaceId (string) - Required, NetworkCardIndex (integer), EnaSrdSpecification (dict). Returns: dict with AttachmentId and NetworkCardIndex."
    },
    "ec2.client.attach_verified_access_trust_provider": {
        "new_func": "ec2.client.attach_verified_access_trust_provider",
        "description": "Attaches an AWS Verified Access trust provider to a Verified Access instance. Parameters: VerifiedAccessInstanceId (string) - Required, VerifiedAccessTrustProviderId (string) - Required, ClientToken (string), DryRun (boolean). Returns: dict with information about the VerifiedAccessTrustProvider and VerifiedAccessInstance."
    },
    "ec2.client.attach_volume": {
        "new_func": "ec2.client.attach_volume",
        "description": "Attaches an EBS volume to a running or stopped instance with a specified device name. Parameters: Device (string) - Required. Device name (e.g., /dev/sdh). InstanceId (string) - Required. Instance ID. VolumeId (string) - Required. EBS volume ID. DryRun (boolean) - Checks permissions without making request. Returns: dict with 'AttachTime', 'Device', 'InstanceId', 'State', 'VolumeId', 'DeleteOnTermination', 'AssociatedResource', 'InstanceOwningService'."
    },
    "ec2.client.attach_vpn_gateway": {
        "new_func": "ec2.client.attach_vpn_gateway",
        "description": "Attaches a virtual private gateway to a VPC. Parameters: VpcId (string) - Required. VPC ID. VpnGatewayId (string) - Required. Virtual private gateway ID. DryRun (boolean) - Checks permissions without making request. Returns: dict with 'VpcAttachment' containing 'State' and 'VpcId'."
    },
    "ec2.client.authorize_client_vpn_ingress": {
        "new_func": "ec2.client.authorize_client_vpn_ingress",
        "description": "Adds an ingress authorization rule to a Client VPN endpoint. Parameters: ClientVpnEndpointId (string) - Required. Client VPN endpoint ID. TargetNetworkCidr (string) - Required. IPv4 CIDR of network to authorize. AccessGroupId (string) - Group ID to grant access to. AuthorizeAllGroups (boolean) - Grant access to all clients if true. Description (string) - Rule description. ClientToken (string) - Idempotency token. DryRun (boolean) - Checks permissions without making request. Returns: dict with 'Status' including 'Code' and 'Message'."
    },
    "ec2.client.authorize_security_group_egress": {
        "new_func": "ec2.client.authorize_security_group_egress",
        "description": "Adds specified outbound rules to a security group. Parameters: DryRun (boolean) - Checks permissions without making request. GroupId (string) - Required. Security group ID. IpPermissions (list) - Permissions for rules. TagSpecifications (list) - Tags for the security group rule. Returns: dict with 'Return' boolean and 'SecurityGroupRules' list including details like 'SecurityGroupRuleId', 'GroupId', 'IsEgress', 'IpProtocol', 'FromPort', 'ToPort', 'CidrIpv4', 'CidrIpv6', 'PrefixListId', 'ReferencedGroupInfo', 'Description', 'Tags'."
    },
    "ec2.client.authorize_security_group_ingress": {
        "new_func": "ec2.client.authorize_security_group_ingress",
        "description": "Adds specified inbound rules to a security group. Parameters: CidrIp (string) - IPv4 CIDR range. FromPort (integer) - Start of port range. GroupId (string) - Security group ID. GroupName (string) - Security group name. IpPermissions (list) - Permissions for rules. IpProtocol (string) - IP protocol name or number. SourceSecurityGroupName (string) - Source security group name. SourceSecurityGroupOwnerId (string) - Source security group owner ID. ToPort (integer) - End of port range. DryRun (boolean) - Checks permissions without making request. TagSpecifications (list) - Tags for the security group rule. Returns: dict with 'Return' boolean and 'SecurityGroupRules' list including details like 'SecurityGroupRuleId', 'GroupId', 'IsEgress', 'IpProtocol', 'FromPort', 'ToPort', 'CidrIpv4', 'CidrIpv6', 'PrefixListId', 'ReferencedGroupInfo', 'Description', 'Tags'."
    },
    "ec2.client.bundle_instance": {
        "new_func": "ec2.client.bundle_instance",
        "description": "Bundles an Amazon instance store-backed Windows instance. Parameters: InstanceId (string) - Required. The ID of the instance to bundle. Storage (dict) - Required. Specifies the S3 bucket to store the AMI with keys AWSAccessKeyId, Bucket, Prefix, UploadPolicy, and UploadPolicySignature. DryRun (boolean) - Checks required permissions without making the request. Returns: dict with BundleTask containing BundleId, BundleTaskError, InstanceId, Progress, StartTime, State, Storage, and UpdateTime."
    },
    "ec2.client.can_paginate": {
        "new_func": "ec2.client.can_paginate",
        "description": "Checks if an operation can be paginated. Parameters: operation_name (string) - The name of the operation. Returns: True if the operation can be paginated, False otherwise."
    },
    "ec2.client.cancel_bundle_task": {
        "new_func": "ec2.client.cancel_bundle_task",
        "description": "Cancels a bundling operation for an instance store-backed Windows instance. Parameters: BundleId (string) - Required. The ID of the bundle task. DryRun (boolean) - Checks required permissions without making the request. Returns: dict with BundleTask containing BundleId, BundleTaskError, InstanceId, Progress, StartTime, State, Storage, and UpdateTime."
    },
    "ec2.client.cancel_capacity_reservation": {
        "new_func": "ec2.client.cancel_capacity_reservation",
        "description": "Cancels the specified Capacity Reservation. Parameters: CapacityReservationId (string) - Required. The ID of the Capacity Reservation to be cancelled. DryRun (boolean) - Checks required permissions without making the request. Returns: dict with a boolean indicating if the request was successful."
    },
    "ec2.client.cancel_capacity_reservation_fleets": {
        "new_func": "ec2.client.cancel_capacity_reservation_fleets",
        "description": "Cancels one or more Capacity Reservation Fleets. Parameters: DryRun (boolean) - Checks required permissions without making the request. CapacityReservationFleetIds (list of strings) - Required. The IDs of the Capacity Reservation Fleets to cancel. Returns: dict with lists of SuccessfulFleetCancellations and FailedFleetCancellations each containing information about the Fleet state, ID, and cancellation errors if any."
    },
    "ec2.client.cancel_conversion_task": {
        "new_func": "ec2.client.cancel_conversion_task",
        "description": "Cancels an active conversion task for an instance or volume. Parameters: ConversionTaskId (string) - Required. ID of the conversion task. DryRun (boolean) - Checks permissions without making the request. ReasonMessage (string) - Reason for canceling the task. Returns: None."
    },
    "ec2.client.cancel_export_task": {
        "new_func": "ec2.client.cancel_export_task",
        "description": "Cancels an active export task. Parameters: ExportTaskId (string) - Required. ID of the export task. Returns: None."
    },
    "ec2.client.cancel_image_launch_permission": {
        "new_func": "ec2.client.cancel_image_launch_permission",
        "description": "Removes AWS account launch permissions for a specified AMI. Parameters: ImageId (string) - Required. ID of the AMI. DryRun (boolean) - Checks permissions without making the request. Returns: dict with 'Return' (boolean) indicating if the request succeeds."
    },
    "ec2.client.cancel_import_task": {
        "new_func": "ec2.client.cancel_import_task",
        "description": "Cancels an in-process import virtual machine or import snapshot task. Parameters: CancelReason (string) - Reason for canceling. DryRun (boolean) - Checks permissions without making the request. ImportTaskId (string) - ID of the import task. Returns: dict with 'ImportTaskId' (string), 'PreviousState' (string), and 'State' (string) reflecting the task status."
    },
    "ec2.client.cancel_reserved_instances_listing": {
        "new_func": "ec2.client.cancel_reserved_instances_listing",
        "description": "Cancels a specified Reserved Instance listing in the Reserved Instance Marketplace. Parameters: ReservedInstancesListingId (string) - Required. ID of the listing. Returns: dict with details of the canceled Reserved Instances listings including 'ClientToken' (string), 'CreateDate' (datetime), 'InstanceCounts' (list), 'PriceSchedules' (list), 'ReservedInstancesId' (string), 'ReservedInstancesListingId' (string), 'Status' (string), 'StatusMessage' (string), 'Tags' (list), and 'UpdateDate' (datetime)."
    },
    "ec2.client.cancel_spot_fleet_requests": {
        "new_func": "ec2.client.cancel_spot_fleet_requests",
        "description": "Cancels specified Spot Fleet requests. Parameters: DryRun (boolean) - Checks permissions without making the request. SpotFleetRequestIds (list) - Required. IDs of the Spot Fleet requests, up to 100. TerminateInstances (boolean) - Required. Whether to terminate instances when the Spot Fleet is canceled. Returns: dict with SuccessfulFleetRequests and UnsuccessfulFleetRequests, containing the state and ID of the Spot Fleet requests."
    },
    "ec2.client.cancel_spot_instance_requests": {
        "new_func": "ec2.client.cancel_spot_instance_requests",
        "description": "Cancels one or more Spot Instance requests. Parameters: DryRun (boolean) - Checks permissions without making the request. SpotInstanceRequestIds (list) - Required. IDs of the Spot Instance requests. Returns: dict with CancelledSpotInstanceRequests, containing the ID and state of the Spot Instance requests."
    },
    "ec2.client.close": {
        "new_func": "ec2.client.close",
        "description": "Closes underlying endpoint connections. No parameters or return."
    },
    "ec2.client.confirm_product_instance": {
        "new_func": "ec2.client.confirm_product_instance",
        "description": "Checks if a product code is associated with an instance. Parameters: InstanceId (string) - Required. ID of the instance. ProductCode (string) - Required. Product code to check. DryRun (boolean) - Checks permissions without making the request. Returns: dict with OwnerId if product code is attached, and a boolean indicating association with the instance."
    },
    "ec2.client.copy_fpga_image": {
        "new_func": "ec2.client.copy_fpga_image",
        "description": "Copies an AFI to the current Region. Parameters: DryRun (boolean) - Checks permissions without making the request. SourceFpgaImageId (string) - Required. ID of the source AFI. Description (string) - Description for the new AFI. Name (string) - Name for the new AFI. SourceRegion (string) - Required. Region containing the source AFI. ClientToken (string) - Idempotency token. Returns: dict with the new FpgaImageId."
    },
    "ec2.client.copy_image": {
        "new_func": "ec2.client.copy_image",
        "description": "Initiates the copy of an AMI from one Region to another or to an Outpost. Parameters: ClientToken (string) - Unique identifier for idempotency. Description (string) - Description for the new AMI. Encrypted (boolean) - Indicates whether to encrypt destination snapshots. KmsKeyId (string) - Identifier of the KMS key for encryption. Name (string) - Name of the new AMI. SourceImageId (string) - ID of the source AMI. SourceRegion (string) - Source Region. DestinationOutpostArn (string) - ARN of the destination Outpost. DryRun (boolean) - Checks permissions without making the request. CopyImageTags (boolean) - Include user-defined AMI tags in the copy. TagSpecifications (list) - Tags to apply to the new AMI and snapshots. Returns: dict with ImageId of the new AMI."
    },
    "ec2.client.copy_snapshot": {
        "new_func": "ec2.client.copy_snapshot",
        "description": "Copies a snapshot of an EBS volume within the same Region, from one Region to another, or to an Outpost. Parameters: Description (string) - Description of the snapshot. DestinationOutpostArn (string) - ARN of the Outpost to copy to. Encrypted (boolean) - Indicates encryption for the snapshot copy. KmsKeyId (string) - Identifier of the KMS key for encryption. SourceRegion (string) - Source Region. SourceSnapshotId (string) - ID of the source snapshot. TagSpecifications (list) - Tags to apply to the new snapshot. DryRun (boolean) - Checks permissions without making the request. Returns: dict with SnapshotId and Tags of the new snapshot."
    },
    "ec2.client.create_capacity_reservation": {
        "new_func": "ec2.client.create_capacity_reservation",
        "description": "Creates a new Capacity Reservation with specified attributes. Parameters: ClientToken (string) - Unique identifier for idempotency. InstanceType (string) - Type of instances to reserve. InstancePlatform (string) - Operating system type. AvailabilityZone (string) - Availability Zone to create the reservation in. Tenancy (string) - Indicates the tenancy of the reservation. InstanceCount (integer) - Number of instances to reserve. EbsOptimized (boolean) - Support for EBS-optimized instances. EphemeralStorage (boolean) - Include ephemeral storage. EndDate (datetime) - Date and time when the reservation expires. InstanceMatchCriteria (string) - Type of instance launches accepted. TagSpecifications (list) - Tags to apply. DryRun (boolean) - Checks permissions without making the request. OutpostArn (string) - ARN of the Outpost. PlacementGroupArn (string) - ARN of the placement group. Returns: dict with details of the CapacityReservation."
    },
    "ec2.client.create_capacity_reservation_fleet": {
        "new_func": "ec2.client.create_capacity_reservation_fleet",
        "description": "Creates a Capacity Reservation Fleet with specified attributes. Parameters: AllocationStrategy (string) - Strategy for instance type allocation. ClientToken (string) - Unique identifier for idempotency. InstanceTypeSpecifications (list) - Instance types to include in the fleet. Tenancy (string) - Tenancy setting for the fleet. TotalTargetCapacity (integer) - Total capacity units to reserve. EndDate (datetime) - Date and time when the fleet expires. InstanceMatchCriteria (string) - Type of instance launches accepted. TagSpecifications (list) - Tags to apply. DryRun (boolean) - Checks permissions without making the request. Returns: dict with CapacityReservationFleetId, State, TotalTargetCapacity, and other details."
    },
    "ec2.client.create_carrier_gateway": {
        "new_func": "ec2.client.create_carrier_gateway",
        "description": "Creates a carrier gateway in a specified VPC. Parameters: VpcId (string) - ID of the VPC. TagSpecifications (list) - Tags to assign to the gateway. DryRun (boolean) - Checks permissions without making the request. ClientToken (string) - Unique identifier for idempotency. Returns: dict with details of the CarrierGateway, including CarrierGatewayId, VpcId, State, OwnerId, and Tags."
    },
    "ec2.client.create_client_vpn_endpoint": {
        "new_func": "ec2.client.create_client_vpn_endpoint",
        "description": "Creates a Client VPN endpoint. Parameters: ClientCidrBlock (string) - Required. Range from which to assign client IP addresses. ServerCertificateArn (string) - Required. ARN of server certificate. AuthenticationOptions (list) - Required. Method to authenticate clients. ConnectionLogOptions (dict) - Required. Client connection logging options. DnsServers (list) - DNS servers for DNS resolution. TransportProtocol (string) - Protocol to be used by VPN. VpnPort (integer) - Port number for the VPN. Description (string) - Description of endpoint. SplitTunnel (boolean) - Whether split-tunnel is enabled. DryRun (boolean) - Check permissions without the request. ClientToken (string) - Idempotency token. TagSpecifications (list) - Tags to apply during creation. SecurityGroupIds (list) - Security group IDs. VpcId (string) - ID of the associated VPC. SelfServicePortal (string) - Enable/disable self-service portal. ClientConnectOptions (dict) - Connection authorization options. SessionTimeoutHours (integer) - VPN session duration time. ClientLoginBannerOptions (dict) - Customizable text banner. Returns: dict with ClientVpnEndpointId, Status, and DnsName."
    },
    "ec2.client.create_client_vpn_route": {
        "new_func": "ec2.client.create_client_vpn_route",
        "description": "Adds a route to a Client VPN endpoint. Parameters: ClientVpnEndpointId (string) - Required. ID of the Client VPN endpoint. DestinationCidrBlock (string) - Required. IPv4 CIDR range of the route destination. TargetVpcSubnetId (string) - Required. ID of the subnet for routing traffic. Description (string) - Description of the route. ClientToken (string) - Idempotency token. DryRun (boolean) - Check permissions without the request. Returns: dict with Status of the route."
    },
    "ec2.client.create_coip_cidr": {
        "new_func": "ec2.client.create_coip_cidr",
        "description": "Creates a range of customer-owned IP addresses. Parameters: Cidr (string) - Required. IP address range to create. CoipPoolId (string) - Required. ID of the address pool. DryRun (boolean) - Check permissions without the request. Returns: dict with CoipCidr containing Cidr, CoipPoolId, and LocalGatewayRouteTableId."
    },
    "ec2.client.create_coip_pool": {
        "new_func": "ec2.client.create_coip_pool",
        "description": "Creates a pool of customer-owned IP addresses. Parameters: LocalGatewayRouteTableId (string) - Required. ID of the local gateway route table. TagSpecifications (list) - Tags to assign to the CoIP address pool. DryRun (boolean) - Check permissions without the request. Returns: dict with CoipPool details including PoolId, PoolCidrs, LocalGatewayRouteTableId, Tags, and PoolArn."
    },
    "ec2.client.create_customer_gateway": {
        "new_func": "ec2.client.create_customer_gateway",
        "description": "Provides information about your customer gateway device. Parameters: BgpAsn (integer) - BGP ASN of the device. PublicIp (string) - Deprecated. Use IpAddress instead. CertificateArn (string) - ARN for the customer gateway certificate. Type (string) - Required. Type of VPN connection supported. TagSpecifications (list) - Tags to apply to the customer gateway. DeviceName (string) - Name for the device. IpAddress (string) - Required. Static IPv4 address for the device's outside interface. DryRun (boolean) - Check permissions without the request. BgpAsnExtended (integer) - BGP ASN for devices that support BGP with an ASN larger than 2,147,483,647. Returns: dict with CustomerGateway details including BgpAsn, CustomerGatewayId, IpAddress, CertificateArn, State, Type, DeviceName, Tags, and BgpAsnExtended."
    },
    "ec2.client.create_default_subnet": {
        "new_func": "ec2.client.create_default_subnet",
        "description": "Creates a default subnet in a specified Availability Zone. Parameters: AvailabilityZone (string) - Required. DryRun (boolean) - Optional. Ipv6Native (boolean) - Optional. Returns: dict containing the created subnet's details."
    },
    "ec2.client.create_default_vpc": {
        "new_func": "ec2.client.create_default_vpc",
        "description": "Creates a default VPC with a /16 IPv4 CIDR block and a default subnet in each Availability Zone. Parameters: DryRun (boolean) - Optional. Returns: dict with the created VPC's details."
    },
    "ec2.client.create_dhcp_options": {
        "new_func": "ec2.client.create_dhcp_options",
        "description": "Creates a set of DHCP options for your VPC. Parameters: DhcpConfigurations (list) - Required. TagSpecifications (list) - Optional. DryRun (boolean) - Optional. Returns: dict with the created DHCP options set's details."
    },
    "ec2.client.create_egress_only_internet_gateway": {
        "new_func": "ec2.client.create_egress_only_internet_gateway",
        "description": "Creates an egress-only internet gateway for a VPC. Parameters: ClientToken (string) - Optional. DryRun (boolean) - Optional. VpcId (string) - Required. TagSpecifications (list) - Optional. Returns: dict with the created egress-only internet gateway's details."
    },
    "ec2.client.create_fleet": {
        "new_func": "ec2.client.create_fleet",
        "description": "Creates an EC2 Fleet for On-Demand and Spot Instances. Parameters: DryRun (boolean), ClientToken (string), SpotOptions (dict), OnDemandOptions (dict), ExcessCapacityTerminationPolicy (string), LaunchTemplateConfigs (list) - Required, TargetCapacitySpecification (dict) - Required, TerminateInstancesWithExpiration (boolean), Type (string), ValidFrom (datetime), ValidUntil (datetime), ReplaceUnhealthyInstances (boolean), TagSpecifications (list), Context (string). Returns: dict with the created fleet's details including any errors and instances."
    },
    "ec2.client.create_flow_logs": {
        "new_func": "ec2.client.create_flow_logs",
        "description": "Creates flow logs for specified network interfaces, VPCs, or subnets. Parameters: DryRun (boolean), ClientToken (string), DeliverLogsPermissionArn (string), DeliverCrossAccountRole (string), LogGroupName (string), ResourceIds (list), ResourceType (string), TrafficType (string), LogDestinationType (string), LogDestination (string), LogFormat (string), TagSpecifications (list), MaxAggregationInterval (integer), DestinationOptions (dict). Returns: dict with ClientToken, FlowLogIds, and Unsuccessful entries."
    },
    "ec2.client.create_fpga_image": {
        "new_func": "ec2.client.create_fpga_image",
        "description": "Creates an Amazon FPGA Image (AFI) from a design checkpoint (DCP). Parameters: DryRun (boolean), InputStorageLocation (dict), LogsStorageLocation (dict), Description (string), Name (string), ClientToken (string), TagSpecifications (list). Returns: dict with FpgaImageId and FpgaImageGlobalId."
    },
    "ec2.client.create_image": {
        "new_func": "ec2.client.create_image",
        "description": "Creates an Amazon EBS-backed AMI from an EBS-backed instance. Parameters: BlockDeviceMappings (list), Description (string), DryRun (boolean), InstanceId (string), Name (string), NoReboot (boolean), TagSpecifications (list). Returns: dict with ImageId."
    },
    "ec2.client.create_instance_connect_endpoint": {
        "new_func": "ec2.client.create_instance_connect_endpoint",
        "description": "Creates an EC2 Instance Connect Endpoint to connect to instances without public IPv4. Parameters: DryRun (boolean), SubnetId (string), SecurityGroupIds (list), PreserveClientIp (boolean), ClientToken (string), TagSpecifications (list). Returns: dict with InstanceConnectEndpoint and ClientToken."
    },
    "ec2.client.create_instance_event_window": {
        "new_func": "ec2.client.create_instance_event_window",
        "description": "Creates an event window for scheduled events of EC2 instances. Parameters: DryRun (boolean), Name (string), TimeRanges (list), CronExpression (string), TagSpecifications (list). Returns: dict with details of the InstanceEventWindow."
    },
    "ec2.client.create_instance_export_task": {
        "new_func": "ec2.client.create_instance_export_task",
        "description": "Exports an EC2 instance to an S3 bucket. Parameters: Description (string) - Optional description. ExportToS3Task (dict) - Required, contains ContainerFormat, DiskImageFormat, S3Bucket, and S3Prefix. InstanceId (string) - Required, the instance ID. TargetEnvironment (string) - Required, the virtualization environment. TagSpecifications (list) - Optional tags. Returns: dict with ExportTask details including Description, ExportTaskId, ExportToS3Task, InstanceExportDetails, State, StatusMessage, and Tags."
    },
    "ec2.client.create_internet_gateway": {
        "new_func": "ec2.client.create_internet_gateway",
        "description": "Creates an internet gateway for a VPC. Parameters: TagSpecifications (list) - Optional tags. DryRun (boolean) - Optional permission check. Returns: dict with InternetGateway details including Attachments, InternetGatewayId, OwnerId, and Tags."
    },
    "ec2.client.create_ipam": {
        "new_func": "ec2.client.create_ipam",
        "description": "Creates an IP Address Manager (IPAM). Parameters: DryRun (boolean) - Optional permission check. Description (string) - Optional description. OperatingRegions (list) - Required, regions where IPAM is allowed to manage IP address CIDRs. TagSpecifications (list) - Optional tags. ClientToken (string) - Ensures idempotency. Tier (string) - IPAM tier, 'free' or 'advanced'. Returns: dict with Ipam details including OwnerId, IpamId, IpamArn, and more."
    },
    "ec2.client.create_ipam_pool": {
        "new_func": "ec2.client.create_ipam_pool",
        "description": "Creates an IPAM pool for managing IP address CIDRs. Parameters: DryRun (boolean) - Optional permission check. IpamScopeId (string) - Required, the scope ID. Locale (string), SourceIpamPoolId (string), Description (string), AddressFamily (string) - Required, 'ipv4' or 'ipv6'. AutoImport (boolean), PubliclyAdvertisable (boolean), AllocationMinNetmaskLength, AllocationMaxNetmaskLength, AllocationDefaultNetmaskLength (integers) - CIDR allocation rules. AllocationResourceTags (list), TagSpecifications (list) - Optional tags. ClientToken (string), AwsService (string), PublicIpSource (string), SourceResource (dict) - Source for CIDR provisioning. Returns: dict with IpamPool details."
    },
    "ec2.client.create_ipam_resource_discovery": {
        "new_func": "ec2.client.create_ipam_resource_discovery",
        "description": "Creates an IPAM resource discovery for managing and monitoring resources. Parameters: DryRun (boolean) - Optional permission check. Description (string) - Optional description. OperatingRegions (list) - Required, regions where IPAM is allowed to manage IP address CIDRs. TagSpecifications (list) - Optional tags. ClientToken (string) - Ensures idempotency. Returns: dict with IpamResourceDiscovery details including OwnerId, IpamResourceDiscoveryId, IpamResourceDiscoveryArn, and more."
    },
    "ec2.client.create_ipam_scope": {
        "new_func": "ec2.client.create_ipam_scope",
        "description": "Creates an IPAM scope within an IPAM. Parameters: DryRun (boolean) - Checks permissions without request. IpamId (string) - Required. ID of the IPAM. Description (string) - Description of the scope. TagSpecifications (list) - Tags for the resource. ClientToken (string) - Idempotency token. Returns: dict with IpamScope details including OwnerId, IpamScopeId, IpamScopeArn, IpamArn, IpamRegion, IpamScopeType, IsDefault, Description, PoolCount, State, and Tags."
    },
    "ec2.client.create_key_pair": {
        "new_func": "ec2.client.create_key_pair",
        "description": "Creates an ED25519 or 2048-bit RSA key pair. Parameters: KeyName (string) - Required. Unique name for the key pair. DryRun (boolean) - Checks permissions without request. KeyType (string) - 'rsa' or 'ed25519'. TagSpecifications (list) - Tags for the resource. KeyFormat (string) - 'pem' or 'ppk'. Returns: dict with KeyFingerprint, KeyMaterial, KeyName, KeyPairId, and Tags."
    },
    "ec2.client.create_launch_template": {
        "new_func": "ec2.client.create_launch_template",
        "description": "Creates a launch template for EC2 instances. Parameters: DryRun (boolean) - Checks permissions without request. ClientToken (string) - Idempotency token. LaunchTemplateName (string) - Required. Name of the template. VersionDescription (string) - Description for the first version. LaunchTemplateData (dict) - Required. Information for the template. TagSpecifications (list) - Tags for the template on creation. Returns: dict with LaunchTemplate details and optional Warning for invalid parameters."
    },
    "ec2.client.create_launch_template_version": {
        "new_func": "ec2.client.create_launch_template_version",
        "description": "Creates a new version of an existing launch template. Parameters: DryRun (boolean) - Checks permissions without request. ClientToken (string) - Idempotency token. LaunchTemplateId (string) - ID of the template. LaunchTemplateName (string) - Name of the template. SourceVersion (string) - Version to base the new version on. VersionDescription (string) - Description of the new version. LaunchTemplateData (dict) - Information for the template. ResolveAlias (boolean) - If true, resolves Systems Manager parameter to AMI ID. Returns: dict with LaunchTemplateVersion details and optional Warning for invalid parameters."
    },
    "ec2.client.create_local_gateway_route": {
        "new_func": "ec2.client.create_local_gateway_route",
        "description": "Creates a static route for a local gateway route table. Parameters: DestinationCidrBlock (string) - CIDR for destination matches. LocalGatewayRouteTableId (string) - Required. ID of the route table. LocalGatewayVirtualInterfaceGroupId (string) - ID of the virtual interface group. DryRun (boolean) - Checks permissions without request. NetworkInterfaceId (string) - ID of the network interface. DestinationPrefixListId (string) - ID of the prefix list. Returns: dict with details of the created Route."
    },
    "ec2.client.create_local_gateway_route_table": {
        "new_func": "ec2.client.create_local_gateway_route_table",
        "description": "Creates a local gateway route table. Parameters: LocalGatewayId (string) - Required. The ID of the local gateway. Mode (string) - The mode of the local gateway route table. TagSpecifications (list) - The tags assigned to the local gateway route table. DryRun (boolean) - Checks permissions without making the request. Returns: dict with LocalGatewayRouteTable including LocalGatewayRouteTableId, LocalGatewayRouteTableArn, LocalGatewayId, OutpostArn, OwnerId, State, Tags, Mode, and StateReason."
    },
    "ec2.client.create_local_gateway_route_table_virtual_interface_group_association": {
        "new_func": "ec2.client.create_local_gateway_route_table_virtual_interface_group_association",
        "description": "Creates an association between a local gateway route table and a virtual interface group. Parameters: LocalGatewayRouteTableId (string) - Required. The ID of the local gateway route table. LocalGatewayVirtualInterfaceGroupId (string) - Required. The ID of the virtual interface group. TagSpecifications (list) - Tags for the association. DryRun (boolean) - Checks permissions without making the request. Returns: dict with LocalGatewayRouteTableVirtualInterfaceGroupAssociation including IDs and tags."
    },
    "ec2.client.create_local_gateway_route_table_vpc_association": {
        "new_func": "ec2.client.create_local_gateway_route_table_vpc_association",
        "description": "Associates a VPC with a local gateway route table. Parameters: LocalGatewayRouteTableId (string) - Required. The ID of the local gateway route table. VpcId (string) - Required. The ID of the VPC. TagSpecifications (list) - Tags for the association. DryRun (boolean) - Checks permissions without making the request. Returns: dict with LocalGatewayRouteTableVpcAssociation including IDs and tags."
    },
    "ec2.client.create_managed_prefix_list": {
        "new_func": "ec2.client.create_managed_prefix_list",
        "description": "Creates a managed prefix list with CIDR blocks and optional descriptions. Parameters: DryRun (boolean) - Checks permissions without making the request. PrefixListName (string) - Required. Name of the prefix list. Entries (list) - CIDR blocks and their descriptions. MaxEntries (integer) - Required. Maximum number of entries. TagSpecifications (list) - Tags for the prefix list. AddressFamily (string) - Required. IP address type. ClientToken (string) - Idempotency token. Returns: dict with PrefixList including PrefixListId, AddressFamily, State, StateMessage, PrefixListArn, PrefixListName, MaxEntries, Version, Tags, and OwnerId."
    },
    "ec2.client.create_nat_gateway": {
        "new_func": "ec2.client.create_nat_gateway",
        "description": "Creates a NAT gateway in a specified subnet. Parameters: AllocationId (string) - Elastic IP address association for public NAT. ClientToken (string) - Idempotency token. DryRun (boolean) - Checks permissions without making the request. SubnetId (string) - Required. The ID of the subnet. TagSpecifications (list) - Tags for the NAT gateway. ConnectivityType (string) - Public or private connectivity. PrivateIpAddress (string) - Private IPv4 address for the NAT gateway. SecondaryAllocationIds (list) - Secondary EIP allocation IDs. SecondaryPrivateIpAddresses (list) - Secondary private IPv4 addresses. SecondaryPrivateIpAddressCount (integer) - Number of secondary private IPv4 addresses. Returns: dict with NatGateway including CreateTime, DeleteTime, FailureCode, FailureMessage, NatGatewayAddresses, NatGatewayId, ProvisionedBandwidth, State, SubnetId, VpcId, Tags, and ConnectivityType."
    },
    "ec2.client.create_network_acl": {
        "new_func": "ec2.client.create_network_acl",
        "description": "Creates a network ACL in a VPC. Parameters: DryRun (boolean) - Check permissions without request. VpcId (string) - Required. ID of the VPC. TagSpecifications (list) - Tags for network ACL. ClientToken (string) - Idempotency token. Returns: dict with NetworkAcl details, including Associations, Entries, IsDefault, NetworkAclId, Tags, VpcId, OwnerId, and ClientToken."
    },
    "ec2.client.create_network_acl_entry": {
        "new_func": "ec2.client.create_network_acl_entry",
        "description": "Creates a rule in a network ACL. Parameters: CidrBlock (string) - IPv4 range in CIDR. DryRun (boolean) - Check permissions without request. Egress (boolean) - Rule for egress traffic. IcmpTypeCode (dict) - ICMP type and code. Ipv6CidrBlock (string) - IPv6 range in CIDR. NetworkAclId (string) - ID of the network ACL. PortRange (dict) - Range of ports. Protocol (string) - Protocol number. RuleAction (string) - 'allow' or 'deny'. RuleNumber (integer) - Rule number. Returns: None."
    },
    "ec2.client.create_network_insights_access_scope": {
        "new_func": "ec2.client.create_network_insights_access_scope",
        "description": "Creates a Network Access Scope. Parameters: MatchPaths (list) - Paths to match. ExcludePaths (list) - Paths to exclude. ClientToken (string) - Idempotency token. TagSpecifications (list) - Tags to apply. DryRun (boolean) - Check permissions without request. Returns: dict with NetworkInsightsAccessScope details and NetworkInsightsAccessScopeContent."
    },
    "ec2.client.create_network_insights_path": {
        "new_func": "ec2.client.create_network_insights_path",
        "description": "Creates a path to analyze for reachability. Parameters: SourceIp (string) - Source IP. DestinationIp (string) - Destination IP. Source (string) - Required. Source ID or ARN. Destination (string) - Destination ID or ARN. Protocol (string) - Required. Protocol. DestinationPort (integer) - Destination port. TagSpecifications (list) - Tags to add. DryRun (boolean) - Check permissions without request. ClientToken (string) - Idempotency token. FilterAtSource (dict) - Filters at source. FilterAtDestination (dict) - Filters at destination. Returns: dict with NetworkInsightsPath details."
    },
    "ec2.client.create_network_interface": {
        "new_func": "ec2.client.create_network_interface",
        "description": "Creates a network interface in a subnet. Parameters: Description (string) - Description of the interface. DryRun (boolean) - Check permissions without request. Groups (list) - Security group IDs. Ipv6AddressCount (integer) - Number of IPv6 addresses. Ipv6Addresses (list) - Specific IPv6 addresses. PrivateIpAddress (string) - Primary private IPv4 address. PrivateIpAddresses (list) - Private IPv4 addresses. SecondaryPrivateIpAddressCount (integer) - Number of secondary IPv4 addresses. Ipv4Prefixes (list) - IPv4 prefixes. Ipv4PrefixCount (integer) - Number of IPv4 prefixes. Ipv6Prefixes (list) - IPv6 prefixes. Ipv6PrefixCount (integer) - Number of IPv6 prefixes. InterfaceType (string) - Type of network interface. SubnetId (string) - Required. ID of the subnet. TagSpecifications (list) - Tags for the interface. ClientToken (string) - Idempotency token. EnablePrimaryIpv6 (boolean) - Enable primary IPv6 on the interface. ConnectionTrackingSpecification (dict) - Connection tracking specification. Returns: dict with NetworkInterface details and ClientToken."
    },
    "ec2.client.create_network_interface_permission": {
        "new_func": "ec2.client.create_network_interface_permission",
        "description": "Grants permission to attach a network interface to an instance. Parameters: NetworkInterfaceId (string) - Required. ID of the network interface. AwsAccountId (string) - AWS account ID. Permission (string) - Required. Type of permission. DryRun (boolean) - Checks permissions without making the request. Returns: dict with NetworkInterfacePermission including NetworkInterfacePermissionId, NetworkInterfaceId, AwsAccountId, Permission, and PermissionState."
    },
    "ec2.client.create_placement_group": {
        "new_func": "ec2.client.create_placement_group",
        "description": "Creates a placement group for launching instances. Parameters: DryRun (boolean) - Checks permissions without making the request. GroupName (string) - Name of the placement group. Strategy (string) - Placement strategy. PartitionCount (integer) - Number of partitions for 'partition' strategy. TagSpecifications (list) - Tags for the new placement group. SpreadLevel (string) - Determines placement group spread level. Returns: dict with PlacementGroup details including GroupName, State, Strategy, PartitionCount, GroupId, Tags, GroupArn, and SpreadLevel."
    },
    "ec2.client.create_public_ipv4_pool": {
        "new_func": "ec2.client.create_public_ipv4_pool",
        "description": "Creates a public IPv4 address pool. Parameters: DryRun (boolean) - Checks permissions without making the request. TagSpecifications (list) - Tags for the address pool. Returns: dict with PoolId of the created IPv4 pool."
    },
    "ec2.client.create_replace_root_volume_task": {
        "new_func": "ec2.client.create_replace_root_volume_task",
        "description": "Replaces the EBS-backed root volume for a running instance. Parameters: InstanceId (string) - Required. ID of the instance. SnapshotId (string) - ID of the snapshot to restore the volume. ClientToken (string) - Idempotency token. DryRun (boolean) - Checks permissions without making the request. TagSpecifications (list) - Tags for the root volume replacement task. ImageId (string) - ID of the AMI for the root volume. DeleteReplacedRootVolume (boolean) - Whether to delete the original root volume after completion. Returns: dict with ReplaceRootVolumeTask details including ReplaceRootVolumeTaskId, InstanceId, TaskState, StartTime, CompleteTime, Tags, ImageId, SnapshotId, and DeleteReplacedRootVolume."
    },
    "ec2.client.create_reserved_instances_listing": {
        "new_func": "ec2.client.create_reserved_instances_listing",
        "description": "Creates a listing for selling Standard Reserved Instances in the Reserved Instance Marketplace. Parameters: ClientToken (string) - Required. Idempotency token. InstanceCount (integer) - Required. Number of instances to list. PriceSchedules (list) - Required. Price of the Reserved Instance for each month remaining. ReservedInstancesId (string) - Required. ID of the Reserved Instance. Returns: dict with ReservedInstancesListings details including ClientToken, CreateDate, InstanceCounts, PriceSchedules, ReservedInstancesId, ReservedInstancesListingId, Status, StatusMessage, Tags, and UpdateDate."
    },
    "ec2.client.create_restore_image_task": {
        "new_func": "ec2.client.create_restore_image_task",
        "description": "Starts a task to restore an AMI from an S3 object previously created by CreateStoreImageTask. Parameters: Bucket (string) - Required. The S3 bucket name. ObjectKey (string) - Required. The S3 object name. Name (string) - The name for the restored AMI. TagSpecifications (list) - Tags to apply to the AMI and snapshots on restoration, specifying ResourceType and Tags. DryRun (boolean) - Checks permissions without making the request. Returns: dict with 'ImageId' (string)."
    },
    "ec2.client.create_route": {
        "new_func": "ec2.client.create_route",
        "description": "Creates a route in a route table within a VPC. Parameters: DestinationCidrBlock (string) - IPv4 CIDR block for the destination. DestinationIpv6CidrBlock (string) - IPv6 CIDR block for the destination. Various parameters for route targets like GatewayId, InstanceId, etc. RouteTableId (string) - Required. The ID of the route table. DryRun (boolean) - Checks permissions without making the request. Returns: dict with 'Return' (boolean) indicating if the request succeeds."
    },
    "ec2.client.create_route_table": {
        "new_func": "ec2.client.create_route_table",
        "description": "Creates a route table for a VPC. Parameters: VpcId (string) - Required. The ID of the VPC. TagSpecifications (list) - Tags to assign to the route table. DryRun (boolean) - Checks permissions without making the request. ClientToken (string) - Ensures idempotency. Returns: dict with details about the route table including 'RouteTable' (dict) with Associations, PropagatingVgws, RouteTableId, Routes, Tags, VpcId, and OwnerId."
    },
    "ec2.client.create_security_group": {
        "new_func": "ec2.client.create_security_group",
        "description": "Creates a security group acting as a virtual firewall. Parameters: Description (string) - Required. Description of the group. GroupName (string) - Required. Name of the security group. VpcId (string) - The ID of the VPC for a nondefault VPC. TagSpecifications (list) - Tags to assign to the security group. DryRun (boolean) - Checks permissions without making the request. Returns: dict with 'GroupId' (string) and assigned 'Tags' (list)."
    },
    "ec2.client.create_snapshot": {
        "new_func": "ec2.client.create_snapshot",
        "description": "Creates a snapshot of an EBS volume. Parameters: Description (string) - Snapshot description. OutpostArn (string) - The ARN of the Outpost for a local snapshot. VolumeId (string) - Required. The ID of the EBS volume. TagSpecifications (list) - Tags to apply during creation. DryRun (boolean) - Checks permissions without making the request. Returns: dict with snapshot details including 'SnapshotId', 'VolumeId', 'State', and 'StartTime'."
    },
    "ec2.client.create_snapshots": {
        "new_func": "ec2.client.create_snapshots",
        "description": "Creates crash-consistent snapshots of multiple EBS volumes. Parameters: Description (string) - Snapshot description. InstanceSpecification (dict) - Required. Information about the instance and volumes to snapshot, including InstanceId (string), ExcludeBootVolume (boolean), and ExcludeDataVolumeIds (list). OutpostArn (string) - ARN of the Outpost. TagSpecifications (list) - Tags for the snapshots. DryRun (boolean) - Checks permissions. CopyTagsFromSource (string) - Copies tags from source volume. Returns: dict with 'Snapshots' list containing snapshot details like Description, Tags, Encrypted, VolumeId, State, VolumeSize, StartTime, Progress, OwnerId, SnapshotId, OutpostArn, SseType."
    },
    "ec2.client.create_spot_datafeed_subscription": {
        "new_func": "ec2.client.create_spot_datafeed_subscription",
        "description": "Creates a data feed for Spot Instances. Parameters: Bucket (string) - Required. S3 bucket name for data feed. DryRun (boolean) - Checks permissions. Prefix (string) - Prefix for data feed file names. Returns: dict with 'SpotDatafeedSubscription' containing Bucket, Fault, OwnerId, Prefix, State."
    },
    "ec2.client.create_store_image_task": {
        "new_func": "ec2.client.create_store_image_task",
        "description": "Stores an AMI as a single object in an S3 bucket. Parameters: ImageId (string) - Required. ID of the AMI. Bucket (string) - Required. S3 bucket name. S3ObjectTags (list) - Tags for the AMI object in S3. DryRun (boolean) - Checks permissions. Returns: dict with 'ObjectKey' indicating the stored AMI object name in S3."
    },
    "ec2.client.create_subnet": {
        "new_func": "ec2.client.create_subnet",
        "description": "Creates a subnet in a specified VPC with IPv4 and/or IPv6 CIDR block. Parameters: TagSpecifications (list) - Tags for the subnet. AvailabilityZone (string) - Availability Zone for the subnet. AvailabilityZoneId (string) - AZ ID. CidrBlock (string) - IPv4 CIDR block. Ipv6CidrBlock (string) - IPv6 CIDR block. OutpostArn (string) - Outpost ARN. VpcId (string) - Required. VPC ID. DryRun (boolean) - Checks permissions. Ipv6Native (boolean) - Indicates IPv6 only subnet. Ipv4IpamPoolId (string) - IPv4 IPAM pool ID. Ipv4NetmaskLength (integer) - IPv4 netmask length. Ipv6IpamPoolId (string) - IPv6 IPAM pool ID. Ipv6NetmaskLength (integer) - IPv6 netmask length. Returns: dict with 'Subnet' details including AvailabilityZone, CidrBlock, State, SubnetId, VpcId, Tags, and more."
    },
    "ec2.client.create_subnet_cidr_reservation": {
        "new_func": "ec2.client.create_subnet_cidr_reservation",
        "description": "Creates a subnet CIDR reservation. Parameters: SubnetId (string) - Required. Subnet ID. Cidr (string) - Required. IPv4/IPv6 CIDR to reserve. ReservationType (string) - Required. Type of reservation (prefix/explicit). Description (string) - Description for reservation. DryRun (boolean) - Checks permissions. TagSpecifications (list) - Tags for the reservation. Returns: dict with 'SubnetCidrReservation' details including SubnetCidrReservationId, SubnetId, Cidr, ReservationType, Tags."
    },
    "ec2.client.create_tags": {
        "new_func": "ec2.client.create_tags",
        "description": "Adds or overwrites specified tags for an Amazon EC2 resource. Parameters: DryRun (boolean) - Optional permission check. Resources (list of strings) - Required. Resource IDs to tag. Tags (list of dicts) - Required. Tags to add or overwrite (Key and Value). Returns: None."
    },
    "ec2.client.create_traffic_mirror_filter": {
        "new_func": "ec2.client.create_traffic_mirror_filter",
        "description": "Creates a Traffic Mirror filter with rules that define traffic to mirror. Parameters: Description (string) - Optional. TagSpecifications (list of dicts) - Optional. Tags for the Traffic Mirror filter. DryRun (boolean) - Optional permission check. ClientToken (string) - Optional idempotency token. Returns: dict with TrafficMirrorFilter details including TrafficMirrorFilterId, ingress/egress rules, and tags."
    },
    "ec2.client.create_traffic_mirror_filter_rule": {
        "new_func": "ec2.client.create_traffic_mirror_filter_rule",
        "description": "Creates a Traffic Mirror filter rule for defining source traffic to mirror. Parameters: TrafficMirrorFilterId (string) - Required. TrafficDirection (string) - Required. RuleNumber (integer) - Required. RuleAction (string) - Required. DestinationPortRange (dict) - Optional. SourcePortRange (dict) - Optional. Protocol (integer) - Optional. DestinationCidrBlock (string) - Required. SourceCidrBlock (string) - Required. Description (string) - Optional. DryRun (boolean) - Optional permission check. ClientToken (string) - Optional idempotency token. TagSpecifications (list of dicts) - Optional. Tags for the rule. Returns: dict with TrafficMirrorFilterRule details and tags."
    },
    "ec2.client.create_traffic_mirror_session": {
        "new_func": "ec2.client.create_traffic_mirror_session",
        "description": "Creates a Traffic Mirror session for copying packets. Parameters: NetworkInterfaceId (string) - Required. TrafficMirrorTargetId (string) - Required. TrafficMirrorFilterId (string) - Required. PacketLength (integer) - Optional. SessionNumber (integer) - Required. VirtualNetworkId (integer) - Optional. Description (string) - Optional. TagSpecifications (list of dicts) - Optional. Tags for the session. DryRun (boolean) - Optional permission check. ClientToken (string) - Optional idempotency token. Returns: dict with TrafficMirrorSession details and tags."
    },
    "ec2.client.create_traffic_mirror_target": {
        "new_func": "ec2.client.create_traffic_mirror_target",
        "description": "Creates a Traffic Mirror target for mirrored traffic destination. Parameters: NetworkInterfaceId (string) - Optional. NetworkLoadBalancerArn (string) - Optional. Description (string) - Optional. TagSpecifications (list of dicts) - Optional. Tags for the target. DryRun (boolean) - Optional permission check. ClientToken (string) - Optional idempotency token. GatewayLoadBalancerEndpointId (string) - Optional. Returns: dict with TrafficMirrorTarget details including type, description, owner, tags, and identifiers."
    },
    "ec2.client.create_transit_gateway": {
        "new_func": "ec2.client.create_transit_gateway",
        "description": "Creates a transit gateway to interconnect VPCs and on-premises networks. Parameters: Description (string) - A description of the transit gateway. Options (dict) - The transit gateway options including AmazonSideAsn, AutoAcceptSharedAttachments, DefaultRouteTableAssociation, DefaultRouteTablePropagation, VpnEcmpSupport, DnsSupport, SecurityGroupReferencingSupport, MulticastSupport, TransitGatewayCidrBlocks. TagSpecifications (list) - The tags to apply to the transit gateway. DryRun (boolean) - Checks permissions without making the request. Returns: dict with information about the created transit gateway including TransitGatewayId, State, Options, and Tags."
    },
    "ec2.client.create_transit_gateway_connect": {
        "new_func": "ec2.client.create_transit_gateway_connect",
        "description": "Creates a Connect attachment from a transit gateway attachment using GRE. Parameters: TransportTransitGatewayAttachmentId (string) - Required. The ID of the transit gateway attachment. Options (dict) - Required. The Connect attachment options including Protocol. TagSpecifications (list) - The tags to apply to the Connect attachment. DryRun (boolean) - Checks permissions without making the request. Returns: dict with information about the Connect attachment including TransitGatewayAttachmentId, State, Options, and Tags."
    },
    "ec2.client.create_transit_gateway_connect_peer": {
        "new_func": "ec2.client.create_transit_gateway_connect_peer",
        "description": "Creates a Connect peer for a transit gateway Connect attachment. Parameters: TransitGatewayAttachmentId (string) - Required. The ID of the Connect attachment. TransitGatewayAddress (string) - The peer IP address on the transit gateway side. PeerAddress (string) - Required. The peer IP address on the appliance side. BgpOptions (dict) - The BGP options including PeerAsn. InsideCidrBlocks (list) - Required. The range of inside IP addresses for BGP peering. TagSpecifications (list) - The tags to apply to the Connect peer. DryRun (boolean) - Checks permissions without making the request. Returns: dict with information about the Connect peer including TransitGatewayConnectPeerId, State, ConnectPeerConfiguration, and Tags."
    },
    "ec2.client.create_transit_gateway_multicast_domain": {
        "new_func": "ec2.client.create_transit_gateway_multicast_domain",
        "description": "Creates a multicast domain for a transit gateway. Parameters: TransitGatewayId (string) - Required. The ID of the transit gateway. Options (dict) - The options for the multicast domain including Igmpv2Support, StaticSourcesSupport, AutoAcceptSharedAssociations. TagSpecifications (list) - The tags for the transit gateway multicast domain. DryRun (boolean) - Checks permissions without making the request. Returns: dict with information about the multicast domain including TransitGatewayMulticastDomainId, State, Options, and Tags."
    },
    "ec2.client.create_transit_gateway_peering_attachment": {
        "new_func": "ec2.client.create_transit_gateway_peering_attachment",
        "description": "Requests a transit gateway peering attachment between two transit gateways. Parameters: TransitGatewayId (string) - Required. The ID of the transit gateway (requester). PeerTransitGatewayId (string) - Required. The ID of the peer transit gateway (accepter). PeerAccountId (string) - Required. The account ID of the peer transit gateway owner. PeerRegion (string) - Required. The Region of the peer transit gateway. Options (dict) - The peering attachment options including DynamicRouting. TagSpecifications (list) - The tags for the peering attachment. DryRun (boolean) - Checks permissions without making the request. Returns: dict with information about the peering attachment including TransitGatewayAttachmentId, State, RequesterTgwInfo, AccepterTgwInfo, Options, and Tags."
    },
    "ec2.client.create_transit_gateway_policy_table": {
        "new_func": "ec2.client.create_transit_gateway_policy_table",
        "description": "Creates a transit gateway policy table. Parameters: TransitGatewayId (string) - Required. ID of the transit gateway. TagSpecifications (list) - Tags to apply during creation with ResourceType and Tags as Key-Value pairs. DryRun (boolean) - Checks permissions without making the request. Returns: dict with TransitGatewayPolicyTable details including TransitGatewayPolicyTableId, TransitGatewayId, State, CreationTime, and Tags."
    },
    "ec2.client.create_transit_gateway_prefix_list_reference": {
        "new_func": "ec2.client.create_transit_gateway_prefix_list_reference",
        "description": "Creates a reference to a prefix list in a transit gateway route table. Parameters: TransitGatewayRouteTableId (string) - Required. ID of the route table. PrefixListId (string) - Required. ID of the prefix list for destination matches. TransitGatewayAttachmentId (string) - ID of the attachment for traffic routing. Blackhole (boolean) - Whether to drop matching traffic. DryRun (boolean) - Checks permissions without making the request. Returns: dict with TransitGatewayPrefixListReference details including TransitGatewayRouteTableId, PrefixListId, PrefixListOwnerId, State, Blackhole, and TransitGatewayAttachment."
    },
    "ec2.client.create_transit_gateway_route": {
        "new_func": "ec2.client.create_transit_gateway_route",
        "description": "Creates a static route for a transit gateway route table. Parameters: DestinationCidrBlock (string) - Required. CIDR range for destination matches. TransitGatewayRouteTableId (string) - Required. ID of the route table. TransitGatewayAttachmentId (string) - ID of the attachment for the route. Blackhole (boolean) - Whether to drop matching traffic. DryRun (boolean) - Checks permissions without making the request. Returns: dict with Route details including DestinationCidrBlock, PrefixListId, TransitGatewayRouteTableAnnouncementId, TransitGatewayAttachments, Type, and State."
    },
    "ec2.client.create_transit_gateway_route_table": {
        "new_func": "ec2.client.create_transit_gateway_route_table",
        "description": "Creates a route table for a transit gateway. Parameters: TransitGatewayId (string) - Required. ID of the transit gateway. TagSpecifications (list) - Tags to apply during creation with ResourceType and Tags as Key-Value pairs. DryRun (boolean) - Checks permissions without making the request. Returns: dict with TransitGatewayRouteTable details including TransitGatewayRouteTableId, TransitGatewayId, State, DefaultAssociationRouteTable, DefaultPropagationRouteTable, CreationTime, and Tags."
    },
    "ec2.client.create_transit_gateway_route_table_announcement": {
        "new_func": "ec2.client.create_transit_gateway_route_table_announcement",
        "description": "Advertises a new transit gateway route table. Parameters: TransitGatewayRouteTableId (string) - Required. ID of the route table. PeeringAttachmentId (string) - Required. ID of the peering attachment. TagSpecifications (list) - Tags to apply during creation with ResourceType and Tags as Key-Value pairs. DryRun (boolean) - Checks permissions without making the request. Returns: dict with TransitGatewayRouteTableAnnouncement details including TransitGatewayRouteTableAnnouncementId, TransitGatewayId, CoreNetworkId, PeerTransitGatewayId, PeerCoreNetworkId, PeeringAttachmentId, AnnouncementDirection, TransitGatewayRouteTableId, State, CreationTime, and Tags."
    },
    "ec2.client.create_transit_gateway_vpc_attachment": {
        "new_func": "ec2.client.create_transit_gateway_vpc_attachment",
        "description": "Attaches a VPC to a transit gateway. Parameters: TransitGatewayId (string) - Required. ID of the transit gateway. VpcId (string) - Required. ID of the VPC. SubnetIds (list) - Required. IDs of one or more subnets. Options (dict) - VPC attachment options, including DnsSupport, SecurityGroupReferencingSupport, Ipv6Support, ApplianceModeSupport. TagSpecifications (list) - Tags for the VPC attachment. DryRun (boolean) - Checks permissions without making the request. Returns: dict with TransitGatewayVpcAttachment details."
    },
    "ec2.client.create_verified_access_endpoint": {
        "new_func": "ec2.client.create_verified_access_endpoint",
        "description": "Creates a Verified Access endpoint. Parameters: VerifiedAccessGroupId (string) - Required. ID of the Verified Access group. EndpointType (string) - Required. Type of Verified Access endpoint. AttachmentType (string) - Required. Type of attachment. DomainCertificateArn (string) - Required. ARN of the domain certificate. ApplicationDomain (string) - Required. DNS name for the application. EndpointDomainPrefix (string) - Required. Prefix for the endpoint domain. SecurityGroupIds (list) - Security group IDs. LoadBalancerOptions (dict) - Details for load-balancer type endpoints. NetworkInterfaceOptions (dict) - Details for network-interface type endpoints. Description (string) - Description of the endpoint. PolicyDocument (string) - Verified Access policy document. TagSpecifications (list) - Tags for the endpoint. ClientToken (string) - Token for idempotency. DryRun (boolean) - Checks permissions without making the request. SseSpecification (dict) - Options for server-side encryption. Returns: dict with VerifiedAccessEndpoint details."
    },
    "ec2.client.create_verified_access_group": {
        "new_func": "ec2.client.create_verified_access_group",
        "description": "Creates a Verified Access group. Parameters: VerifiedAccessInstanceId (string) - Required. ID of the Verified Access instance. Description (string) - Description of the group. PolicyDocument (string) - Verified Access policy document. TagSpecifications (list) - Tags for the group. ClientToken (string) - Token for idempotency. DryRun (boolean) - Checks permissions without making the request. SseSpecification (dict) - Options for server-side encryption. Returns: dict with VerifiedAccessGroup details."
    },
    "ec2.client.create_verified_access_instance": {
        "new_func": "ec2.client.create_verified_access_instance",
        "description": "Creates a Verified Access instance. Parameters: Description (string) - Description of the instance. TagSpecifications (list) - Tags for the instance. ClientToken (string) - Token for idempotency. DryRun (boolean) - Checks permissions without making the request. FIPSEnabled (boolean) - Enable/disable FIPS on the instance. Returns: dict with VerifiedAccessInstance details."
    },
    "ec2.client.create_verified_access_trust_provider": {
        "new_func": "ec2.client.create_verified_access_trust_provider",
        "description": "Creates a Verified Access trust provider. Parameters: TrustProviderType (string) - Required. Type of trust provider. UserTrustProviderType (string) - Type of user-based trust provider. DeviceTrustProviderType (string) - Type of device-based trust provider. OidcOptions (dict) - Options for OIDC user-identity trust provider. DeviceOptions (dict) - Options for device-based trust provider. PolicyReferenceName (string) - Required. Identifier for policy rules. Description (string) - Description of the trust provider. TagSpecifications (list) - Tags for the trust provider. ClientToken (string) - Token for idempotency. DryRun (boolean) - Checks permissions without making the request. SseSpecification (dict) - Options for server-side encryption. Returns: dict with VerifiedAccessTrustProvider details."
    },
    "ec2.client.create_volume": {
        "new_func": "ec2.client.create_volume",
        "description": "Creates an EBS volume in a specified Availability Zone. Parameters: AvailabilityZone (string) - Required. Encrypted (boolean) - Indicates if volume should be encrypted. Iops (integer) - I/O operations per second. KmsKeyId (string) - Identifier of the KMS key for EBS encryption. OutpostArn (string) - ARN of the Outpost. Size (integer) - Size of the volume, in GiBs. SnapshotId (string) - Snapshot from which to create the volume. VolumeType (string) - The volume type. DryRun (boolean) - Checks permissions without making request. TagSpecifications (list) - Tags to apply to the volume. MultiAttachEnabled (boolean) - Enable Amazon EBS Multi-Attach. Throughput (integer) - Throughput to provision for a volume. ClientToken (string) - Ensures idempotency. Returns: dict with volume details including Attachments, AvailabilityZone, CreateTime, Encrypted, KmsKeyId, OutpostArn, Size, SnapshotId, State, VolumeId, Iops, Tags, VolumeType, FastRestored, MultiAttachEnabled, Throughput, and SseType."
    },
    "ec2.client.create_vpc": {
        "new_func": "ec2.client.create_vpc",
        "description": "Creates a VPC with a specified CIDR block. Parameters: CidrBlock (string) - Required. IPv4 CIDR block for the VPC. AmazonProvidedIpv6CidrBlock (boolean) - Request an Amazon-provided IPv6 CIDR block. Ipv6Pool (string) - ID of an IPv6 address pool. Ipv4IpamPoolId (string) - ID of an IPv4 IPAM pool for allocating VPC's CIDR. DryRun (boolean) - Checks permissions without making request. InstanceTenancy (string) - Tenancy options for instances launched into the VPC. TagSpecifications (list) - Tags to assign to the VPC. Returns: dict with VPC details including CidrBlock, DhcpOptionsId, State, VpcId, OwnerId, InstanceTenancy, Ipv6CidrBlockAssociationSet, CidrBlockAssociationSet, IsDefault, and Tags."
    },
    "ec2.client.create_vpc_endpoint": {
        "new_func": "ec2.client.create_vpc_endpoint",
        "description": "Creates a VPC endpoint for a specified service. Parameters: DryRun (boolean) - Checks permissions without making request. VpcEndpointType (string) - Type of endpoint. VpcId (string) - Required. ID of the VPC. ServiceName (string) - Required. Name of the service. PolicyDocument (string) - Policy to control access to the service. RouteTableIds (list) - Route table IDs for gateway endpoint. SubnetIds (list) - Subnet IDs for the endpoint network interfaces. SecurityGroupIds (list) - Security group IDs for the endpoint network interfaces. IpAddressType (string) - IP address type for the endpoint. DnsOptions (dict) - DNS options for the endpoint. ClientToken (string) - Ensures idempotency. PrivateDnsEnabled (boolean) - Associate a private hosted zone with the specified VPC. TagSpecifications (list) - Tags to associate with the endpoint. SubnetConfigurations (list) - Subnet configurations for the endpoint. Returns: dict with VpcEndpoint details including VpcEndpointId, VpcEndpointType, VpcId, ServiceName, State, PolicyDocument, RouteTableIds, SubnetIds, Groups, IpAddressType, DnsOptions, PrivateDnsEnabled, RequesterManaged, NetworkInterfaceIds, DnsEntries, CreationTimestamp, Tags, OwnerId, LastError, and ClientToken."
    },
    "ec2.client.create_vpc_endpoint_connection_notification": {
        "new_func": "ec2.client.create_vpc_endpoint_connection_notification",
        "description": "Creates a connection notification for a VPC endpoint or service. Parameters: DryRun (boolean) - Checks permissions without making request. ServiceId (string) - ID of the endpoint service. VpcEndpointId (string) - ID of the endpoint. ConnectionNotificationArn (string) - Required. ARN of the SNS topic for notifications. ConnectionEvents (list) - Required. Endpoint events for notifications. ClientToken (string) - Ensures idempotency. Returns: dict with ConnectionNotification details including ConnectionNotificationId, ServiceId, VpcEndpointId, ConnectionNotificationType, ConnectionNotificationArn, ConnectionEvents, and ConnectionNotificationState."
    },
    "ec2.client.create_vpc_endpoint_service_configuration": {
        "new_func": "ec2.client.create_vpc_endpoint_service_configuration",
        "description": "Creates a VPC endpoint service configuration. Parameters: DryRun (boolean) - Checks permissions without making request. AcceptanceRequired (boolean) - Manual acceptance required for service consumer requests. PrivateDnsName (string) - Private DNS name for the VPC endpoint service. NetworkLoadBalancerArns (list) - ARNs of Network Load Balancers. GatewayLoadBalancerArns (list) - ARNs of Gateway Load Balancers. SupportedIpAddressTypes (list) - Supported IP address types. ClientToken (string) - Ensures idempotency. TagSpecifications (list) - Tags to associate with the service. Returns: dict with ServiceConfiguration details including ServiceType, ServiceId, ServiceName, ServiceState, AvailabilityZones, AcceptanceRequired, ManagesVpcEndpoints, NetworkLoadBalancerArns, GatewayLoadBalancerArns, SupportedIpAddressTypes, BaseEndpointDnsNames, PrivateDnsName, PrivateDnsNameConfiguration, PayerResponsibility, and Tags."
    },
    "ec2.client.create_vpc_peering_connection": {
        "new_func": "ec2.client.create_vpc_peering_connection",
        "description": "Requests a VPC peering connection between two VPCs. Parameters: DryRun (boolean) - Checks permissions without the request. PeerOwnerId (string) - AWS account ID of the owner of the accepter VPC. PeerVpcId (string) - ID of the accepter VPC. VpcId (string) - ID of the requester VPC. PeerRegion (string) - Region of the accepter VPC. TagSpecifications (list) - Tags for the peering connection. Returns: dict with details of the VPC peering connection including AccepterVpcInfo, RequesterVpcInfo, Status, and VpcPeeringConnectionId."
    },
    "ec2.client.create_vpn_connection": {
        "new_func": "ec2.client.create_vpn_connection",
        "description": "Creates a VPN connection between an existing virtual private gateway or transit gateway and a customer gateway. Parameters: CustomerGatewayId (string) - ID of the customer gateway. Type (string) - Type of VPN connection (ipsec.1). VpnGatewayId (string) - ID of the virtual private gateway. TransitGatewayId (string) - ID of the transit gateway. DryRun (boolean) - Checks permissions without the request. Options (dict) - Various options for the VPN connection. TagSpecifications (list) - Tags for the VPN connection. Returns: dict with information about the VPN connection including CustomerGatewayConfiguration, CustomerGatewayId, State, Type, VpnConnectionId, VpnGatewayId, TransitGatewayId, Options, Routes, Tags, and VgwTelemetry."
    },
    "ec2.client.create_vpn_connection_route": {
        "new_func": "ec2.client.create_vpn_connection_route",
        "description": "Creates a static route for a VPN connection. Parameters: DestinationCidrBlock (string) - CIDR block for the local subnet. VpnConnectionId (string) - ID of the VPN connection. Returns: None."
    },
    "ec2.client.create_vpn_gateway": {
        "new_func": "ec2.client.create_vpn_gateway",
        "description": "Creates a virtual private gateway for VPN connection. Parameters: AvailabilityZone (string) - Availability Zone for the virtual private gateway. Type (string) - Type of VPN connection supported. TagSpecifications (list) - Tags for the virtual private gateway. AmazonSideAsn (integer) - ASN for the Amazon side of a BGP session. DryRun (boolean) - Checks permissions without the request. Returns: dict with information about the virtual private gateway including AvailabilityZone, State, Type, VpcAttachments, VpnGatewayId, AmazonSideAsn, and Tags."
    },
    "ec2.client.delete_carrier_gateway": {
        "new_func": "ec2.client.delete_carrier_gateway",
        "description": "Deletes a carrier gateway. Parameters: CarrierGatewayId (string) - ID of the carrier gateway. DryRun (boolean) - Checks permissions without the request. Returns: dict with information about the deleted carrier gateway including CarrierGatewayId, VpcId, State, OwnerId, and Tags."
    },
    "ec2.client.delete_client_vpn_endpoint": {
        "new_func": "ec2.client.delete_client_vpn_endpoint",
        "description": "Deletes a Client VPN endpoint. Parameters: ClientVpnEndpointId (string) - Required. The ID of the Client VPN to delete. DryRun (boolean) - Checks permissions without making the request. Returns: dict with Status containing Code and Message regarding the state of the VPN endpoint."
    },
    "ec2.client.delete_client_vpn_route": {
        "new_func": "ec2.client.delete_client_vpn_route",
        "description": "Deletes a route from a Client VPN endpoint. Parameters: ClientVpnEndpointId (string) - Required. The ID of the Client VPN endpoint. TargetVpcSubnetId (string) - The ID of the target subnet. DestinationCidrBlock (string) - Required. The IPv4 CIDR of the route. DryRun (boolean) - Checks permissions without making the request. Returns: dict with Status containing Code and Message regarding the state of the VPN route."
    },
    "ec2.client.delete_coip_cidr": {
        "new_func": "ec2.client.delete_coip_cidr",
        "description": "Deletes a customer-owned IP range. Parameters: Cidr (string) - Required. The IP range to delete. CoipPoolId (string) - Required. The ID of the customer-owned address pool. DryRun (boolean) - Checks permissions without making the request. Returns: dict with CoipCidr containing details about the deleted IP range."
    },
    "ec2.client.delete_coip_pool": {
        "new_func": "ec2.client.delete_coip_pool",
        "description": "Deletes a pool of customer-owned IP addresses. Parameters: CoipPoolId (string) - Required. The ID of the CoIP pool to delete. DryRun (boolean) - Checks permissions without making the request. Returns: dict with CoipPool containing details such as PoolId, PoolCidrs, LocalGatewayRouteTableId, Tags, and PoolArn."
    },
    "ec2.client.delete_customer_gateway": {
        "new_func": "ec2.client.delete_customer_gateway",
        "description": "Deletes a specified customer gateway. Parameters: CustomerGatewayId (string) - Required. The ID of the customer gateway. DryRun (boolean) - Checks permissions without making the request. Returns: None."
    },
    "ec2.client.delete_dhcp_options": {
        "new_func": "ec2.client.delete_dhcp_options",
        "description": "Deletes a specified set of DHCP options. Parameters: DhcpOptionsId (string) - Required. ID of the DHCP options set. DryRun (boolean) - Checks permissions without making the request. Returns: None."
    },
    "ec2.client.delete_egress_only_internet_gateway": {
        "new_func": "ec2.client.delete_egress_only_internet_gateway",
        "description": "Deletes an egress-only internet gateway. Parameters: EgressOnlyInternetGatewayId (string) - Required. ID of the gateway. DryRun (boolean) - Checks permissions without making the request. Returns: dict with ReturnCode (boolean) indicating success or failure."
    },
    "ec2.client.delete_fleets": {
        "new_func": "ec2.client.delete_fleets",
        "description": "Deletes specified EC2 Fleets. Parameters: FleetIds (list) - Required. IDs of the EC2 Fleets. TerminateInstances (boolean) - Required. Indicates whether to terminate instances when the fleet is deleted. DryRun (boolean) - Checks permissions without making the request. Returns: dict with lists of SuccessfulFleetDeletions and UnsuccessfulFleetDeletions, each containing fleet details and states."
    },
    "ec2.client.delete_flow_logs": {
        "new_func": "ec2.client.delete_flow_logs",
        "description": "Deletes one or more flow logs. Parameters: FlowLogIds (list) - Required. Flow log IDs with a maximum of 1000. DryRun (boolean) - Checks permissions without making the request. Returns: dict with Unsuccessful list containing information about flow logs that could not be deleted."
    },
    "ec2.client.delete_fpga_image": {
        "new_func": "ec2.client.delete_fpga_image",
        "description": "Deletes a specified Amazon FPGA Image (AFI). Parameters: FpgaImageId (string) - Required. ID of the AFI. DryRun (boolean) - Checks permissions without making the request. Returns: dict with Return (boolean) indicating success or error."
    },
    "ec2.client.delete_instance_connect_endpoint": {
        "new_func": "ec2.client.delete_instance_connect_endpoint",
        "description": "Deletes an EC2 Instance Connect Endpoint. Parameters: DryRun (boolean) - Check permissions without making the request. InstanceConnectEndpointId (string) - Required. The ID of the endpoint to delete. Returns: dict containing information about the deleted endpoint with details like OwnerId, InstanceConnectEndpointArn, State, DnsName, NetworkInterfaceIds, and related attributes."
    },
    "ec2.client.delete_instance_event_window": {
        "new_func": "ec2.client.delete_instance_event_window",
        "description": "Deletes a specified event window. Parameters: DryRun (boolean) - Check permissions without making the request. ForceDelete (boolean) - Force the deletion of the event window if associated with targets. InstanceEventWindowId (string) - Required. The ID of the event window. Returns: dict with the state of the deleted event window, including InstanceEventWindowId and State."
    },
    "ec2.client.delete_internet_gateway": {
        "new_func": "ec2.client.delete_internet_gateway",
        "description": "Deletes an internet gateway. Parameters: DryRun (boolean) - Check permissions without making the request. InternetGatewayId (string) - Required. The ID of the internet gateway to delete. Returns: None."
    },
    "ec2.client.delete_ipam": {
        "new_func": "ec2.client.delete_ipam",
        "description": "Deletes an IPAM and its monitored data. Parameters: DryRun (boolean) - Check permissions without making the request. IpamId (string) - Required. The ID of the IPAM to delete. Cascade (boolean) - Deletes IPAM along with all associated resources. Returns: dict with information about the deleted IPAM, including OwnerId, IpamId, IpamArn, State, and related attributes."
    },
    "ec2.client.delete_ipam_pool": {
        "new_func": "ec2.client.delete_ipam_pool",
        "description": "Deletes an IPAM pool. Parameters: DryRun (boolean) - Check permissions without making the request. IpamPoolId (string) - Required. The ID of the pool to delete. Cascade (boolean) - Deletes the pool along with all resources within that pool. Returns: dict with information about the deleted IPAM pool, including OwnerId, IpamPoolId, IpamPoolArn, State, and related attributes."
    },
    "ec2.client.delete_ipam_resource_discovery": {
        "new_func": "ec2.client.delete_ipam_resource_discovery",
        "description": "Deletes an IPAM resource discovery. Parameters: DryRun (boolean) - Checks permissions without making the request. IpamResourceDiscoveryId (string) - Required. The ID of the IPAM resource discovery. Returns: dict with details of the deleted IPAM resource discovery, including OwnerId, IpamResourceDiscoveryId, IpamResourceDiscoveryArn, IpamResourceDiscoveryRegion, Description, OperatingRegions, IsDefault, State, and Tags."
    },
    "ec2.client.delete_ipam_scope": {
        "new_func": "ec2.client.delete_ipam_scope",
        "description": "Deletes an IPAM scope, except for default scopes. Parameters: DryRun (boolean) - Checks permissions without making the request. IpamScopeId (string) - Required. The ID of the scope to delete. Returns: dict with information about the deleted IPAM scope, including OwnerId, IpamScopeId, IpamScopeArn, IpamArn, IpamRegion, IpamScopeType, IsDefault, Description, PoolCount, State, and Tags."
    },
    "ec2.client.delete_key_pair": {
        "new_func": "ec2.client.delete_key_pair",
        "description": "Deletes a specified key pair by removing the public key from Amazon EC2. Parameters: KeyName (string) - The name of the key pair. KeyPairId (string) - The ID of the key pair. DryRun (boolean) - Checks permissions without making the request. Returns: dict indicating success or failure of the deletion, including Return and KeyPairId."
    },
    "ec2.client.delete_launch_template": {
        "new_func": "ec2.client.delete_launch_template",
        "description": "Deletes a launch template and all of its versions. Parameters: DryRun (boolean) - Checks permissions without making the request. LaunchTemplateId (string) - The ID of the launch template. LaunchTemplateName (string) - The name of the launch template. Returns: dict with information about the deleted launch template, including LaunchTemplateId, LaunchTemplateName, CreateTime, CreatedBy, DefaultVersionNumber, LatestVersionNumber, and Tags."
    },
    "ec2.client.delete_launch_template_versions": {
        "new_func": "ec2.client.delete_launch_template_versions",
        "description": "Deletes one or more versions of a launch template. Parameters: DryRun (boolean) - Checks permissions without making the request. LaunchTemplateId (string) - The ID of the launch template. LaunchTemplateName (string) - The name of the launch template. Versions (list of strings) - Required. The version numbers to delete. Returns: dict with lists of successfully and unsuccessfully deleted launch template versions, including LaunchTemplateId, LaunchTemplateName, VersionNumber, and ResponseError."
    },
    "ec2.client.delete_local_gateway_route": {
        "new_func": "ec2.client.delete_local_gateway_route",
        "description": "Deletes a specified route from a local gateway route table. Parameters: DestinationCidrBlock (string) - CIDR range for the route. LocalGatewayRouteTableId (string) - Required. ID of the local gateway route table. DryRun (boolean) - Checks permissions without making the request. DestinationPrefixListId (string) - Prefix list ID as alternative to DestinationCidrBlock. Returns: dict with 'Route' details, including DestinationCidrBlock, LocalGatewayVirtualInterfaceGroupId, Type, State, LocalGatewayRouteTableId, LocalGatewayRouteTableArn, OwnerId, SubnetId, CoipPoolId, NetworkInterfaceId, and DestinationPrefixListId."
    },
    "ec2.client.delete_local_gateway_route_table": {
        "new_func": "ec2.client.delete_local_gateway_route_table",
        "description": "Deletes a local gateway route table. Parameters: LocalGatewayRouteTableId (string) - Required. ID of the local gateway route table. DryRun (boolean) - Checks permissions without making the request. Returns: dict with 'LocalGatewayRouteTable' details, including LocalGatewayRouteTableId, LocalGatewayRouteTableArn, LocalGatewayId, OutpostArn, OwnerId, State, Tags, Mode, and StateReason."
    },
    "ec2.client.delete_local_gateway_route_table_virtual_interface_group_association": {
        "new_func": "ec2.client.delete_local_gateway_route_table_virtual_interface_group_association",
        "description": "Deletes a local gateway route table virtual interface group association. Parameters: LocalGatewayRouteTableVirtualInterfaceGroupAssociationId (string) - Required. ID of the association. DryRun (boolean) - Checks permissions without making the request. Returns: dict with 'LocalGatewayRouteTableVirtualInterfaceGroupAssociation' details, including LocalGatewayRouteTableVirtualInterfaceGroupAssociationId, LocalGatewayVirtualInterfaceGroupId, LocalGatewayId, LocalGatewayRouteTableId, LocalGatewayRouteTableArn, OwnerId, State, and Tags."
    },
    "ec2.client.delete_local_gateway_route_table_vpc_association": {
        "new_func": "ec2.client.delete_local_gateway_route_table_vpc_association",
        "description": "Deletes an association between a VPC and local gateway route table. Parameters: LocalGatewayRouteTableVpcAssociationId (string) - Required. ID of the association. DryRun (boolean) - Checks permissions without making the request. Returns: dict with 'LocalGatewayRouteTableVpcAssociation' details, including LocalGatewayRouteTableVpcAssociationId, LocalGatewayRouteTableId, LocalGatewayRouteTableArn, LocalGatewayId, VpcId, OwnerId, State, and Tags."
    },
    "ec2.client.delete_managed_prefix_list": {
        "new_func": "ec2.client.delete_managed_prefix_list",
        "description": "Deletes a specified managed prefix list after removing all references to it. Parameters: DryRun (boolean) - Checks permissions without making the request. PrefixListId (string) - Required. ID of the prefix list. Returns: dict with 'PrefixList' details, including PrefixListId, AddressFamily, State, StateMessage, PrefixListArn, PrefixListName, MaxEntries, Version, Tags, and OwnerId."
    },
    "ec2.client.delete_nat_gateway": {
        "new_func": "ec2.client.delete_nat_gateway",
        "description": "Deletes a specified NAT gateway. Parameters: DryRun (boolean) - Checks permissions without making the request. NatGatewayId (string) - Required. ID of the NAT gateway to delete. Returns: dict with 'NatGatewayId'."
    },
    "ec2.client.delete_network_acl": {
        "new_func": "ec2.client.delete_network_acl",
        "description": "Deletes a specified network ACL. Cannot delete if associated with subnets or is the default ACL. Parameters: DryRun (boolean) - Checks permissions without making the request. NetworkAclId (string) - Required. ID of the network ACL to delete. Returns: None."
    },
    "ec2.client.delete_network_acl_entry": {
        "new_func": "ec2.client.delete_network_acl_entry",
        "description": "Deletes a specified ingress or egress entry from a network ACL. Parameters: DryRun (boolean) - Checks permissions without making the request. Egress (boolean) - Required. Indicates if the rule is egress. NetworkAclId (string) - Required. ID of the network ACL. RuleNumber (integer) - Required. Number of the entry to delete. Returns: None."
    },
    "ec2.client.delete_network_insights_access_scope": {
        "new_func": "ec2.client.delete_network_insights_access_scope",
        "description": "Deletes a specified Network Access Scope. Parameters: DryRun (boolean) - Checks permissions without making the request. NetworkInsightsAccessScopeId (string) - Required. ID of the Network Access Scope to delete. Returns: dict with 'NetworkInsightsAccessScopeId'."
    },
    "ec2.client.delete_network_insights_access_scope_analysis": {
        "new_func": "ec2.client.delete_network_insights_access_scope_analysis",
        "description": "Deletes a specified Network Access Scope analysis. Parameters: NetworkInsightsAccessScopeAnalysisId (string) - Required. ID of the analysis to delete. DryRun (boolean) - Checks permissions without making the request. Returns: dict with 'NetworkInsightsAccessScopeAnalysisId'."
    },
    "ec2.client.delete_network_insights_analysis": {
        "new_func": "ec2.client.delete_network_insights_analysis",
        "description": "Deletes a specified network insights analysis. Parameters: DryRun (boolean) - Checks permissions without making request. NetworkInsightsAnalysisId (string) - Required. The ID of the analysis. Returns: dict with 'NetworkInsightsAnalysisId'."
    },
    "ec2.client.delete_network_insights_path": {
        "new_func": "ec2.client.delete_network_insights_path",
        "description": "Deletes a specified network insights path. Parameters: DryRun (boolean) - Checks permissions without making request. NetworkInsightsPathId (string) - Required. The ID of the path. Returns: dict with 'NetworkInsightsPathId'."
    },
    "ec2.client.delete_network_interface": {
        "new_func": "ec2.client.delete_network_interface",
        "description": "Deletes a specified network interface, which must be detached before deletion. Parameters: DryRun (boolean) - Checks permissions without making request. NetworkInterfaceId (string) - Required. The ID of the network interface. Returns: None."
    },
    "ec2.client.delete_network_interface_permission": {
        "new_func": "ec2.client.delete_network_interface_permission",
        "description": "Deletes a permission for a network interface, with an option to force delete. Parameters: NetworkInterfacePermissionId (string) - Required. The ID of the permission. Force (boolean) - Force delete despite any attachment. DryRun (boolean) - Checks permissions without making request. Returns: dict with a 'Return' boolean indicating success."
    },
    "ec2.client.delete_placement_group": {
        "new_func": "ec2.client.delete_placement_group",
        "description": "Deletes a specified placement group, which requires all instances to be terminated first. Parameters: DryRun (boolean) - Checks permissions without making request. GroupName (string) - Required. The name of the placement group. Returns: None."
    },
    "ec2.client.delete_public_ipv4_pool": {
        "new_func": "ec2.client.delete_public_ipv4_pool",
        "description": "Deletes a public IPv4 pool. Parameters: DryRun (boolean) - Checks permissions without making the request. PoolId (string) - Required. The ID of the IPv4 pool to delete. Returns: dict with ReturnValue (boolean) indicating the result of the deletion."
    },
    "ec2.client.delete_queued_reserved_instances": {
        "new_func": "ec2.client.delete_queued_reserved_instances",
        "description": "Deletes queued purchases for specified Reserved Instances. Parameters: DryRun (boolean) - Checks permissions without making the request. ReservedInstancesIds (list) - Required. IDs of the Reserved Instances. Returns: dict with lists of SuccessfulQueuedPurchaseDeletions and FailedQueuedPurchaseDeletions, each containing ReservedInstancesId and an Error dict if applicable."
    },
    "ec2.client.delete_route": {
        "new_func": "ec2.client.delete_route",
        "description": "Deletes a specified route from a route table. Parameters: DestinationCidrBlock (string) - IPv4 CIDR for the route. DestinationIpv6CidrBlock (string) - IPv6 CIDR for the route. DestinationPrefixListId (string) - ID of the prefix list for the route. DryRun (boolean) - Checks permissions without making the request. RouteTableId (string) - Required. ID of the route table. Returns: None."
    },
    "ec2.client.delete_route_table": {
        "new_func": "ec2.client.delete_route_table",
        "description": "Deletes a specified route table. Must be disassociated from any subnets before deletion. Cannot delete the main route table. Parameters: DryRun (boolean) - Checks permissions without making the request. RouteTableId (string) - Required. ID of the route table to delete. Returns: None."
    },
    "ec2.client.delete_security_group": {
        "new_func": "ec2.client.delete_security_group",
        "description": "Deletes a security group. Operation fails if associated with an instance, network interface, or referenced by another security group. Parameters: GroupId (string) - ID of the security group. GroupName (string) - [Default VPC] Name of the security group. DryRun (boolean) - Checks permissions without making the request. Returns: None."
    },
    "ec2.client.delete_snapshot": {
        "new_func": "ec2.client.delete_snapshot",
        "description": "Deletes a specified EBS snapshot. Parameters: SnapshotId (string) - Required. The ID of the EBS snapshot. DryRun (boolean) - Checks permissions without making the request. Returns: None."
    },
    "ec2.client.delete_spot_datafeed_subscription": {
        "new_func": "ec2.client.delete_spot_datafeed_subscription",
        "description": "Deletes the data feed for Spot Instances. Parameters: DryRun (boolean) - Checks permissions without making the request. Returns: None."
    },
    "ec2.client.delete_subnet": {
        "new_func": "ec2.client.delete_subnet",
        "description": "Deletes the specified subnet; all running instances in the subnet must be terminated prior to deletion. Parameters: SubnetId (string) - Required. The ID of the subnet. DryRun (boolean) - Checks permissions without making the request. Returns: None."
    },
    "ec2.client.delete_subnet_cidr_reservation": {
        "new_func": "ec2.client.delete_subnet_cidr_reservation",
        "description": "Deletes a subnet CIDR reservation. Parameters: SubnetCidrReservationId (string) - Required. The ID of the subnet CIDR reservation. DryRun (boolean) - Checks permissions without making the request. Returns: dict with details of the deleted subnet CIDR reservation, including SubnetCidrReservationId, SubnetId, Cidr, ReservationType, OwnerId, Description, and Tags."
    },
    "ec2.client.delete_tags": {
        "new_func": "ec2.client.delete_tags",
        "description": "Deletes the specified set of tags from the specified set of resources. Parameters: DryRun (boolean) - Checks permissions without making the request. Resources (list) - Required. The IDs of the resources. Tags (list) - The tags to delete. Returns: None."
    },
    "ec2.client.delete_traffic_mirror_filter": {
        "new_func": "ec2.client.delete_traffic_mirror_filter",
        "description": "Deletes a specified Traffic Mirror filter. Parameters: TrafficMirrorFilterId (string) - Required. The ID of the Traffic Mirror filter. DryRun (boolean) - Checks required permissions without making the request. Returns: dict with TrafficMirrorFilterId."
    },
    "ec2.client.delete_traffic_mirror_filter_rule": {
        "new_func": "ec2.client.delete_traffic_mirror_filter_rule",
        "description": "Deletes a specified Traffic Mirror rule. Parameters: TrafficMirrorFilterRuleId (string) - Required. The ID of the Traffic Mirror rule. DryRun (boolean) - Checks required permissions without making the request. Returns: dict with TrafficMirrorFilterRuleId."
    },
    "ec2.client.delete_traffic_mirror_session": {
        "new_func": "ec2.client.delete_traffic_mirror_session",
        "description": "Deletes a specified Traffic Mirror session. Parameters: TrafficMirrorSessionId (string) - Required. The ID of the Traffic Mirror session. DryRun (boolean) - Checks required permissions without making the request. Returns: dict with TrafficMirrorSessionId."
    },
    "ec2.client.delete_traffic_mirror_target": {
        "new_func": "ec2.client.delete_traffic_mirror_target",
        "description": "Deletes a specified Traffic Mirror target. Parameters: TrafficMirrorTargetId (string) - Required. The ID of the Traffic Mirror target. DryRun (boolean) - Checks required permissions without making the request. Returns: dict with TrafficMirrorTargetId."
    },
    "ec2.client.delete_transit_gateway": {
        "new_func": "ec2.client.delete_transit_gateway",
        "description": "Deletes a specified transit gateway. Parameters: TransitGatewayId (string) - Required. The ID of the transit gateway. DryRun (boolean) - Checks required permissions without making the request. Returns: dict with information about the deleted transit gateway, including TransitGatewayId, TransitGatewayArn, State, OwnerId, Description, CreationTime, Options, and Tags."
    },
    "ec2.client.delete_transit_gateway_connect": {
        "new_func": "ec2.client.delete_transit_gateway_connect",
        "description": "Deletes a Connect attachment. Parameters: TransitGatewayAttachmentId (string) - Required. The ID of the Connect attachment. DryRun (boolean) - Checks permissions without making the request. Returns: dict with details about the deleted Connect attachment, including TransitGatewayAttachmentId, State, CreationTime, Options, and Tags."
    },
    "ec2.client.delete_transit_gateway_connect_peer": {
        "new_func": "ec2.client.delete_transit_gateway_connect_peer",
        "description": "Deletes a specified Connect peer. Parameters: TransitGatewayConnectPeerId (string) - Required. The ID of the Connect peer. DryRun (boolean) - Checks permissions without making the request. Returns: dict with information about the deleted Connect peer, including TransitGatewayAttachmentId, TransitGatewayConnectPeerId, State, CreationTime, ConnectPeerConfiguration, and Tags."
    },
    "ec2.client.delete_transit_gateway_multicast_domain": {
        "new_func": "ec2.client.delete_transit_gateway_multicast_domain",
        "description": "Deletes a transit gateway multicast domain. Parameters: TransitGatewayMulticastDomainId (string) - Required. The ID of the multicast domain. DryRun (boolean) - Checks permissions without making the request. Returns: dict with information about the deleted multicast domain, including TransitGatewayMulticastDomainId, State, CreationTime, Options, and Tags."
    },
    "ec2.client.delete_transit_gateway_peering_attachment": {
        "new_func": "ec2.client.delete_transit_gateway_peering_attachment",
        "description": "Deletes a transit gateway peering attachment. Parameters: TransitGatewayAttachmentId (string) - Required. The ID of the peering attachment. DryRun (boolean) - Checks permissions without making the request. Returns: dict with information about the deleted peering attachment, including TransitGatewayAttachmentId, AccepterTransitGatewayAttachmentId, RequesterTgwInfo, AccepterTgwInfo, Options, Status, State, CreationTime, and Tags."
    },
    "ec2.client.delete_transit_gateway_policy_table": {
        "new_func": "ec2.client.delete_transit_gateway_policy_table",
        "description": "Deletes a transit gateway policy table. Parameters: TransitGatewayPolicyTableId (string) - Required. The ID of the policy table. DryRun (boolean) - Checks permissions without making the request. Returns: dict with details about the deleted policy table, including TransitGatewayPolicyTableId, State, CreationTime, and Tags."
    },
    "ec2.client.delete_transit_gateway_prefix_list_reference": {
        "new_func": "ec2.client.delete_transit_gateway_prefix_list_reference",
        "description": "Deletes a prefix list reference in a transit gateway route table. Parameters: TransitGatewayRouteTableId (string) - Required. The route table ID. PrefixListId (string) - Required. The prefix list ID. DryRun (boolean) - Checks permissions without making the request. Returns: dict with information about the deleted prefix list reference including TransitGatewayRouteTableId, PrefixListId, PrefixListOwnerId, State, Blackhole, and TransitGatewayAttachment details."
    },
    "ec2.client.delete_transit_gateway_route": {
        "new_func": "ec2.client.delete_transit_gateway_route",
        "description": "Deletes a route from a transit gateway route table. Parameters: TransitGatewayRouteTableId (string) - Required. The route table ID. DestinationCidrBlock (string) - Required. The CIDR range for the route. DryRun (boolean) - Checks permissions without making the request. Returns: dict with information about the deleted route including DestinationCidrBlock, PrefixListId, TransitGatewayRouteTableAnnouncementId, Type, State, and TransitGatewayAttachments details."
    },
    "ec2.client.delete_transit_gateway_route_table": {
        "new_func": "ec2.client.delete_transit_gateway_route_table",
        "description": "Deletes a transit gateway route table. Parameters: TransitGatewayRouteTableId (string) - Required. The route table ID. DryRun (boolean) - Checks permissions without making the request. Returns: dict with information about the deleted transit gateway route table including TransitGatewayRouteTableId, TransitGatewayId, State, DefaultAssociationRouteTable, DefaultPropagationRouteTable, CreationTime, and Tags."
    },
    "ec2.client.delete_transit_gateway_route_table_announcement": {
        "new_func": "ec2.client.delete_transit_gateway_route_table_announcement",
        "description": "Announces the deletion of a transit gateway route table. Parameters: TransitGatewayRouteTableAnnouncementId (string) - Required. The transit gateway route table announcement ID. DryRun (boolean) - Checks permissions without making the request. Returns: dict with details of the deleted announcement including TransitGatewayRouteTableAnnouncementId, TransitGatewayId, CoreNetworkId, PeerTransitGatewayId, PeerCoreNetworkId, PeeringAttachmentId, AnnouncementDirection, State, CreationTime, and Tags."
    },
    "ec2.client.delete_transit_gateway_vpc_attachment": {
        "new_func": "ec2.client.delete_transit_gateway_vpc_attachment",
        "description": "Deletes a VPC attachment from a transit gateway. Parameters: TransitGatewayAttachmentId (string) - Required. The attachment ID. DryRun (boolean) - Checks permissions without making the request. Returns: dict with information about the deleted VPC attachment including TransitGatewayAttachmentId, TransitGatewayId, VpcId, VpcOwnerId, State, SubnetIds, CreationTime, Options (with DnsSupport, SecurityGroupReferencingSupport, Ipv6Support, ApplianceModeSupport), and Tags."
    },
    "ec2.client.delete_verified_access_endpoint": {
        "new_func": "ec2.client.delete_verified_access_endpoint",
        "description": "Deletes an AWS Verified Access endpoint. Parameters: VerifiedAccessEndpointId (string) - Required. The ID of the endpoint. ClientToken (string) - Ensures idempotency. DryRun (boolean) - Checks permissions without making the request. Returns: dict with details of the deleted Verified Access endpoint."
    },
    "ec2.client.delete_verified_access_group": {
        "new_func": "ec2.client.delete_verified_access_group",
        "description": "Deletes an AWS Verified Access group. Parameters: VerifiedAccessGroupId (string) - Required. The ID of the group. ClientToken (string) - Ensures idempotency. DryRun (boolean) - Checks permissions without making the request. Returns: dict with details of the deleted Verified Access group."
    },
    "ec2.client.delete_verified_access_instance": {
        "new_func": "ec2.client.delete_verified_access_instance",
        "description": "Deletes an AWS Verified Access instance. Parameters: VerifiedAccessInstanceId (string) - Required. The ID of the instance. DryRun (boolean) - Checks permissions without making the request. ClientToken (string) - Ensures idempotency. Returns: dict with details of the deleted Verified Access instance."
    },
    "ec2.client.delete_verified_access_trust_provider": {
        "new_func": "ec2.client.delete_verified_access_trust_provider",
        "description": "Deletes an AWS Verified Access trust provider. Parameters: VerifiedAccessTrustProviderId (string) - Required. The ID of the trust provider. DryRun (boolean) - Checks permissions without making the request. ClientToken (string) - Ensures idempotency. Returns: dict with details of the deleted Verified Access trust provider."
    },
    "ec2.client.delete_volume": {
        "new_func": "ec2.client.delete_volume",
        "description": "Deletes the specified EBS volume if it's in the 'available' state. Parameters: VolumeId (string) - Required. The ID of the volume. DryRun (boolean) - Checks permissions without making the request. Returns: None."
    },
    "ec2.client.delete_vpc": {
        "new_func": "ec2.client.delete_vpc",
        "description": "Deletes a specified VPC after detaching or deleting all associated resources. Parameters: VpcId (string) - Required. The ID of the VPC to delete. DryRun (boolean) - Checks required permissions without making the request. Returns: None."
    },
    "ec2.client.delete_vpc_endpoint_connection_notifications": {
        "new_func": "ec2.client.delete_vpc_endpoint_connection_notifications",
        "description": "Deletes specified VPC endpoint connection notifications. Parameters: ConnectionNotificationIds (list of strings) - Required. IDs of the notifications. DryRun (boolean) - Checks required permissions without making the request. Returns: dict with 'Unsuccessful' key containing information about notifications that could not be deleted."
    },
    "ec2.client.delete_vpc_endpoint_service_configurations": {
        "new_func": "ec2.client.delete_vpc_endpoint_service_configurations",
        "description": "Deletes specified VPC endpoint service configurations after rejecting any connections. Parameters: ServiceIds (list of strings) - Required. The IDs of the services. DryRun (boolean) - Checks required permissions without making the request. Returns: dict with 'Unsuccessful' key containing information about service configurations that were not deleted."
    },
    "ec2.client.delete_vpc_endpoints": {
        "new_func": "ec2.client.delete_vpc_endpoints",
        "description": "Deletes specified VPC endpoints and associated routes or network interfaces. Parameters: VpcEndpointIds (list of strings) - Required. The IDs of the VPC endpoints. DryRun (boolean) - Checks required permissions without making the request. Returns: dict with 'Unsuccessful' key containing information about VPC endpoints that were not successfully deleted."
    },
    "ec2.client.delete_vpc_peering_connection": {
        "new_func": "ec2.client.delete_vpc_peering_connection",
        "description": "Deletes a VPC peering connection in active or pending-acceptance state. Parameters: VpcPeeringConnectionId (string) - Required. The ID of the VPC peering connection. DryRun (boolean) - Checks required permissions without making the request. Returns: dict with 'Return' key indicating the success of the deletion."
    },
    "ec2.client.delete_vpn_connection": {
        "new_func": "ec2.client.delete_vpn_connection",
        "description": "Deletes a specified VPN connection. Parameters: VpnConnectionId (string) - Required. The ID of the VPN connection. DryRun (boolean) - Checks permissions without making the request. Returns: None."
    },
    "ec2.client.delete_vpn_connection_route": {
        "new_func": "ec2.client.delete_vpn_connection_route",
        "description": "Deletes a static route associated with a VPN connection. Parameters: DestinationCidrBlock (string) - Required. The CIDR block of the customer network. VpnConnectionId (string) - Required. The ID of the VPN connection. Returns: None."
    },
    "ec2.client.delete_vpn_gateway": {
        "new_func": "ec2.client.delete_vpn_gateway",
        "description": "Deletes a specified virtual private gateway. Parameters: VpnGatewayId (string) - Required. The ID of the virtual private gateway. DryRun (boolean) - Checks permissions without making the request. Returns: None."
    },
    "ec2.client.deprovision_byoip_cidr": {
        "new_func": "ec2.client.deprovision_byoip_cidr",
        "description": "Releases an address range provisioned for BYOIP and deletes the corresponding address pool. Parameters: Cidr (string) - Required. The address range in CIDR notation. DryRun (boolean) - Checks permissions without making the request. Returns: dict with information on the deprovisioned address range including Cidr, Description, AsnAssociations, StatusMessage, State, and NetworkBorderGroup."
    },
    "ec2.client.deprovision_ipam_byoasn": {
        "new_func": "ec2.client.deprovision_ipam_byoasn",
        "description": "Deprovisions an ASN from the AWS account. Parameters: DryRun (boolean) - Checks permissions without making the request. IpamId (string) - Required. The IPAM ID. Asn (string) - Required. The ASN. Returns: dict with information on the deprovisioned ASN including Asn, IpamId, StatusMessage, and State."
    },
    "ec2.client.deprovision_ipam_pool_cidr": {
        "new_func": "ec2.client.deprovision_ipam_pool_cidr",
        "description": "Deprovisions a CIDR from an IPAM pool, optionally returning it to the source pool. Parameters: DryRun (boolean) - Checks permissions without making the request. IpamPoolId (string) - Required. ID of the IPAM pool. Cidr (string) - The CIDR to deprovision. Returns: dict with 'IpamPoolCidr' details including Cidr, State, FailureReason, IpamPoolCidrId, and NetmaskLength."
    },
    "ec2.client.deprovision_public_ipv4_pool_cidr": {
        "new_func": "ec2.client.deprovision_public_ipv4_pool_cidr",
        "description": "Deprovisions a CIDR from a public IPv4 pool. Parameters: DryRun (boolean) - Checks permissions without making the request. PoolId (string) - Required. ID of the IPv4 pool. Cidr (string) - Required. CIDR to deprovision. Returns: dict with 'PoolId' and list of 'DeprovisionedAddresses'."
    },
    "ec2.client.deregister_image": {
        "new_func": "ec2.client.deregister_image",
        "description": "Deregisters an AMI. It won\u2019t affect instances already launched from the AMI. Parameters: ImageId (string) - Required. ID of the AMI. DryRun (boolean) - Checks permissions without making the request. Returns: None."
    },
    "ec2.client.deregister_instance_event_notification_attributes": {
        "new_func": "ec2.client.deregister_instance_event_notification_attributes",
        "description": "Deregisters tag keys from scheduled event notifications for resources. Parameters: DryRun (boolean) - Checks permissions without making the request. InstanceTagAttribute (dict) - Required. Includes IncludeAllTagsOfInstance (boolean) and InstanceTagKeys (list). Returns: dict with 'InstanceTagAttribute' containing 'InstanceTagKeys' and 'IncludeAllTagsOfInstance'."
    },
    "ec2.client.deregister_transit_gateway_multicast_group_members": {
        "new_func": "ec2.client.deregister_transit_gateway_multicast_group_members",
        "description": "Deregisters members from a transit gateway multicast group. Parameters: TransitGatewayMulticastDomainId (string) - ID of the multicast domain. GroupIpAddress (string) - IP address of the multicast group. NetworkInterfaceIds (list) - IDs of the member's network interfaces. DryRun (boolean) - Checks permissions without making the request. Returns: dict with 'DeregisteredMulticastGroupMembers' details including TransitGatewayMulticastDomainId, DeregisteredNetworkInterfaceIds, and GroupIpAddress."
    },
    "ec2.client.deregister_transit_gateway_multicast_group_sources": {
        "new_func": "ec2.client.deregister_transit_gateway_multicast_group_sources",
        "description": "Deregisters sources from a transit gateway multicast group. Parameters: TransitGatewayMulticastDomainId (string) - Required. ID of the multicast domain. GroupIpAddress (string) - Required. IP address of the multicast group. NetworkInterfaceIds (list of strings) - Required. IDs of the source network interfaces. DryRun (boolean) - Optional. Checks permissions without making the request. Returns: dict with 'DeregisteredMulticastGroupSources' containing 'TransitGatewayMulticastDomainId', 'DeregisteredNetworkInterfaceIds', and 'GroupIpAddress'."
    },
    "ec2.client.describe_account_attributes": {
        "new_func": "ec2.client.describe_account_attributes",
        "description": "Describes attributes of your AWS account, such as 'default-vpc', 'max-instances', 'max-elastic-ips', 'vpc-max-elastic-ips', and 'vpc-max-security-groups-per-interface'. Parameters: AttributeNames (list of strings) - Optional. Names of the attributes to describe. DryRun (boolean) - Optional. Checks permissions without making the request. Returns: dict with 'AccountAttributes' containing attribute names and values."
    },
    "ec2.client.describe_address_transfers": {
        "new_func": "ec2.client.describe_address_transfers",
        "description": "Describes Elastic IP address transfers. Parameters: AllocationIds (list of strings) - Optional. Allocation IDs for the Elastic IP addresses to describe. Returns: dict with details about Elastic IP address transfers."
    },
    "ec2.client.describe_addresses": {
        "new_func": "ec2.client.describe_addresses",
        "description": "Describes specified Elastic IP addresses or all Elastic IPs. Parameters: Filters (list of dicts) - Optional. Filters to apply to the request. PublicIps (list of strings) - Optional. Specific Elastic IP addresses to describe. AllocationIds (list of strings) - Optional. Allocation IDs for the Elastic IPs. DryRun (boolean) - Optional. Checks permissions without making the request. Returns: dict with 'Addresses' containing details of each Elastic IP."
    },
    "ec2.client.describe_addresses_attribute": {
        "new_func": "ec2.client.describe_addresses_attribute",
        "description": "Describes the attributes of specified Elastic IP addresses, primarily for reverse DNS. Parameters: AllocationIds (list of strings) - Required. Allocation IDs for the Elastic IPs. Attribute (string) - Required. The attribute to describe, such as 'domain-name'. Returns: dict with attributes of the specified Elastic IP addresses."
    },
    "ec2.client.describe_aggregate_id_format": {
        "new_func": "ec2.client.describe_aggregate_id_format",
        "description": "Describes the ID format settings for all resource types in a Region. Parameters: DryRun (boolean) - Optional permission check. Returns: dict with 'UseLongIdsAggregated' indicating if longer IDs are used and 'Statuses' providing a list of resource types and their ID formats."
    },
    "ec2.client.describe_availability_zones": {
        "new_func": "ec2.client.describe_availability_zones",
        "description": "Describes Availability Zones, Local Zones, and Wavelength Zones available to you. Parameters: Filters (list) - Filters for the results. ZoneNames (list) - Names of zones to describe. ZoneIds (list) - IDs of zones. AllAvailabilityZones (boolean) - Include all zones regardless of opt-in status. DryRun (boolean) - Optional permission check. Returns: dict with 'AvailabilityZones' detailing the zones' state, messages, and attributes."
    },
    "ec2.client.describe_aws_network_performance_metric_subscriptions": {
        "new_func": "ec2.client.describe_aws_network_performance_metric_subscriptions",
        "description": "Describes current Infrastructure Performance metric subscriptions. Returns: dict with subscription details."
    },
    "ec2.client.describe_bundle_tasks": {
        "new_func": "ec2.client.describe_bundle_tasks",
        "description": "Describes specified bundle tasks or all bundle tasks. Parameters: BundleIds (list) - Bundle task IDs. Filters (list) - Filters for the results. DryRun (boolean) - Optional permission check. Returns: dict with 'BundleTasks' containing details of each task."
    },
    "ec2.client.describe_byoip_cidrs": {
        "new_func": "ec2.client.describe_byoip_cidrs",
        "description": "Describes the IP address ranges specified in ProvisionByoipCidr calls. Parameters: DryRun (boolean) - Optional permission check. MaxResults (integer) - The maximum number of results to return at once. Returns: dict with BYOIP CIDR details."
    },
    "ec2.client.describe_capacity_block_offerings": {
        "new_func": "ec2.client.describe_capacity_block_offerings",
        "description": "Describes Capacity Block offerings for purchase in the current AWS Region. Parameters: DryRun (boolean) - Checks required permissions without making the request. InstanceType (string) - Type of the instance. InstanceCount (integer) - Number of instances. StartDateRange (datetime) - Start date of the capacity block offering. EndDateRange (datetime) - End date of the capacity block offering. CapacityDurationHours (integer) - Duration in hours for the capacity block. Returns: dict with Capacity Block offering details."
    },
    "ec2.client.describe_capacity_reservation_fleets": {
        "new_func": "ec2.client.describe_capacity_reservation_fleets",
        "description": "Describes one or more Capacity Reservation Fleets. Parameters: CapacityReservationFleetIds (list) - List of reservation fleet IDs. Returns: dict with details of the Capacity Reservation Fleets."
    },
    "ec2.client.describe_capacity_reservations": {
        "new_func": "ec2.client.describe_capacity_reservations",
        "description": "Describes one or more of your Capacity Reservations in the current AWS Region. Parameters: CapacityReservationIds (list) - List of reservation IDs. Returns: dict with details of the Capacity Reservations."
    },
    "ec2.client.describe_carrier_gateways": {
        "new_func": "ec2.client.describe_carrier_gateways",
        "description": "Describes one or more of your carrier gateways. Parameters: CarrierGatewayIds (list) - List of carrier gateway IDs. Filters (list) - Filters to apply to the request. MaxResults (integer) - Maximum number of results to return. Returns: dict with details of the carrier gateways."
    },
    "ec2.client.describe_classic_link_instances": {
        "new_func": "ec2.client.describe_classic_link_instances",
        "description": "Describes linked EC2-Classic instances through ClassicLink (Deprecated). Parameters: Filters (list) - Filters to apply to the request. DryRun (boolean) - Checks required permissions without making the request. InstanceIds (list) - List of instance IDs. MaxResults (integer) - Maximum number of results to return. Returns: dict with details of the linked EC2-Classic instances."
    },
    "ec2.client.describe_client_vpn_authorization_rules": {
        "new_func": "ec2.client.describe_client_vpn_authorization_rules",
        "description": "Describes the authorization rules for a Client VPN endpoint. Parameters: ClientVpnEndpointId (string) - Required. The ID of the Client VPN endpoint. DryRun (boolean) - Optional. Checks whether you have the required permissions for the action. Returns: A dict containing authorization rules."
    },
    "ec2.client.describe_client_vpn_connections": {
        "new_func": "ec2.client.describe_client_vpn_connections",
        "description": "Describes active and recently terminated client connections for a Client VPN endpoint. Parameters: ClientVpnEndpointId (string) - Required. ID of the Client VPN endpoint. Filters (list) - Optional. Filters to apply to the results. Returns: A dict with details of the client connections."
    },
    "ec2.client.describe_client_vpn_endpoints": {
        "new_func": "ec2.client.describe_client_vpn_endpoints",
        "description": "Describes one or more Client VPN endpoints in the account. Parameters: ClientVpnEndpointIds (list) - Optional. The IDs of the Client VPN endpoints. MaxResults (integer) - Optional. The maximum number of results to return. Returns: A dict with details of the Client VPN endpoints."
    },
    "ec2.client.describe_client_vpn_routes": {
        "new_func": "ec2.client.describe_client_vpn_routes",
        "description": "Describes the routes for a Client VPN endpoint. Parameters: ClientVpnEndpointId (string) - Required. The ID of the Client VPN endpoint. Filters (list) - Optional. Filters to apply to the results. MaxResults (integer) - Optional. The maximum number of results to return. Returns: A dict with details of the VPN routes."
    },
    "ec2.client.describe_client_vpn_target_networks": {
        "new_func": "ec2.client.describe_client_vpn_target_networks",
        "description": "Describes the target networks associated with a Client VPN endpoint. Parameters: ClientVpnEndpointId (string) - Required. The ID of the Client VPN endpoint. AssociationIds (list) - Optional. The associations for the target networks. MaxResults (integer) - Optional. The maximum number of results to return. Returns: A dict with details of the target networks."
    },
    "ec2.client.describe_coip_pools": {
        "new_func": "ec2.client.describe_coip_pools",
        "description": "Describes specific or all customer-owned address pools. Parameters: PoolIds (list) - List of COIP pool IDs to describe. Filters (list) - Filters to apply to the list. MaxResults (integer) - The total number of results to return. Returns: dict containing customer-owned IP address pools information."
    },
    "ec2.client.describe_conversion_tasks": {
        "new_func": "ec2.client.describe_conversion_tasks",
        "description": "Describes specific or all conversion tasks related to VM import/export. Parameters: ConversionTaskIds (list) - List of conversion task IDs. DryRun (boolean) - Checks permissions without making the request. Returns: dict containing information about the conversion tasks including IDs, expiration time, state, status message, and associated tags."
    },
    "ec2.client.describe_customer_gateways": {
        "new_func": "ec2.client.describe_customer_gateways",
        "description": "Describes one or more of your VPN customer gateways. Parameters: CustomerGatewayIds (list) - List of customer gateway IDs. Filters (list) - Filters to apply. DryRun (boolean) - Checks permissions without making the request. Returns: dict containing information about customer gateways including BGP ASN, IP address, state, type, and tags."
    },
    "ec2.client.describe_dhcp_options": {
        "new_func": "ec2.client.describe_dhcp_options",
        "description": "Describes DHCP option sets. Parameters: DhcpOptionsIds (list) - List of DHCP options set IDs. Filters (list) - Filters to apply to the list. DryRun (boolean) - Checks permissions without making the request. Returns: dict containing DHCP options sets information."
    },
    "ec2.client.describe_egress_only_internet_gateways": {
        "new_func": "ec2.client.describe_egress_only_internet_gateways",
        "description": "Describes egress-only internet gateways. Parameters: EgressOnlyInternetGatewayIds (list) - List of egress-only internet gateway IDs. MaxResults (integer) - The total number of results to return. DryRun (boolean) - Checks permissions without making the request. Returns: dict containing egress-only internet gateways information."
    },
    "ec2.client.describe_elastic_gpus": {
        "new_func": "ec2.client.describe_elastic_gpus",
        "description": "Retrieves information about Elastic Graphics accelerators associated with your instances. Parameters: ElasticGpuIds (list) - IDs of the Elastic GPUs to describe. DryRun (boolean) - Optional. Checks permissions without making the request. Filters (list) - Optional. Filters to apply to the request. MaxResults (integer) - Optional. The maximum number of results to return in a single call. Returns: dict with ElasticGpuSet and MaxResults."
    },
    "ec2.client.describe_export_image_tasks": {
        "new_func": "ec2.client.describe_export_image_tasks",
        "description": "Describes export image tasks, either specified by task IDs or all tasks. Parameters: DryRun (boolean) - Optional. Checks permissions without making the request. Filters (list) - Optional. Filters to apply to the request. ExportImageTaskIds (list) - Optional. IDs of the export image tasks to describe. MaxResults (integer) - Optional. The maximum number of results to return in a single call. Returns: dict with ExportImageTasks and NextToken."
    },
    "ec2.client.describe_export_tasks": {
        "new_func": "ec2.client.describe_export_tasks",
        "description": "Describes specified export instance tasks or all of your export instance tasks. Parameters: ExportTaskIds (list) - Optional. The export task IDs. Filters (list) - Optional. Filters to apply to the request. Returns: dict with ExportTasks containing details such as Description, ExportTaskId, ExportToS3Task, InstanceExportDetails, State, StatusMessage, and Tags."
    },
    "ec2.client.describe_fast_launch_images": {
        "new_func": "ec2.client.describe_fast_launch_images",
        "description": "Describes Windows AMIs configured for fast launch. Parameters: ImageIds (list) - Optional. IDs of the images to describe. Filters (list) - Optional. Filters to apply to the request. MaxResults (integer) - Optional. The maximum number of results to return in a single call. Returns: dict with FastLaunchImagesSet and NextToken."
    },
    "ec2.client.describe_fast_snapshot_restores": {
        "new_func": "ec2.client.describe_fast_snapshot_restores",
        "description": "Describes the state of fast snapshot restores for your snapshots. Parameters: Filters (list) - Optional. Filters to apply to the request. MaxResults (integer) - Optional. The maximum number of results to return in a single call. Returns: dict with FastSnapshotRestores and NextToken."
    },
    "ec2.client.describe_fleet_history": {
        "new_func": "ec2.client.describe_fleet_history",
        "description": "Describes events for a specified EC2 Fleet within a time frame. Parameters: DryRun (boolean) - Optional. EventType (string) - Type of event to describe. MaxResults (integer) - Maximum number of results to return. Returns: dict with fleet event details."
    },
    "ec2.client.describe_fleet_instances": {
        "new_func": "ec2.client.describe_fleet_instances",
        "description": "Describes running instances for a specified EC2 Fleet. Parameters: DryRun (boolean) - Optional. MaxResults (integer) - Maximum number of results to return. Returns: dict with instances details related to the fleet."
    },
    "ec2.client.describe_fleets": {
        "new_func": "ec2.client.describe_fleets",
        "description": "Describes a specified EC2 Fleet or all EC2 Fleets. Parameters: DryRun (boolean) - Optional. MaxResults (integer) - Maximum number of results to return. Returns: dict with details of the described fleets."
    },
    "ec2.client.describe_flow_logs": {
        "new_func": "ec2.client.describe_flow_logs",
        "description": "Describes one or more flow logs. Parameters: DryRun (boolean) - Optional. Filters (list) - Optional filters for results. FlowLogIds (list) - List of flow log IDs. MaxResults (integer) - Maximum number of results to return. Returns: dict with flow logs details."
    },
    "ec2.client.describe_fpga_image_attribute": {
        "new_func": "ec2.client.describe_fpga_image_attribute",
        "description": "Describes a specified attribute of an Amazon FPGA Image (AFI). Parameters: DryRun (boolean) - Optional. FpgaImageId (string) - Required. AFI ID. Attribute (string) - Required. AFI attribute to describe. Returns: dict with the specified AFI attribute details."
    },
    "ec2.client.describe_fpga_images": {
        "new_func": "ec2.client.describe_fpga_images",
        "description": "Retrieves information about available Amazon FPGA Images (AFIs). Parameters: DryRun (boolean) - Check permissions without making the request. FpgaImageIds (list) - AFI identifiers. Owners (list) - AWS account IDs of the AFI owners. Filters (list) - Filters for the AFI search. Returns: dict with information about the AFIs."
    },
    "ec2.client.describe_host_reservation_offerings": {
        "new_func": "ec2.client.describe_host_reservation_offerings",
        "description": "Describes the Dedicated Host reservations available for purchase. Parameters: Filters (list) - Filters for the offerings. MaxDuration (integer) - Maximum duration of reservation in seconds. MinDuration (integer) - Minimum duration of reservation in seconds. MaxResults (integer) - Maximum number of results to return. Returns: dict with detailed information about the reservation offerings."
    },
    "ec2.client.describe_host_reservations": {
        "new_func": "ec2.client.describe_host_reservations",
        "description": "Describes reservations associated with Dedicated Hosts in your account. Parameters: Filters (list) - Filters for reservations. HostReservationIdSet (list) - Reservation identifiers. MaxResults (integer) - Maximum number of results to return. Returns: dict with detailed information about the host reservations."
    },
    "ec2.client.describe_hosts": {
        "new_func": "ec2.client.describe_hosts",
        "description": "Describes specified Dedicated Hosts or all your Dedicated Hosts. Parameters: Filters (list) - Filters for the hosts. HostIds (list) - Dedicated Host identifiers. MaxResults (integer) - Maximum number of results to return. Returns: dict with detailed information about the Dedicated Hosts."
    },
    "ec2.client.describe_iam_instance_profile_associations": {
        "new_func": "ec2.client.describe_iam_instance_profile_associations",
        "description": "Describes IAM instance profile associations. Parameters: AssociationIds (list) - Identifiers for the associations. Filters (list) - Filters for the associations. MaxResults (integer) - Maximum number of results to return. Returns: dict with detailed information about the instance profile associations."
    },
    "ec2.client.describe_id_format": {
        "new_func": "ec2.client.describe_id_format",
        "description": "Describes the ID format settings for resources on a per-Region basis and which resource types are enabled for longer IDs. Parameters: Resource (string) - The type of resource. Returns: dict with 'Statuses' containing 'Deadline', 'Resource', and 'UseLongIds'."
    },
    "ec2.client.describe_identity_id_format": {
        "new_func": "ec2.client.describe_identity_id_format",
        "description": "Describes the ID format settings for resources for a specified IAM user, role, or root user, indicating which resource types are enabled for longer IDs. Parameters: PrincipalArn (string) - Required. ARN of the principal. Resource (string) - The type of resource. Returns: dict with 'Statuses' containing 'Deadline', 'Resource', and 'UseLongIds'."
    },
    "ec2.client.describe_image_attribute": {
        "new_func": "ec2.client.describe_image_attribute",
        "description": "Describes a specific attribute of a specified AMI. Parameters: Attribute (string) - Required. The AMI attribute. ImageId (string) - Required. The ID of the AMI. DryRun (boolean) - Checks permissions without making the request. Returns: dict with attribute details such as 'BlockDeviceMappings', 'ImageId', 'LaunchPermissions', and others."
    },
    "ec2.client.describe_images": {
        "new_func": "ec2.client.describe_images",
        "description": "Describes specified images (AMIs, AKIs, ARIs) available to you or all images available. Parameters: ExecutableUsers (list) - Users with explicit launch permissions. Filters (list) - Filters to apply to the request. ImageIds (list) - IDs of images to describe. Owners (list) - Image owners. IncludeDeprecated (boolean) - Include or exclude deprecated images. IncludeDisabled (boolean) - Include disabled images. DryRun (boolean) - Check permissions without making request. MaxResults (integer) - Maximum number of results to return. Returns: dict with images details."
    },
    "ec2.client.describe_import_image_tasks": {
        "new_func": "ec2.client.describe_import_image_tasks",
        "description": "Displays details about import virtual machine or import snapshot tasks. Parameters: DryRun (boolean) - Checks permissions without making request. Filters (list) - Filters to apply to the request. ImportTaskIds (list) - IDs of import tasks. MaxResults (integer) - Maximum number of results to return. Returns: dict with import image tasks details."
    },
    "ec2.client.describe_import_snapshot_tasks": {
        "new_func": "ec2.client.describe_import_snapshot_tasks",
        "description": "Describes import snapshot tasks. Parameters: DryRun (boolean) - Checks permissions without making the request. Filters (list) - Filters to apply to the results. ImportTaskIds (list) - IDs of the import snapshot tasks. MaxResults (integer) - Max number of results to return. Returns: dict with import snapshot task details."
    },
    "ec2.client.describe_instance_attribute": {
        "new_func": "ec2.client.describe_instance_attribute",
        "description": "Describes a specified attribute of an instance. Parameters: Attribute (string) - Required. The instance attribute to describe. DryRun (boolean) - Checks permissions without making the request. InstanceId (string) - Required. The ID of the instance. Returns: dict with instance attribute values such as Groups, BlockDeviceMappings, DisableApiTermination, etc."
    },
    "ec2.client.describe_instance_connect_endpoints": {
        "new_func": "ec2.client.describe_instance_connect_endpoints",
        "description": "Describes EC2 Instance Connect Endpoints. Parameters: DryRun (boolean) - Checks permissions without making the request. MaxResults (integer) - The maximum number of results to return. Returns: dict with instance connect endpoint details."
    },
    "ec2.client.describe_instance_credit_specifications": {
        "new_func": "ec2.client.describe_instance_credit_specifications",
        "description": "Describes the credit option for CPU usage of specified burstable performance instances. Parameters: DryRun (boolean) - Checks permissions without making the request. Filters (list) - Filters to apply to the results. InstanceIds (list) - IDs of the instances to describe. MaxResults (integer) - Max number of results to return. Returns: dict with instance credit specifications."
    },
    "ec2.client.describe_instance_event_notification_attributes": {
        "new_func": "ec2.client.describe_instance_event_notification_attributes",
        "description": "Describes the tag keys for scheduled event notifications. Parameters: DryRun (boolean) - Checks permissions without making the request. Returns: dict with instance event notification attributes, including InstanceTagAttribute with InstanceTagKeys and IncludeAllTagsOfInstance."
    },
    "ec2.client.describe_instance_event_windows": {
        "new_func": "ec2.client.describe_instance_event_windows",
        "description": "Describes specified or all event windows. Parameters: DryRun (boolean) - Optional. InstanceEventWindowIds (list of strings) - The IDs of the event windows. Filters (list of dicts) - Filters to apply. MaxResults (integer) - The maximum number of results to return in a single call. Returns: dict with information for the described event windows."
    },
    "ec2.client.describe_instance_status": {
        "new_func": "ec2.client.describe_instance_status",
        "description": "Describes the status of specified instances or all instances. Parameters: Filters (list of dicts) - Filters to apply. InstanceIds (list of strings) - The instance IDs. MaxResults (integer) - The maximum number of results to return in a single call. Returns: dict with instance statuses, including checks, events, and state."
    },
    "ec2.client.describe_instance_topology": {
        "new_func": "ec2.client.describe_instance_topology",
        "description": "Describes the physical host placement hierarchy for instances within a Zone. Parameters: DryRun (boolean) - Optional. Returns: dict with the physical host placement topology information."
    },
    "ec2.client.describe_instance_type_offerings": {
        "new_func": "ec2.client.describe_instance_type_offerings",
        "description": "Lists the instance types offered for a specified location or current Region. Parameters: DryRun (boolean) - Optional. LocationType (string) - The location type. Filters (list of dicts) - Filters to apply. MaxResults (integer) - The maximum number of results to return in a single call. Returns: dict with available instance types for the specified location."
    },
    "ec2.client.describe_instance_types": {
        "new_func": "ec2.client.describe_instance_types",
        "description": "Describes specified instance types or all instances types for the current Region. Parameters: DryRun (boolean) - Optional. InstanceTypes (list of strings) - Instance types to describe. Filters (list of dicts) - Filters to apply. MaxResults (integer) - The maximum number of results to return in a single call. Returns: dict with detailed information about the described instance types."
    },
    "ec2.client.describe_instances": {
        "new_func": "ec2.client.describe_instances",
        "description": "Retrieves information about instances. Parameters: InstanceIds (list of strings) - Optional. Filters (list of dicts) - Optional. DryRun (boolean) - Optional. MaxResults (integer) - Optional, use for pagination. Returns: dict with information about the specified instances."
    },
    "ec2.client.describe_internet_gateways": {
        "new_func": "ec2.client.describe_internet_gateways",
        "description": "Retrieves details of internet gateways. Parameters: InternetGatewayIds (list of strings) - Optional. Filters (list of dicts) - Optional. DryRun (boolean) - Optional. Returns: dict with information about the internet gateways."
    },
    "ec2.client.describe_ipam_byoasn": {
        "new_func": "ec2.client.describe_ipam_byoasn",
        "description": "Describes Autonomous System Numbers and associated BYOIP CIDRs. Parameters: DryRun (boolean) - Optional. MaxResults (integer) - Optional. Returns: dict with ASNs and provisioning statuses."
    },
    "ec2.client.describe_ipam_pools": {
        "new_func": "ec2.client.describe_ipam_pools",
        "description": "Retrieves information about IPAM pools. Parameters: Filters (list of dicts) - Optional. DryRun (boolean) - Optional. MaxResults (integer) - Optional. Returns: dict with details of IPAM pools."
    },
    "ec2.client.describe_ipam_resource_discoveries": {
        "new_func": "ec2.client.describe_ipam_resource_discoveries",
        "description": "Provides details on IPAM resource discoveries. Parameters: IpamResourceDiscoveryIds (list of strings) - Optional. DryRun (boolean) - Optional. Returns: dict with information about the resource discoveries."
    },
    "ec2.client.describe_ipam_resource_discovery_associations": {
        "new_func": "ec2.client.describe_ipam_resource_discovery_associations",
        "description": "Retrieves associations with an Amazon VPC IPAM. Parameters: DryRun (boolean) - Optional. IpamResourceDiscoveryAssociationIds (list of strings) - Optional. Returns: dict with IPAM resource discovery association details."
    },
    "ec2.client.describe_ipam_scopes": {
        "new_func": "ec2.client.describe_ipam_scopes",
        "description": "Gets information about IPAM scopes. Parameters: DryRun (boolean) - Optional. Filters (list of dicts) - Optional filter criteria. MaxResults (integer) - The maximum number of results. Returns: dict with IPAM scope details."
    },
    "ec2.client.describe_ipams": {
        "new_func": "ec2.client.describe_ipams",
        "description": "Gets information about IPAM pools. Parameters: DryRun (boolean) - Optional. Filters (list of dicts) - Optional filter criteria. MaxResults (integer) - The maximum number of results. Returns: dict with IPAM pool details."
    },
    "ec2.client.describe_ipv6_pools": {
        "new_func": "ec2.client.describe_ipv6_pools",
        "description": "Describes IPv6 address pools. Parameters: PoolIds (list of strings) - Optional. Returns: dict with IPv6 pool details."
    },
    "ec2.client.describe_key_pairs": {
        "new_func": "ec2.client.describe_key_pairs",
        "description": "Describes specified key pairs or all key pairs. Parameters: Filters (list of dicts) - Optional. KeyNames (list of strings) - Optional. KeyPairIds (list of strings) - Optional. DryRun (boolean) - Optional. IncludePublicKey (boolean) - Optional. Returns: dict with KeyPairs, details including KeyPairId, KeyFingerprint, KeyName, KeyType, Tags, PublicKey, and CreateTime."
    },
    "ec2.client.describe_launch_template_versions": {
        "new_func": "ec2.client.describe_launch_template_versions",
        "description": "Describes versions of a launch template. Parameters: DryRun (boolean) - Checks permissions without request. LaunchTemplateId (string) - ID of the launch template. LaunchTemplateName (string) - Name of the launch template. Versions (list of strings) - Specific versions to describe. MinVersion (string) - Minimum version number to describe. MaxVersion (string) - Maximum version number to describe. Returns: dict with launch template versions."
    },
    "ec2.client.describe_launch_templates": {
        "new_func": "ec2.client.describe_launch_templates",
        "description": "Describes launch templates. Parameters: DryRun (boolean) - Checks permissions without request. LaunchTemplateIds (list of strings) - IDs of the launch templates. LaunchTemplateNames (list of strings) - Names of the launch templates. Filters (list of dicts) - Filters for the query. Returns: dict with launch templates."
    },
    "ec2.client.describe_local_gateway_route_table_virtual_interface_group_associations": {
        "new_func": "ec2.client.describe_local_gateway_route_table_virtual_interface_group_associations",
        "description": "Describes associations between virtual interface groups and local gateway route tables. Parameters: LocalGatewayRouteTableVirtualInterfaceGroupAssociationIds (list of strings) - Specific association IDs. Filters (list of dicts) - Filters for the query. MaxResults (integer) - Maximum number of results to return. Returns: dict with associations."
    },
    "ec2.client.describe_local_gateway_route_table_vpc_associations": {
        "new_func": "ec2.client.describe_local_gateway_route_table_vpc_associations",
        "description": "Describes associations between VPCs and local gateway route tables. Parameters: LocalGatewayRouteTableVpcAssociationIds (list of strings) - Specific association IDs. Filters (list of dicts) - Filters for the query. MaxResults (integer) - Maximum number of results to return. Returns: dict with VPC associations."
    },
    "ec2.client.describe_local_gateway_route_tables": {
        "new_func": "ec2.client.describe_local_gateway_route_tables",
        "description": "Describes local gateway route tables. Parameters: LocalGatewayRouteTableIds (list of strings) - Specific local gateway route table IDs. Filters (list of dicts) - Filters for the query. MaxResults (integer) - Maximum number of results to return. Returns: dict with route tables."
    },
    "ec2.client.describe_local_gateway_virtual_interface_groups": {
        "new_func": "ec2.client.describe_local_gateway_virtual_interface_groups",
        "description": "Describes local gateway virtual interface groups. Parameters: LocalGatewayVirtualInterfaceGroupIds (list of strings) - The IDs of the virtual interface groups. Filters (list of dicts) - Filters to apply. MaxResults (integer) - The maximum number of results to return. Returns: dict with virtual interface groups information."
    },
    "ec2.client.describe_local_gateway_virtual_interfaces": {
        "new_func": "ec2.client.describe_local_gateway_virtual_interfaces",
        "description": "Describes local gateway virtual interfaces. Parameters: LocalGatewayVirtualInterfaceIds (list of strings) - The IDs of the virtual interfaces. Filters (list of dicts) - Filters to apply. MaxResults (integer) - The maximum number of results to return. Returns: dict with virtual interfaces information."
    },
    "ec2.client.describe_local_gateways": {
        "new_func": "ec2.client.describe_local_gateways",
        "description": "Describes one or more local gateways. Parameters: LocalGatewayIds (list of strings) - The IDs of the local gateways. Filters (list of dicts) - Filters to apply. MaxResults (integer) - The maximum number of results to return. Returns: dict with local gateways information."
    },
    "ec2.client.describe_locked_snapshots": {
        "new_func": "ec2.client.describe_locked_snapshots",
        "description": "Describes the lock status for snapshots. Parameters: Filters (list of dicts) - Filters to apply. MaxResults (integer) - The maximum number of results to return. Returns: dict with snapshots' lock status information."
    },
    "ec2.client.describe_mac_hosts": {
        "new_func": "ec2.client.describe_mac_hosts",
        "description": "Describes specified EC2 Mac Dedicated Hosts or all Mac Dedicated Hosts. Parameters: Filters (list of dicts) - Filters to apply. HostIds (list of strings) - The IDs of the Mac Dedicated Hosts. MaxResults (integer) - The maximum number of results to return. Returns: dict with Mac Dedicated Hosts information."
    },
    "ec2.client.describe_managed_prefix_lists": {
        "new_func": "ec2.client.describe_managed_prefix_lists",
        "description": "Describes managed prefix lists. Parameters: DryRun (boolean) - Optional. Filters (list) - Optional filters for results. MaxResults (integer) - The maximum number of results to return. Returns: A list of managed prefix lists."
    },
    "ec2.client.describe_moving_addresses": {
        "new_func": "ec2.client.describe_moving_addresses",
        "description": "Describes Elastic IP addresses being moved to/from EC2-Classic. Deprecated. Parameters: Filters (list) - Optional filters for results. DryRun (boolean) - Optional. MaxResults (integer) - The maximum number of results to return. Returns: A list of Elastic IP addresses being moved."
    },
    "ec2.client.describe_nat_gateways": {
        "new_func": "ec2.client.describe_nat_gateways",
        "description": "Describes NAT gateways. Parameters: DryRun (boolean) - Optional. Filters (list) - Optional filters for results. MaxResults (integer) - The maximum number of results to return. NatGatewayIds (list of strings) - Specific NAT gateway IDs. Returns: A list of NAT gateways."
    },
    "ec2.client.describe_network_acls": {
        "new_func": "ec2.client.describe_network_acls",
        "description": "Describes network ACLs. Parameters: Filters (list) - Optional filters for results. DryRun (boolean) - Optional. NetworkAclIds (list of strings) - Specific network ACL IDs. Returns: A list of network ACLs."
    },
    "ec2.client.describe_network_insights_access_scope_analyses": {
        "new_func": "ec2.client.describe_network_insights_access_scope_analyses",
        "description": "Describes specified Network Access Scope analyses. Parameters: NetworkInsightsAccessScopeAnalysisIds (list of strings) - Specific analyses IDs. NetworkInsightsAccessScopeId (string) - Specific access scope ID. AnalysisStartTimeBegin (datetime) - Start time for the analyses. AnalysisStartTimeEnd (datetime) - End time for the analyses. Filters (list) - Optional filters for results. MaxResults (integer) - The maximum number of results to return. DryRun (boolean) - Optional. Returns: A list of network insights access scope analyses."
    },
    "ec2.client.describe_network_insights_access_scopes": {
        "new_func": "ec2.client.describe_network_insights_access_scopes",
        "description": "Describes specified Network Access Scopes. Parameters: NetworkInsightsAccessScopeIds (list) - IDs of scopes to describe. Filters (list) - Criteria to filter the results. MaxResults (integer) - Max number of results to return. DryRun (boolean) - Checks permissions without making the request. Returns: dict of NetworkInsightsAccessScopes."
    },
    "ec2.client.describe_network_insights_analyses": {
        "new_func": "ec2.client.describe_network_insights_analyses",
        "description": "Describes network insights analyses. Parameters: NetworkInsightsAnalysisIds (list) - IDs of analyses to describe. NetworkInsightsPathId (string) - Path ID related to analyses. AnalysisStartTime (datetime) - Start time for analysis. AnalysisEndTime (datetime) - End time for analysis. Filters (list) - Criteria to filter results. MaxResults (integer) - Max number of results to return. DryRun (boolean) - Checks permissions without making the request. Returns: dict of NetworkInsightsAnalyses."
    },
    "ec2.client.describe_network_insights_paths": {
        "new_func": "ec2.client.describe_network_insights_paths",
        "description": "Describes specified paths. Parameters: NetworkInsightsPathIds (list) - IDs of paths to describe. Filters (list) - Criteria to filter results. MaxResults (integer) - Max number of results to return. DryRun (boolean) - Checks permissions without making the request. Returns: dict of NetworkInsightsPaths."
    },
    "ec2.client.describe_network_interface_attribute": {
        "new_func": "ec2.client.describe_network_interface_attribute",
        "description": "Describes a network interface attribute. Parameters: Attribute (string) - Required. The attribute to describe. DryRun (boolean) - Checks permissions without making the request. NetworkInterfaceId (string) - Required. The ID of the network interface. Returns: dict with the specified attribute details."
    },
    "ec2.client.describe_network_interface_permissions": {
        "new_func": "ec2.client.describe_network_interface_permissions",
        "description": "Describes permissions for network interfaces. Parameters: NetworkInterfacePermissionIds (list) - IDs of permissions to describe. Filters (list) - Criteria to filter results. Returns: dict of NetworkInterfacePermissions."
    },
    "ec2.client.describe_network_interfaces": {
        "new_func": "ec2.client.describe_network_interfaces",
        "description": "Retrieves details of one or more network interfaces. Parameters: Filters (list) - Filters results based on a set of criteria. DryRun (boolean) - Validates permissions without making the request. NetworkInterfaceIds (list) - Specifies the network interfaces to describe. Returns: dict with information about the network interfaces."
    },
    "ec2.client.describe_placement_groups": {
        "new_func": "ec2.client.describe_placement_groups",
        "description": "Provides details for specified placement groups or all placement groups. Parameters: Filters (list) - Filters results based on criteria like group-name, group-arn, etc. DryRun (boolean) - Validates permissions without making the request. GroupNames (list) - Names of placement groups to describe. GroupIds (list) - IDs of placement groups to describe. Returns: dict with PlacementGroups which includes GroupName, State, Strategy, PartitionCount, GroupId, Tags, GroupArn, SpreadLevel."
    },
    "ec2.client.describe_prefix_lists": {
        "new_func": "ec2.client.describe_prefix_lists",
        "description": "Lists available AWS services in a prefix list format, including name, ID, and IP address range. Parameters: DryRun (boolean) - Validates permissions without making the request. Filters (list) - Filters the results based on criteria. MaxResults (integer) - The maximum number of results to return in a single call. Returns: dict with information about the prefix lists."
    },
    "ec2.client.describe_principal_id_format": {
        "new_func": "ec2.client.describe_principal_id_format",
        "description": "Describes ID format settings for the root user, IAM roles and IAM users with a longer ID preference. Parameters: DryRun (boolean) - Validates permissions without making the request. Resources (list) - The AWS resource types to describe. MaxResults (integer) - The maximum number of results to return in a single call. Returns: dict with details of the ID format settings."
    },
    "ec2.client.describe_public_ipv4_pools": {
        "new_func": "ec2.client.describe_public_ipv4_pools",
        "description": "Provides information about the specified IPv4 address pools. Parameters: PoolIds (list) - The IDs of the IPv4 address pools to describe. Returns: dict with details of the IPv4 address pools."
    },
    "ec2.client.describe_regions": {
        "new_func": "ec2.client.describe_regions",
        "description": "Retrieves information about enabled or all AWS Regions. Parameters: Filters (list) - Optional filters to narrow results by specific criteria like 'endpoint', 'opt-in-status', or 'region-name'. RegionNames (list) - Optional list of specific Region names to describe. DryRun (boolean) - Optional flag to check permissions without making the request. AllRegions (boolean) - Optional flag to include Regions disabled for your account. Returns: dict with 'Regions' containing a list of Regions and their details such as 'Endpoint', 'RegionName', and 'OptInStatus'."
    },
    "ec2.client.describe_replace_root_volume_tasks": {
        "new_func": "ec2.client.describe_replace_root_volume_tasks",
        "description": "Describes root volume replacement tasks. Parameters: ReplaceRootVolumeTaskIds (list) - List of task IDs. Filters (list) - Filters to narrow down results. MaxResults (integer) - The maximum number of results to return per page. Returns: dict with details of root volume replacement tasks."
    },
    "ec2.client.describe_reserved_instances": {
        "new_func": "ec2.client.describe_reserved_instances",
        "description": "Describes one or more of your purchased Reserved Instances. Parameters: Filters (list) - Optional filters to narrow results. OfferingClass (string) - Optional class of Reserved Instances to describe. ReservedInstancesIds (list) - Optional list of Reserved Instance IDs to describe. DryRun (boolean) - Optional flag to check permissions without making the request. OfferingType (string) - Optional type of Reserved Instance offering to describe. Returns: dict with 'ReservedInstances' containing a list of Reserved Instances and their details such as 'AvailabilityZone', 'Duration', 'End', 'FixedPrice', 'InstanceCount', 'InstanceType', 'ProductDescription', 'ReservedInstancesId', 'Start', 'State', 'UsagePrice', 'CurrencyCode', 'InstanceTenancy', 'OfferingClass', 'OfferingType', 'RecurringCharges', 'Scope', and 'Tags'."
    },
    "ec2.client.describe_reserved_instances_listings": {
        "new_func": "ec2.client.describe_reserved_instances_listings",
        "description": "Describes your account's Reserved Instance listings in the Reserved Instance Marketplace. Parameters: Filters (list) - Optional filters to specify listing details. ReservedInstancesId (string) - Optional ID of Reserved Instances to describe listings for. ReservedInstancesListingId (string) - Optional ID of Reserved Instance listings to describe. Returns: dict with 'ReservedInstancesListings' containing a list of listings and details like 'ClientToken', 'CreateDate', 'InstanceCounts', 'PriceSchedules', 'ReservedInstancesId', 'ReservedInstancesListingId', 'Status', 'StatusMessage', 'Tags', and 'UpdateDate'."
    },
    "ec2.client.describe_reserved_instances_modifications": {
        "new_func": "ec2.client.describe_reserved_instances_modifications",
        "description": "Describes modifications to your Reserved Instances. Parameters: Filters (list) - Optional filters for modification details. ReservedInstancesModificationIds (list) - Optional list of modification IDs to describe. Returns: dict detailing Reserved Instances modifications."
    },
    "ec2.client.describe_reserved_instances_offerings": {
        "new_func": "ec2.client.describe_reserved_instances_offerings",
        "description": "Describes Reserved Instance offerings available for purchase, excluding ones listed in the Reserved Instance Marketplace. Parameters: AvailabilityZone (string), Filters (list of dicts), IncludeMarketplace (boolean), InstanceType (string), MaxDuration (integer), MaxInstanceCount (integer), MinDuration (integer), OfferingClass ('standard' or 'convertible'), ProductDescription (string), ReservedInstancesOfferingIds (list of strings), DryRun (boolean), InstanceTenancy ('default', 'dedicated', 'host'), MaxResults (integer). Returns: dict with offerings matching criteria."
    },
    "ec2.client.describe_route_tables": {
        "new_func": "ec2.client.describe_route_tables",
        "description": "Describes route tables. Can specify route table IDs or filter by criteria. Parameters: Filters (list of dicts), DryRun (boolean), RouteTableIds (list of strings). Returns: dict with information on route tables matching criteria."
    },
    "ec2.client.describe_scheduled_instance_availability": {
        "new_func": "ec2.client.describe_scheduled_instance_availability",
        "description": "Finds available schedules for purchasing Scheduled Instances within a 3-month range meeting minimum required duration. Parameters: DryRun (boolean), Filters (list of dicts), FirstSlotStartTimeRange (dict with 'EarliestTime' and 'LatestTime' datetime objects), MaxResults (integer), MaxSlotDurationInHours (integer), MinSlotDurationInHours (integer). Returns: dict with available schedules meeting criteria."
    },
    "ec2.client.describe_scheduled_instances": {
        "new_func": "ec2.client.describe_scheduled_instances",
        "description": "Describes specified or all Scheduled Instances. Parameters: DryRun (boolean), Filters (list of dicts), MaxResults (integer). Returns: dict with information on Scheduled Instances matching criteria."
    },
    "ec2.client.describe_security_group_references": {
        "new_func": "ec2.client.describe_security_group_references",
        "description": "Describes VPCs referencing the specified security groups in a VPC peering connection. Parameters: DryRun (boolean), GroupId (list of strings) - Required. Returns: dict with 'SecurityGroupReferenceSet' containing groups and referencing VPC details."
    },
    "ec2.client.describe_security_group_rules": {
        "new_func": "ec2.client.describe_security_group_rules",
        "description": "Describes one or more security group rules. Parameters: Filters (list) - Filters for the security group rules. SecurityGroupRuleIds (list) - The IDs of the security group rules. DryRun (boolean) - Checks required permissions without making the request. Returns: dict with information about the security group rules."
    },
    "ec2.client.describe_security_groups": {
        "new_func": "ec2.client.describe_security_groups",
        "description": "Describes the specified security groups or all of your security groups. Parameters: Filters (list) - Filters to specify which security groups to describe. GroupIds (list) - The IDs of the security groups. GroupNames (list) - The names of the security groups. DryRun (boolean) - Checks required permissions without making the request. Returns: dict with information about each security group."
    },
    "ec2.client.describe_snapshot_attribute": {
        "new_func": "ec2.client.describe_snapshot_attribute",
        "description": "Describes a specified attribute of a snapshot. Parameters: Attribute (string) - Required. The snapshot attribute to view. SnapshotId (string) - Required. The ID of the snapshot. DryRun (boolean) - Checks required permissions without making the request. Returns: dict with the specified attribute and associated details such as CreateVolumePermissions and ProductCodes."
    },
    "ec2.client.describe_snapshot_tier_status": {
        "new_func": "ec2.client.describe_snapshot_tier_status",
        "description": "Describes the storage tier status of one or more EBS snapshots. Parameters: Filters (list) - Filters for the snapshots. DryRun (boolean) - Checks required permissions without making the request. Returns: dict with information about the storage tier status of the snapshots."
    },
    "ec2.client.describe_snapshots": {
        "new_func": "ec2.client.describe_snapshots",
        "description": "Describes the specified EBS snapshots available to you or all of the EBS snapshots available to you. Parameters: Filters (list) - Filters for the snapshots. MaxResults (integer) - The maximum number of snapshot results returned by the request. DryRun (boolean) - Checks required permissions without making the request. Returns: dict with information about each snapshot."
    },
    "ec2.client.describe_spot_datafeed_subscription": {
        "new_func": "ec2.client.describe_spot_datafeed_subscription",
        "description": "Describes the data feed for Spot Instances. Parameters: DryRun (boolean) - Optional. Checks if you have required permissions without making the request. Returns: dict containing 'SpotDatafeedSubscription' with 'Bucket', 'Fault' (including 'Code' and 'Message'), 'OwnerId', 'Prefix', and 'State'."
    },
    "ec2.client.describe_spot_fleet_instances": {
        "new_func": "ec2.client.describe_spot_fleet_instances",
        "description": "Describes the running instances for a specified Spot Fleet. Parameters: DryRun (boolean) - Optional. MaxResults (integer) - Optional. The maximum number of results to return in a single call. Returns: dict with details of the running instances for the Spot Fleet."
    },
    "ec2.client.describe_spot_fleet_request_history": {
        "new_func": "ec2.client.describe_spot_fleet_request_history",
        "description": "Describes the events for a specified Spot Fleet request during a specified time. Parameters: DryRun (boolean) - Optional. EventType (string) - Optional. Type of the events to describe. MaxResults (integer) - Optional. The maximum number of results to return. Returns: dict with the history of the Spot Fleet request, including events and changes."
    },
    "ec2.client.describe_spot_fleet_requests": {
        "new_func": "ec2.client.describe_spot_fleet_requests",
        "description": "Describes your Spot Fleet requests. Parameters: DryRun (boolean) - Optional. MaxResults (integer) - Optional. The maximum number of results to return. Returns: dict with details of your Spot Fleet requests."
    },
    "ec2.client.describe_spot_instance_requests": {
        "new_func": "ec2.client.describe_spot_instance_requests",
        "description": "Describes specified Spot Instance requests. Parameters: DryRun (boolean) - Optional. MaxResults (integer) - Optional. The maximum number of results to return, between 5 and 1000. Returns: dict with details of the Spot Instance requests, potentially including status and instance IDs."
    },
    "ec2.client.describe_spot_price_history": {
        "new_func": "ec2.client.describe_spot_price_history",
        "description": "Retrieves the history of Spot instance prices. Parameters: Filters (list) - Filters for the request. AvailabilityZone (string) - AZ of the instances. DryRun (boolean) - Checks permissions without making the request. EndTime (datetime) - End time of the price history. InstanceTypes (list) - Specific instance types to retrieve. MaxResults (integer) - Maximum number of results to return. Returns: dict with Spot price history."
    },
    "ec2.client.describe_stale_security_groups": {
        "new_func": "ec2.client.describe_stale_security_groups",
        "description": "Describes stale security group rules in a specified VPC. Parameters: DryRun (boolean) - Checks permissions without making the request. MaxResults (integer) - Maximum number of results to return. Returns: dict with information about stale security group rules."
    },
    "ec2.client.describe_store_image_tasks": {
        "new_func": "ec2.client.describe_store_image_tasks",
        "description": "Describes the progress of AMI store tasks. Parameters: ImageIds (list) - AMI IDs to describe. DryRun (boolean) - Checks permissions without making the request. Filters (list) - Filters for the request. Returns: dict with information about the store image tasks, including task progress and status."
    },
    "ec2.client.describe_subnets": {
        "new_func": "ec2.client.describe_subnets",
        "description": "Describes your subnets. Parameters: Filters (list) - Filters for the request. SubnetIds (list) - Specific subnet IDs to describe. DryRun (boolean) - Checks permissions without making the request. Returns: dict with information about the subnets."
    },
    "ec2.client.describe_tags": {
        "new_func": "ec2.client.describe_tags",
        "description": "Describes tags for EC2 resources. Parameters: DryRun (boolean) - Checks permissions without making the request. Filters (list) - Filters for the request. MaxResults (integer) - Maximum number of results to return. Returns: dict with information about the EC2 resource tags."
    },
    "ec2.client.describe_traffic_mirror_filter_rules": {
        "new_func": "ec2.client.describe_traffic_mirror_filter_rules",
        "description": "Describes traffic mirror filter rules. Parameters: TrafficMirrorFilterRuleIds (list of strings), TrafficMirrorFilterId (string), DryRun (boolean), Filters (list of filters), MaxResults (integer). Returns: dict with TrafficMirrorFilterRule information."
    },
    "ec2.client.describe_traffic_mirror_filters": {
        "new_func": "ec2.client.describe_traffic_mirror_filters",
        "description": "Describes traffic mirror filters. Parameters: TrafficMirrorFilterIds (list of strings), DryRun (boolean), Filters (list of filters), MaxResults (integer). Returns: dict with TrafficMirrorFilter information."
    },
    "ec2.client.describe_traffic_mirror_sessions": {
        "new_func": "ec2.client.describe_traffic_mirror_sessions",
        "description": "Describes traffic mirror sessions. Parameters: TrafficMirrorSessionIds (list of strings), DryRun (boolean), Filters (list of filters), MaxResults (integer). Returns: dict with TrafficMirrorSession information."
    },
    "ec2.client.describe_traffic_mirror_targets": {
        "new_func": "ec2.client.describe_traffic_mirror_targets",
        "description": "Provides information about traffic mirror targets. Parameters: TrafficMirrorTargetIds (list of strings), DryRun (boolean), Filters (list of filters), MaxResults (integer). Returns: dict with TrafficMirrorTarget information."
    },
    "ec2.client.describe_transit_gateway_attachments": {
        "new_func": "ec2.client.describe_transit_gateway_attachments",
        "description": "Describes attachments between resources and transit gateways. Parameters: TransitGatewayAttachmentIds (list of strings), Filters (list of filters), MaxResults (integer). Returns: dict with TransitGatewayAttachment information."
    },
    "ec2.client.describe_transit_gateway_connect_peers": {
        "new_func": "ec2.client.describe_transit_gateway_connect_peers",
        "description": "Describes Connect peers. Parameters: TransitGatewayConnectPeerIds (list of strings) - Identifiers of Connect peers. Filters (list of dicts) - Filters for the query. MaxResults (integer) - Maximum number of results to return. Returns: dict with 'TransitGatewayConnectPeers' and 'NextToken'."
    },
    "ec2.client.describe_transit_gateway_connects": {
        "new_func": "ec2.client.describe_transit_gateway_connects",
        "description": "Describes Connect attachments. Parameters: TransitGatewayAttachmentIds (list of strings) - Identifiers of Connect attachments. Filters (list of dicts) - Filters for the query. MaxResults (integer) - Maximum number of results to return. Returns: dict with 'TransitGatewayConnects' and 'NextToken'."
    },
    "ec2.client.describe_transit_gateway_multicast_domains": {
        "new_func": "ec2.client.describe_transit_gateway_multicast_domains",
        "description": "Describes transit gateway multicast domains. Parameters: TransitGatewayMulticastDomainIds (list of strings) - Identifiers of multicast domains. Filters (list of dicts) - Filters for the query. MaxResults (integer) - Maximum number of results to return. Returns: dict with 'TransitGatewayMulticastDomains' and 'NextToken'."
    },
    "ec2.client.describe_transit_gateway_peering_attachments": {
        "new_func": "ec2.client.describe_transit_gateway_peering_attachments",
        "description": "Describes transit gateway peering attachments. Parameters: TransitGatewayAttachmentIds (list of strings) - Identifiers of peering attachments. Filters (list of dicts) - Filters for the query. MaxResults (integer) - Maximum number of results to return. Returns: dict with 'TransitGatewayPeeringAttachments' and 'NextToken'."
    },
    "ec2.client.describe_transit_gateway_policy_tables": {
        "new_func": "ec2.client.describe_transit_gateway_policy_tables",
        "description": "Describes transit gateway route policy tables. Parameters: TransitGatewayPolicyTableIds (list of strings) - Identifiers of policy tables. Filters (list of dicts) - Filters for the query. MaxResults (integer) - Maximum number of results to return. Returns: dict with 'TransitGatewayPolicyTables' and 'NextToken'."
    },
    "ec2.client.describe_transit_gateway_route_table_announcements": {
        "new_func": "ec2.client.describe_transit_gateway_route_table_announcements",
        "description": "Describes transit gateway route table advertisements. Parameters: TransitGatewayRouteTableAnnouncementIds (list of strings) - IDs of the route table announcements. Filters (list of dicts) - Criteria to filter results. MaxResults (integer) - Maximum number of results to return. Returns: dict with announcements details."
    },
    "ec2.client.describe_transit_gateway_route_tables": {
        "new_func": "ec2.client.describe_transit_gateway_route_tables",
        "description": "Describes transit gateway route tables. Parameters: TransitGatewayRouteTableIds (list of strings) - IDs of the route tables. Filters (list of dicts) - Criteria to filter results. MaxResults (integer) - Maximum number of results to return. Returns: dict with route tables details."
    },
    "ec2.client.describe_transit_gateway_vpc_attachments": {
        "new_func": "ec2.client.describe_transit_gateway_vpc_attachments",
        "description": "Describes VPC attachments to transit gateways. Parameters: TransitGatewayAttachmentIds (list of strings) - IDs of the attachments. Filters (list of dicts) - Criteria to filter results. MaxResults (integer) - Maximum number of results to return. Returns: dict with VPC attachments details."
    },
    "ec2.client.describe_transit_gateways": {
        "new_func": "ec2.client.describe_transit_gateways",
        "description": "Describes transit gateways. Parameters: TransitGatewayIds (list of strings) - IDs of the transit gateways. Filters (list of dicts) - Criteria to filter results. MaxResults (integer) - Maximum number of results to return. Returns: dict with transit gateways details."
    },
    "ec2.client.describe_trunk_interface_associations": {
        "new_func": "ec2.client.describe_trunk_interface_associations",
        "description": "Describes network interface trunk associations. Parameters: AssociationIds (list of strings) - IDs of the trunk interface associations. DryRun (boolean) - Checks required permissions without making the request. Filters (list of dicts) - Criteria to filter results. Returns: dict with trunk interface associations details."
    },
    "ec2.client.describe_verified_access_endpoints": {
        "new_func": "ec2.client.describe_verified_access_endpoints",
        "description": "Describes AWS Verified Access endpoints. Parameters: VerifiedAccessEndpointIds (list of strings) - The endpoints' IDs. VerifiedAccessInstanceId (string) - The instance ID. VerifiedAccessGroupId (string) - The group ID. MaxResults (integer) - The maximum number of results to return. Returns: dict with the endpoints' descriptions."
    },
    "ec2.client.describe_verified_access_groups": {
        "new_func": "ec2.client.describe_verified_access_groups",
        "description": "Describes Verified Access groups. Parameters: VerifiedAccessGroupIds (list of strings) - The groups' IDs. VerifiedAccessInstanceId (string) - The instance ID. MaxResults (integer) - The maximum number of results to return. Returns: dict with the groups' descriptions."
    },
    "ec2.client.describe_verified_access_instance_logging_configurations": {
        "new_func": "ec2.client.describe_verified_access_instance_logging_configurations",
        "description": "Describes logging configurations for AWS Verified Access instances. Parameters: VerifiedAccessInstanceIds (list of strings) - The instances' IDs. MaxResults (integer) - The maximum number of results to return. Returns: dict with the instances' logging configurations."
    },
    "ec2.client.describe_verified_access_instances": {
        "new_func": "ec2.client.describe_verified_access_instances",
        "description": "Describes AWS Verified Access instances. Parameters: VerifiedAccessInstanceIds (list of strings) - The instances' IDs. MaxResults (integer) - The maximum number of results to return. Returns: dict with the instances' descriptions."
    },
    "ec2.client.describe_verified_access_trust_providers": {
        "new_func": "ec2.client.describe_verified_access_trust_providers",
        "description": "Describes AWS Verified Access trust providers. Parameters: VerifiedAccessTrustProviderIds (list of strings) - The trust providers' IDs. MaxResults (integer) - The maximum number of results to return. Returns: dict with the trust providers' descriptions."
    },
    "ec2.client.describe_volume_attribute": {
        "new_func": "ec2.client.describe_volume_attribute",
        "description": "Describes an attribute of a specified volume. Parameters: Attribute (string) - The volume attribute to describe; VolumeId (string) - The ID of the volume; DryRun (boolean) - Checks permissions without making the request. Returns: dict with the state of AutoEnableIO, ProductCodes, and VolumeId."
    },
    "ec2.client.describe_volume_status": {
        "new_func": "ec2.client.describe_volume_status",
        "description": "Describes the status of specified volumes, including volume events and actions required. Parameters: Filters (list) - Filters for the request; MaxResults (integer) - The maximum number of pagination results to return. Returns: dict with volume status, events, and actions."
    },
    "ec2.client.describe_volumes": {
        "new_func": "ec2.client.describe_volumes",
        "description": "Describes specified EBS volumes or all EBS volumes. Parameters: Filters (list) - Filters for the request; VolumeIds (list) - Specific volume IDs to describe; DryRun (boolean) - Checks permissions without making the request; MaxResults (integer) - The maximum number of pagination results to return. Returns: dict with detailed information about each volume."
    },
    "ec2.client.describe_volumes_modifications": {
        "new_func": "ec2.client.describe_volumes_modifications",
        "description": "Describes recent volume modification requests for specified EBS volumes. Parameters: DryRun (boolean) - Checks permissions without making the request; VolumeIds (list) - Specific volume IDs to describe; Filters (list) - Filters for the request. Returns: dict with information about volume modifications."
    },
    "ec2.client.describe_vpc_attribute": {
        "new_func": "ec2.client.describe_vpc_attribute",
        "description": "Describes an attribute of a specified VPC. Parameters: Attribute (string) - The VPC attribute to describe; VpcId (string) - The ID of the VPC; DryRun (boolean) - Checks permissions without making the request. Returns: dict with the VpcId and values for EnableDnsHostnames, EnableDnsSupport, and EnableNetworkAddressUsageMetrics."
    },
    "ec2.client.describe_vpc_classic_link": {
        "new_func": "ec2.client.describe_vpc_classic_link",
        "description": "Describes the ClassicLink status of VPCs. Deprecated. Parameters: Filters (list) - Filters to apply. DryRun (boolean) - Checks permissions without the request. VpcIds (list) - VPCs to describe. Returns: dict with 'Vpcs' containing ClassicLinkEnabled, Tags, and VpcId for each VPC."
    },
    "ec2.client.describe_vpc_classic_link_dns_support": {
        "new_func": "ec2.client.describe_vpc_classic_link_dns_support",
        "description": "Describes the ClassicLink DNS support status of VPCs. Deprecated. Parameters: MaxResults (integer) - The maximum number of results to return in a single call. Returns: dict with DNS support statuses."
    },
    "ec2.client.describe_vpc_endpoint_connection_notifications": {
        "new_func": "ec2.client.describe_vpc_endpoint_connection_notifications",
        "description": "Describes notifications for VPC endpoint connections. Parameters: DryRun (boolean) - Checks permissions without the request. ConnectionNotificationId (string) - Specifies a notification. Filters (list) - Filters to apply. MaxResults (integer) - The maximum number of results to return in a single call. Returns: dict with notification details."
    },
    "ec2.client.describe_vpc_endpoint_connections": {
        "new_func": "ec2.client.describe_vpc_endpoint_connections",
        "description": "Describes VPC endpoint connections to endpoint services. Parameters: DryRun (boolean) - Checks permissions without the request. Filters (list) - Filters to apply. MaxResults (integer) - The maximum number of results to return in a single call. Returns: dict with endpoint connection details."
    },
    "ec2.client.describe_vpc_endpoint_service_configurations": {
        "new_func": "ec2.client.describe_vpc_endpoint_service_configurations",
        "description": "Describes VPC endpoint service configurations. Parameters: DryRun (boolean) - Checks permissions without the request. ServiceIds (list) - IDs of services to describe. Filters (list) - Filters to apply. MaxResults (integer) - The maximum number of results to return in a single call. Returns: dict with service configurations."
    },
    "ec2.client.describe_vpc_endpoint_service_permissions": {
        "new_func": "ec2.client.describe_vpc_endpoint_service_permissions",
        "description": "Describes permitted principals to discover your VPC endpoint service. Parameters: DryRun (boolean) - Checks permissions without making the request. ServiceId (string) - ID of the service. Filters (list) - Search criteria. MaxResults (integer) - Pagination limit. Returns: dict of service permissions."
    },
    "ec2.client.describe_vpc_endpoint_services": {
        "new_func": "ec2.client.describe_vpc_endpoint_services",
        "description": "Describes available services for creating a VPC endpoint, considering common Availability Zones between service provider and consumer. Parameters: DryRun (boolean) - Checks permissions without making the request. ServiceNames (list) - Names of services. Filters (list) - Search criteria. MaxResults (integer) - Pagination limit. Returns: dict of available services."
    },
    "ec2.client.describe_vpc_endpoints": {
        "new_func": "ec2.client.describe_vpc_endpoints",
        "description": "Describes VPC endpoints, all or filtered by IDs or criteria. Parameters: DryRun (boolean) - Checks permissions without making the request. VpcEndpointIds (list) - Specific endpoint IDs. Filters (list) - Search criteria. MaxResults (integer) - Pagination limit. Returns: dict of VPC endpoints."
    },
    "ec2.client.describe_vpc_peering_connections": {
        "new_func": "ec2.client.describe_vpc_peering_connections",
        "description": "Describes VPC peering connections, all or filtered by IDs or criteria. Parameters: Filters (list) - Search criteria. DryRun (boolean) - Checks permissions without making the request. VpcPeeringConnectionIds (list) - Specific peering connection IDs. Returns: dict of VPC peering connections."
    },
    "ec2.client.describe_vpcs": {
        "new_func": "ec2.client.describe_vpcs",
        "description": "Describes VPCs, all or filtered by specific IDs or criteria. Parameters: Filters (list) - Search criteria. VpcIds (list) - Specific VPC IDs. DryRun (boolean) - Checks permissions without making the request. Returns: dict of VPCs."
    },
    "ec2.client.describe_vpn_connections": {
        "new_func": "ec2.client.describe_vpn_connections",
        "description": "Describes one or more VPN connections. Parameters: Filters (list) - Filters for results, based on keys such as state, type, vpn-connection-id, etc. VpnConnectionIds (list) - Specific VPN connection IDs to describe. DryRun (boolean) - Checks permissions without making the request. Returns: dict with 'VpnConnections' containing details such as CustomerGatewayId, State, Type, VpnConnectionId, and associated options and tags."
    },
    "ec2.client.describe_vpn_gateways": {
        "new_func": "ec2.client.describe_vpn_gateways",
        "description": "Describes one or more virtual private gateways. Parameters: Filters (list) - Filters for results based on keys like state, attachment.vpc-id, type, etc. VpnGatewayIds (list) - Specific virtual private gateway IDs to describe. DryRun (boolean) - Checks permissions without making the request. Returns: dict with 'VpnGateways' containing details such as AvailabilityZone, State, Type, VpcAttachments, VpnGatewayId, and tags."
    },
    "ec2.client.detach_classic_link_vpc": {
        "new_func": "ec2.client.detach_classic_link_vpc",
        "description": "Detaches a linked EC2-Classic instance from a VPC. Parameters: InstanceId (string) - Required. ID of the instance to unlink. VpcId (string) - Required. ID of the VPC from which to unlink the instance. DryRun (boolean) - Checks permissions without making the request. Returns: dict with 'Return' indicating the success of detachment."
    },
    "ec2.client.detach_internet_gateway": {
        "new_func": "ec2.client.detach_internet_gateway",
        "description": "Detaches an internet gateway from a VPC. Parameters: InternetGatewayId (string) - Required. ID of the internet gateway. VpcId (string) - Required. ID of the VPC to detach from. DryRun (boolean) - Checks permissions without making the request. Returns: None."
    },
    "ec2.client.detach_network_interface": {
        "new_func": "ec2.client.detach_network_interface",
        "description": "Detaches a network interface from an instance. Parameters: AttachmentId (string) - Required. ID of the attachment to detach. DryRun (boolean) - Checks permissions without making the request. Force (boolean) - Forces detachment as a last resort. Returns: None."
    },
    "ec2.client.detach_verified_access_trust_provider": {
        "new_func": "ec2.client.detach_verified_access_trust_provider",
        "description": "Detaches a Verified Access trust provider from a Verified Access instance. Parameters: VerifiedAccessInstanceId (string) - Required. The ID of the Verified Access instance. VerifiedAccessTrustProviderId (string) - Required. The ID of the Verified Access trust provider. ClientToken (string) - Token for idempotency. DryRun (boolean) - Checks permissions without making the request. Returns: dict with details of the detached trust provider and the Verified Access instance."
    },
    "ec2.client.detach_volume": {
        "new_func": "ec2.client.detach_volume",
        "description": "Detaches an EBS volume from an instance. Parameters: Device (string) - Device name. Force (boolean) - Forces detachment, may cause data loss. InstanceId (string) - ID of the instance. VolumeId (string) - Required. The ID of the volume. DryRun (boolean) - Checks permissions without making the request. Returns: dict with details of the detachment including AttachTime, Device, InstanceId, State, VolumeId, DeleteOnTermination, AssociatedResource, InstanceOwningService."
    },
    "ec2.client.detach_vpn_gateway": {
        "new_func": "ec2.client.detach_vpn_gateway",
        "description": "Detaches a virtual private gateway from a VPC. Parameters: VpcId (string) - Required. The ID of the VPC. VpnGatewayId (string) - Required. The ID of the virtual private gateway. DryRun (boolean) - Checks permissions without making the request. Returns: None."
    },
    "ec2.client.disable_address_transfer": {
        "new_func": "ec2.client.disable_address_transfer",
        "description": "Disables Elastic IP address transfer. Parameters: AllocationId (string) - Required. The allocation ID of the Elastic IP address. DryRun (boolean) - Checks permissions without making the request. Returns: dict with details of the address transfer including PublicIp, AllocationId, TransferAccountId, TransferOfferExpirationTimestamp, TransferOfferAcceptedTimestamp, AddressTransferStatus."
    },
    "ec2.client.disable_aws_network_performance_metric_subscription": {
        "new_func": "ec2.client.disable_aws_network_performance_metric_subscription",
        "description": "Disables Infrastructure Performance metric subscriptions. Parameters: Source (string) - The source Region or Availability Zone. Destination (string) - The target Region or Availability Zone. Metric (string) - The metric for the subscription. Statistic (string) - The statistic for the subscription. DryRun (boolean) - Checks permissions without making the request. Returns: dict with a boolean indicating the success of the unsubscribe action."
    },
    "ec2.client.disable_ebs_encryption_by_default": {
        "new_func": "ec2.client.disable_ebs_encryption_by_default",
        "description": "Disables EBS encryption by default for the current Region. Parameters: DryRun (boolean) - Checks permissions without making the request. Returns: dict with 'EbsEncryptionByDefault' indicating the updated status."
    },
    "ec2.client.disable_fast_launch": {
        "new_func": "ec2.client.disable_fast_launch",
        "description": "Disables Windows fast launch for a Windows AMI and cleans up pre-provisioned snapshots. Parameters: ImageId (string) - Required. ID of the image. Force (boolean) - Forces disabling fast launch. DryRun (boolean) - Checks permissions without making the request. Returns: dict with details of the disabled fast launch configuration."
    },
    "ec2.client.disable_fast_snapshot_restores": {
        "new_func": "ec2.client.disable_fast_snapshot_restores",
        "description": "Disables fast snapshot restores for specified snapshots in specified Availability Zones. Parameters: AvailabilityZones (list) - Required. Availability Zones to disable. SourceSnapshotIds (list) - Required. Snapshot IDs to disable. DryRun (boolean) - Checks permissions without making the request. Returns: dict with 'Successful' and 'Unsuccessful' fast snapshot restore information."
    },
    "ec2.client.disable_image": {
        "new_func": "ec2.client.disable_image",
        "description": "Disables an AMI, making it unusable for instance launches and removes all launch permissions. Parameters: ImageId (string) - Required. AMI ID to disable. DryRun (boolean) - Checks permissions without making the request. Returns: dict with 'Return' indicating success or error."
    },
    "ec2.client.disable_image_block_public_access": {
        "new_func": "ec2.client.disable_image_block_public_access",
        "description": "Disables block public access for AMIs at the account level in the specified AWS Region. Parameters: DryRun (boolean) - Checks permissions without making the request. Returns: dict with 'ImageBlockPublicAccessState' indicating unblocked state."
    },
    "ec2.client.disable_image_deprecation": {
        "new_func": "ec2.client.disable_image_deprecation",
        "description": "Cancels AMI deprecation. Parameters: ImageId (string) - Required. ID of the AMI. DryRun (boolean) - Checks permissions without making the request. Returns: dict with 'Return' (boolean) indicating success or error."
    },
    "ec2.client.disable_image_deregistration_protection": {
        "new_func": "ec2.client.disable_image_deregistration_protection",
        "description": "Disables deregistration protection for an AMI. Parameters: ImageId (string) - Required. ID of the AMI. DryRun (boolean) - Checks permissions without making the request. Returns: dict with 'Return' (string) indicating success or error."
    },
    "ec2.client.disable_ipam_organization_admin_account": {
        "new_func": "ec2.client.disable_ipam_organization_admin_account",
        "description": "Disables the IPAM account. Parameters: DryRun (boolean) - Checks permissions without making the request. DelegatedAdminAccountId (string) - Required. The account ID to disable. Returns: dict with 'Success' (boolean) indicating result of the operation."
    },
    "ec2.client.disable_serial_console_access": {
        "new_func": "ec2.client.disable_serial_console_access",
        "description": "Disables EC2 serial console access for all instances for your account. Parameters: DryRun (boolean) - Checks permissions without making the request. Returns: dict with 'SerialConsoleAccessEnabled' (boolean) indicating if access is enabled or disabled."
    },
    "ec2.client.disable_snapshot_block_public_access": {
        "new_func": "ec2.client.disable_snapshot_block_public_access",
        "description": "Disables block public access for snapshots at the account level for the specified Region. Parameters: DryRun (boolean) - Checks permissions without making the request. Returns: dict with 'State' (string) indicating the public access state."
    },
    "ec2.client.disable_transit_gateway_route_table_propagation": {
        "new_func": "ec2.client.disable_transit_gateway_route_table_propagation",
        "description": "Disables route propagation from an attachment to a transit gateway route table. Parameters: TransitGatewayRouteTableId (string) - Required. The ID of the route table. TransitGatewayAttachmentId (string) - The ID of the attachment. DryRun (boolean) - Checks permissions without making the request. TransitGatewayRouteTableAnnouncementId (string) - The ID of the route table announcement. Returns: dict with information about the propagation including TransitGatewayAttachmentId, ResourceId, ResourceType, TransitGatewayRouteTableId, State, and TransitGatewayRouteTableAnnouncementId."
    },
    "ec2.client.disable_vgw_route_propagation": {
        "new_func": "ec2.client.disable_vgw_route_propagation",
        "description": "Disables a virtual private gateway from propagating routes to a specified VPC route table. Parameters: GatewayId (string) - Required. The ID of the gateway. RouteTableId (string) - Required. The ID of the route table. DryRun (boolean) - Checks permissions without making the request. Returns: None."
    },
    "ec2.client.disable_vpc_classic_link": {
        "new_func": "ec2.client.disable_vpc_classic_link",
        "description": "Disables ClassicLink for a VPC. Parameters: VpcId (string) - Required. The ID of the VPC. DryRun (boolean) - Checks permissions without making the request. Returns: dict with a 'Return' boolean indicating success or failure."
    },
    "ec2.client.disable_vpc_classic_link_dns_support": {
        "new_func": "ec2.client.disable_vpc_classic_link_dns_support",
        "description": "Disables ClassicLink DNS support for a VPC. Parameters: VpcId (string) - The ID of the VPC. Returns: dict with a 'Return' boolean indicating success or failure."
    },
    "ec2.client.disassociate_address": {
        "new_func": "ec2.client.disassociate_address",
        "description": "Disassociates an Elastic IP address from the instance or network interface it\u2019s associated with. Parameters: AssociationId (string) - Required. The association ID. PublicIp (string) - Deprecated. DryRun (boolean) - Checks permissions without making the request. Returns: None."
    },
    "ec2.client.disassociate_client_vpn_target_network": {
        "new_func": "ec2.client.disassociate_client_vpn_target_network",
        "description": "Disassociates a target network from a Client VPN endpoint. Parameters: ClientVpnEndpointId (string) - Required ID of the Client VPN endpoint. AssociationId (string) - Required ID of the target network association. DryRun (boolean) - Checks permissions without making the request. Returns: dict with AssociationId and Status including Code and Message."
    },
    "ec2.client.disassociate_enclave_certificate_iam_role": {
        "new_func": "ec2.client.disassociate_enclave_certificate_iam_role",
        "description": "Disassociates an IAM role from an ACM certificate, removing the certificate from S3 and revoking the role's permission to use the associated KMS key. Parameters: CertificateArn (string) - Required ARN of the ACM certificate. RoleArn (string) - Required ARN of the IAM role. DryRun (boolean) - Checks permissions without making the request. Returns: dict with a boolean Return indicating success or error."
    },
    "ec2.client.disassociate_iam_instance_profile": {
        "new_func": "ec2.client.disassociate_iam_instance_profile",
        "description": "Disassociates an IAM instance profile from a running or stopped instance. Parameters: AssociationId (string) - Required ID of the IAM instance profile association. Returns: dict with IamInstanceProfileAssociation including AssociationId, InstanceId, IamInstanceProfile with Arn and Id, State, and Timestamp."
    },
    "ec2.client.disassociate_instance_event_window": {
        "new_func": "ec2.client.disassociate_instance_event_window",
        "description": "Disassociates targets from an event window. Parameters: InstanceEventWindowId (string) - Required ID of the event window. AssociationTarget (dict) - Required targets to disassociate, with InstanceIds, InstanceTags, or DedicatedHostIds. DryRun (boolean) - Checks permissions without making the request. Returns: dict with InstanceEventWindow information including InstanceEventWindowId, TimeRanges, Name, CronExpression, AssociationTarget, State, and Tags."
    },
    "ec2.client.disassociate_ipam_byoasn": {
        "new_func": "ec2.client.disassociate_ipam_byoasn",
        "description": "Removes the association between an ASN and a BYOIP CIDR. Parameters: Asn (string) - Required public ASN. Cidr (string) - Required BYOIP CIDR. DryRun (boolean) - Checks permissions without making the request. Returns: dict with AsnAssociation including Asn, Cidr, StatusMessage, and State."
    },
    "ec2.client.disassociate_ipam_resource_discovery": {
        "new_func": "ec2.client.disassociate_ipam_resource_discovery",
        "description": "Disassociates a resource discovery from an Amazon VPC IPAM. Parameters: DryRun (boolean) - Optional permission check. IpamResourceDiscoveryAssociationId (string) - Required. The ID of the resource discovery association. Returns: dict containing details of the disassociated IpamResourceDiscoveryAssociation including OwnerId, IpamResourceDiscoveryAssociationId, and other association details."
    },
    "ec2.client.disassociate_nat_gateway_address": {
        "new_func": "ec2.client.disassociate_nat_gateway_address",
        "description": "Disassociates secondary Elastic IP addresses from a public NAT gateway. Parameters: NatGatewayId (string) - Required. The ID of the NAT gateway. AssociationIds (list) - Required. The association IDs of EIPs. MaxDrainDurationSeconds (integer) - Optional. Time to wait before forcibly releasing IP addresses. DryRun (boolean) - Optional permission check. Returns: dict with NatGatewayId and details of NatGatewayAddresses."
    },
    "ec2.client.disassociate_route_table": {
        "new_func": "ec2.client.disassociate_route_table",
        "description": "Disassociates a subnet or gateway from a route table, reverting to the main route table. Parameters: AssociationId (string) - Required. The current association ID. DryRun (boolean) - Optional permission check. Returns: None."
    },
    "ec2.client.disassociate_subnet_cidr_block": {
        "new_func": "ec2.client.disassociate_subnet_cidr_block",
        "description": "Disassociates a CIDR block from a subnet, currently only IPv6 is supported. Parameters: AssociationId (string) - Required. The association ID for the CIDR block. Returns: dict with Ipv6CidrBlockAssociation and SubnetId details."
    },
    "ec2.client.disassociate_transit_gateway_multicast_domain": {
        "new_func": "ec2.client.disassociate_transit_gateway_multicast_domain",
        "description": "Disassociates specified subnets from the transit gateway multicast domain. Parameters: TransitGatewayMulticastDomainId (string) - Required. The ID of the multicast domain. TransitGatewayAttachmentId (string) - Required. The ID of the attachment. SubnetIds (list) - Required. The IDs of the subnets. DryRun (boolean) - Optional permission check. Returns: dict with details of the Associations, including TransitGatewayMulticastDomainId, TransitGatewayAttachmentId, ResourceId, ResourceType, ResourceOwnerId, and Subnets."
    },
    "ec2.client.disassociate_transit_gateway_policy_table": {
        "new_func": "ec2.client.disassociate_transit_gateway_policy_table",
        "description": "Removes the association between an attachment and a policy table. Parameters: TransitGatewayPolicyTableId (string) - Required. ID of the policy table. TransitGatewayAttachmentId (string) - Required. ID of the attachment. DryRun (boolean) - Checks permissions without making the request. Returns: dict with details of the disassociation including the IDs, ResourceId, ResourceType, and State."
    },
    "ec2.client.disassociate_transit_gateway_route_table": {
        "new_func": "ec2.client.disassociate_transit_gateway_route_table",
        "description": "Disassociates a resource attachment from a transit gateway route table. Parameters: TransitGatewayRouteTableId (string) - Required. ID of the route table. TransitGatewayAttachmentId (string) - Required. ID of the attachment. DryRun (boolean) - Checks permissions without making the request. Returns: dict with information on the association such as IDs, ResourceId, ResourceType, and State."
    },
    "ec2.client.disassociate_trunk_interface": {
        "new_func": "ec2.client.disassociate_trunk_interface",
        "description": "Removes an association between a branch network interface and a trunk network interface. Parameters: AssociationId (string) - Required. ID of the association. ClientToken (string) - Identifier to ensure idempotency. DryRun (boolean) - Checks permissions without making the request. Returns: dict indicating success with a boolean value and ClientToken."
    },
    "ec2.client.disassociate_vpc_cidr_block": {
        "new_func": "ec2.client.disassociate_vpc_cidr_block",
        "description": "Disassociates a CIDR block from a VPC using its association ID. Parameters: AssociationId (string) - Required. Association ID for the CIDR block. Returns: dict containing details about the disassociation of IPv6 and IPv4 CIDR blocks, including AssociationId, Ipv6CidrBlock, Ipv6CidrBlockState, NetworkBorderGroup, Ipv6Pool, CidrBlock, CidrBlockState, and VpcId."
    },
    "ec2.client.enable_address_transfer": {
        "new_func": "ec2.client.enable_address_transfer",
        "description": "Enables transfer of an Elastic IP address. Parameters: AllocationId (string) - Required. Allocation ID of the Elastic IP address. TransferAccountId (string) - Required. Account ID to transfer the Elastic IP address to. DryRun (boolean) - Checks permissions without making the request. Returns: dict with details of the address transfer, including PublicIp, AllocationId, TransferAccountId, TransferOfferExpirationTimestamp, TransferOfferAcceptedTimestamp, and AddressTransferStatus."
    },
    "ec2.client.enable_aws_network_performance_metric_subscription": {
        "new_func": "ec2.client.enable_aws_network_performance_metric_subscription",
        "description": "Enables network performance metric subscriptions. Parameters: Source (string) - Source Region or Availability Zone ID. Destination (string) - Target Region or Availability Zone ID. Metric (string) - Metric for subscription. Statistic (string) - Statistic for subscription. DryRun (boolean) - Checks permissions without making the request. Returns: dict with Output (boolean) indicating success."
    },
    "ec2.client.enable_ebs_encryption_by_default": {
        "new_func": "ec2.client.enable_ebs_encryption_by_default",
        "description": "Enables EBS encryption by default in the current Region. Parameters: DryRun (boolean) - Checks permissions without making the request. Returns: dict with EbsEncryptionByDefault (boolean) showing updated status."
    },
    "ec2.client.enable_fast_launch": {
        "new_func": "ec2.client.enable_fast_launch",
        "description": "Enables Windows fast launch for AMIs, using snapshots for quicker instance starts. Parameters: ImageId (string) - Required. ID of the image. ResourceType (string) - Resource type for pre-provisioning. SnapshotConfiguration (dict) - Settings for snapshot management. LaunchTemplate (dict) - Launch template for instance launch. MaxParallelLaunches (integer) - Max concurrent instances for snapshot creation. DryRun (boolean) - Checks permissions without making the request. Returns: dict with details like ImageId, ResourceType, SnapshotConfiguration, LaunchTemplate, MaxParallelLaunches, OwnerId, State, StateTransitionReason, StateTransitionTime."
    },
    "ec2.client.enable_fast_snapshot_restores": {
        "new_func": "ec2.client.enable_fast_snapshot_restores",
        "description": "Enables fast snapshot restores for specified snapshots in Availability Zones. Parameters: AvailabilityZones (list) - Required. Availability Zones for enabling. SourceSnapshotIds (list) - Required. IDs of snapshots. DryRun (boolean) - Checks permissions without making the request. Returns: dict with information of Successful and Unsuccessful enabled snapshots, including SnapshotId, AvailabilityZone, State, StateTransitionReason, OwnerId, EnablingTime, OptimizingTime, EnabledTime, DisablingTime, DisabledTime."
    },
    "ec2.client.enable_image": {
        "new_func": "ec2.client.enable_image",
        "description": "Re-enables a disabled AMI making it available for instance launches. Parameters: ImageId (string) - Required. ID of the AMI. DryRun (boolean) - Checks permissions without making the request. Returns: dict with Return (boolean) indicating if the request was successful."
    },
    "ec2.client.enable_image_block_public_access": {
        "new_func": "ec2.client.enable_image_block_public_access",
        "description": "Enables block public access for AMIs at the account level. Parameters: ImageBlockPublicAccessState (string) - Required. Set to 'block-new-sharing' to enable. DryRun (boolean) - Optional permission check. Returns: dict with 'ImageBlockPublicAccessState'."
    },
    "ec2.client.enable_image_deprecation": {
        "new_func": "ec2.client.enable_image_deprecation",
        "description": "Enables deprecation of the specified AMI at a specified date and time. Parameters: ImageId (string) - Required. AMI ID. DeprecateAt (datetime) - Required. Deprecation date and time in UTC. DryRun (boolean) - Optional permission check. Returns: dict indicating success with a boolean."
    },
    "ec2.client.enable_image_deregistration_protection": {
        "new_func": "ec2.client.enable_image_deregistration_protection",
        "description": "Enables deregistration protection for an AMI. Parameters: ImageId (string) - Required. AMI ID. WithCooldown (boolean) - Enforces 24-hour protection after disabling. DryRun (boolean) - Optional permission check. Returns: dict indicating success with a boolean."
    },
    "ec2.client.enable_ipam_organization_admin_account": {
        "new_func": "ec2.client.enable_ipam_organization_admin_account",
        "description": "Enables an Organizations member account as the IPAM admin account. Parameters: DelegatedAdminAccountId (string) - Required. Member account ID. DryRun (boolean) - Optional permission check. Returns: dict with the 'Success' status as a boolean."
    },
    "ec2.client.enable_reachability_analyzer_organization_sharing": {
        "new_func": "ec2.client.enable_reachability_analyzer_organization_sharing",
        "description": "Establishes a trust relationship between Reachability Analyzer and Organizations. Parameters: DryRun (boolean) - Optional permission check. Returns: dict with 'ReturnValue' indicating success as a boolean."
    },
    "ec2.client.enable_serial_console_access": {
        "new_func": "ec2.client.enable_serial_console_access",
        "description": "Enables EC2 serial console access for all instances in your account. Parameters: DryRun (boolean) - Optional. Checks permissions without making the request. Returns: dict with 'SerialConsoleAccessEnabled' indicating the access status."
    },
    "ec2.client.enable_snapshot_block_public_access": {
        "new_func": "ec2.client.enable_snapshot_block_public_access",
        "description": "Enables block public access for snapshots at the account level in a specific AWS Region. Parameters: State (string) - Required. Mode to block public access, either 'block-all-sharing' or 'block-new-sharing'. DryRun (boolean) - Optional. Checks permissions without making the request. Returns: dict with 'State' showing the block public access state for snapshots."
    },
    "ec2.client.enable_transit_gateway_route_table_propagation": {
        "new_func": "ec2.client.enable_transit_gateway_route_table_propagation",
        "description": "Enables route propagation to a specified propagation route table for a transit gateway attachment. Parameters: TransitGatewayRouteTableId (string) - Required. The route table ID. TransitGatewayAttachmentId (string) - The attachment ID. DryRun (boolean) - Optional. Checks permissions without the request. TransitGatewayRouteTableAnnouncementId (string) - The announcement ID. Returns: dict with 'Propagation' details including IDs, ResourceType, and State."
    },
    "ec2.client.enable_vgw_route_propagation": {
        "new_func": "ec2.client.enable_vgw_route_propagation",
        "description": "Enables a virtual private gateway (VGW) to propagate routes to a specified VPC route table. Parameters: GatewayId (string) - Required. The VGW ID. RouteTableId (string) - Required. The route table ID. DryRun (boolean) - Optional. Checks permissions without the request. Returns: None."
    },
    "ec2.client.enable_volume_io": {
        "new_func": "ec2.client.enable_volume_io",
        "description": "Enables I/O operations for a volume with potentially inconsistent data. Parameters: DryRun (boolean) - Optional. Checks permissions without the request. VolumeId (string) - Required. The volume ID. Returns: None."
    },
    "ec2.client.enable_vpc_classic_link": {
        "new_func": "ec2.client.enable_vpc_classic_link",
        "description": "Deprecated. Enables a VPC for ClassicLink to link EC2-Classic instances. Parameters: DryRun (boolean) - Checks permissions without making request. VpcId (string) - Required. The ID of the VPC. Returns: dict with 'Return' indicating request success."
    },
    "ec2.client.enable_vpc_classic_link_dns_support": {
        "new_func": "ec2.client.enable_vpc_classic_link_dns_support",
        "description": "Deprecated. Enables DNS hostname resolution for ClassicLink in a VPC. Parameters: VpcId (string) - The ID of the VPC. Returns: dict with 'Return' indicating request success."
    },
    "ec2.client.export_client_vpn_client_certificate_revocation_list": {
        "new_func": "ec2.client.export_client_vpn_client_certificate_revocation_list",
        "description": "Downloads the certificate revocation list for a Client VPN endpoint. Parameters: ClientVpnEndpointId (string) - Required. The ID of the Client VPN endpoint. DryRun (boolean) - Checks permissions without making request. Returns: dict with 'CertificateRevocationList' and 'Status' containing code and message."
    },
    "ec2.client.export_client_vpn_client_configuration": {
        "new_func": "ec2.client.export_client_vpn_client_configuration",
        "description": "Downloads the Client VPN endpoint configuration file. Parameters: ClientVpnEndpointId (string) - Required. The ID of the Client VPN endpoint. DryRun (boolean) - Checks permissions without making request. Returns: dict with 'ClientConfiguration' containing the configuration file content."
    },
    "ec2.client.export_image": {
        "new_func": "ec2.client.export_image",
        "description": "Exports an AMI to a VM file. Parameters: ClientToken (string) - Enables idempotency. Description (string) - Description of the image. DiskImageFormat (string) - Required. The disk image format. DryRun (boolean) - Checks permissions without making request. ImageId (string) - Required. The ID of the image. S3ExportLocation (dict) - Required. Amazon S3 bucket details. RoleName (string) - Role granting permission to export. TagSpecifications (list) - Tags to apply on creation. Returns: dict with 'Description', 'DiskImageFormat', 'ExportImageTaskId', 'ImageId', 'RoleName', 'Progress', 'S3ExportLocation', 'Status', 'StatusMessage', and 'Tags'."
    },
    "ec2.client.export_transit_gateway_routes": {
        "new_func": "ec2.client.export_transit_gateway_routes",
        "description": "Exports transit gateway routes to an S3 bucket. Parameters: TransitGatewayRouteTableId (string) - Required. ID of the route table. Filters (list) - Filters for the routes to export. S3Bucket (string) - Required. Name of the S3 bucket. DryRun (boolean) - Checks permissions without making the request. Returns: dict with 'S3Location' (string) - URL of the exported file in S3."
    },
    "ec2.client.get_associated_enclave_certificate_iam_roles": {
        "new_func": "ec2.client.get_associated_enclave_certificate_iam_roles",
        "description": "Returns IAM roles associated with an ACM certificate and S3 storage and encryption details. Parameters: CertificateArn (string) - Required. ARN of the ACM certificate. DryRun (boolean) - Checks permissions without making the request. Returns: dict with 'AssociatedRoles' (list) - IAM roles and S3 and encryption details."
    },
    "ec2.client.get_associated_ipv6_pool_cidrs": {
        "new_func": "ec2.client.get_associated_ipv6_pool_cidrs",
        "description": "Gets IPv6 CIDR block associations for a specified IPv6 address pool. Parameters: PoolId (string) - Required. ID of the IPv6 pool. Returns: dict with association details."
    },
    "ec2.client.get_aws_network_performance_data": {
        "new_func": "ec2.client.get_aws_network_performance_data",
        "description": "Gets network performance data based on provided queries. Parameters: DataQueries (list) - Queries for the network performance data. StartTime (datetime) - Start time for the data retrieval. EndTime (datetime) - End time for the data retrieval. MaxResults (integer) - Maximum number of results to return. Returns: dict with network performance data."
    },
    "ec2.client.get_capacity_reservation_usage": {
        "new_func": "ec2.client.get_capacity_reservation_usage",
        "description": "Gets usage information for a Capacity Reservation. Parameters: CapacityReservationId (string) - Required. ID of the Capacity Reservation. Returns: dict with usage information for the Capacity Reservation."
    },
    "ec2.client.get_coip_pool_usage": {
        "new_func": "ec2.client.get_coip_pool_usage",
        "description": "Describes allocations from a customer-owned address pool. Parameters: PoolId (string) - The pool ID. Filters (list of dicts) - Filters to apply. MaxResults (integer) - The maximum number of results to return. Returns: dict with allocation information."
    },
    "ec2.client.get_console_output": {
        "new_func": "ec2.client.get_console_output",
        "description": "Gets the console output for a specified instance, which can be Linux or Windows-based. Parameters: InstanceId (string) - Required. The instance ID. DryRun (boolean) - Check permissions without making the request. Latest (boolean) - Retrieve the latest console output. Returns: dict with InstanceId, Output (base64-encoded), and Timestamp."
    },
    "ec2.client.get_console_screenshot": {
        "new_func": "ec2.client.get_console_screenshot",
        "description": "Retrieves a JPG-format screenshot of a running instance for troubleshooting. Parameters: DryRun (boolean) - Check permissions without making the request. InstanceId (string) - Required. The instance ID. WakeUp (boolean) - Wakes up an instance in standby or 'sleep' mode. Returns: dict with ImageData (base64-encoded) and InstanceId."
    },
    "ec2.client.get_default_credit_specification": {
        "new_func": "ec2.client.get_default_credit_specification",
        "description": "Describes the default credit option for CPU usage of a burstable performance instance family. Parameters: DryRun (boolean) - Check permissions without making the request. InstanceFamily (string) - Required. The instance family (t2, t3, t3a, t4g). Returns: dict with InstanceFamilyCreditSpecification, including InstanceFamily and CpuCredits."
    },
    "ec2.client.get_ebs_default_kms_key_id": {
        "new_func": "ec2.client.get_ebs_default_kms_key_id",
        "description": "Describes the default KMS key for EBS encryption by default for the account in the region. Parameters: DryRun (boolean) - Check permissions without making the request. Returns: dict with KmsKeyId, the ARN of the default KMS key."
    },
    "ec2.client.get_ebs_encryption_by_default": {
        "new_func": "ec2.client.get_ebs_encryption_by_default",
        "description": "Checks if EBS encryption by default is enabled for your account in the current Region. Parameters: DryRun (boolean) - Optional. Return type: dict. Returns: EbsEncryptionByDefault (boolean) - Indicates if encryption is enabled, SseType (string) - Reserved for future use."
    },
    "ec2.client.get_flow_logs_integration_template": {
        "new_func": "ec2.client.get_flow_logs_integration_template",
        "description": "Generates a CloudFormation template for VPC flow logs and Athena integration. Parameters: DryRun (boolean) - Optional, FlowLogId (string) - Required, ConfigDeliveryS3DestinationArn (string) - Required, IntegrateServices (dict) - Required with AthenaIntegrations (list) specifying S3 destination, partition frequency, start and end dates. Return type: dict. Returns: Result (string) - The generated CloudFormation template."
    },
    "ec2.client.get_groups_for_capacity_reservation": {
        "new_func": "ec2.client.get_groups_for_capacity_reservation",
        "description": "Lists resource groups linked to a Capacity Reservation. Parameters: CapacityReservationId (string) - Required. Return type: dict. Returns: Information about the linked resource groups."
    },
    "ec2.client.get_host_reservation_purchase_preview": {
        "new_func": "ec2.client.get_host_reservation_purchase_preview",
        "description": "Previews a reservation purchase for Dedicated Hosts. Parameters: HostIdSet (list of strings) - Required, OfferingId (string) - Required. Return type: dict. Returns: Purchase details including CurrencyCode, Duration, HostIdSet, HostReservationId, HourlyPrice, InstanceFamily, PaymentOption, UpfrontPrice, TotalHourlyPrice, and TotalUpfrontPrice."
    },
    "ec2.client.get_image_block_public_access_state": {
        "new_func": "ec2.client.get_image_block_public_access_state",
        "description": "Gets the block public access state for AMIs at the account level in the specified AWS Region. Parameters: DryRun (boolean) - Optional. Return type: dict. Returns: ImageBlockPublicAccessState (string) - The current state, either 'block-new-sharing' or 'unblocked'."
    },
    "ec2.client.get_instance_metadata_defaults": {
        "new_func": "ec2.client.get_instance_metadata_defaults",
        "description": "Gets the default instance metadata service (IMDS) settings at the account level. Parameters: DryRun (boolean) - Checks permissions without making the request. Returns: dict with 'AccountLevel' containing 'HttpTokens', 'HttpPutResponseHopLimit', 'HttpEndpoint', 'InstanceMetadataTags'."
    },
    "ec2.client.get_instance_tpm_ek_pub": {
        "new_func": "ec2.client.get_instance_tpm_ek_pub",
        "description": "Gets the public endorsement key of the Nitro TPM for a specified instance. Parameters: InstanceId (string) - Required. ID of the instance. KeyType (string) - Required. Type of the public key. KeyFormat (string) - Required. Format of the public key. DryRun (boolean) - Checks permissions without making the request. Returns: dict with 'InstanceId', 'KeyType', 'KeyFormat', 'KeyValue'."
    },
    "ec2.client.get_instance_types_from_instance_requirements": {
        "new_func": "ec2.client.get_instance_types_from_instance_requirements",
        "description": "Returns a list of instance types with specified attributes. Parameters: DryRun (boolean) - Checks permissions without making the request. ArchitectureTypes (list) - CPU architectures. VirtualizationTypes (list) - Types of virtualization. InstanceRequirements (dict) - Detailed requirements like 'VCpuCount', 'MemoryMiB', etc. MaxResults (integer) - Pagination limit. Returns: dict with a list of suitable instance types."
    },
    "ec2.client.get_instance_uefi_data": {
        "new_func": "ec2.client.get_instance_uefi_data",
        "description": "Retrieves the UEFI data of an instance. Parameters: InstanceId (string) - Required. ID of the instance. DryRun (boolean) - Checks permissions without making the request. Returns: dict with 'InstanceId' and 'UefiData' containing the base64 encoded UEFI variable store."
    },
    "ec2.client.get_ipam_address_history": {
        "new_func": "ec2.client.get_ipam_address_history",
        "description": "Retrieve historical information about a CIDR within an IPAM scope. Parameters: DryRun (boolean) - Checks permissions without making the request. Cidr (string) - The CIDR to get history for. IpamScopeId (string) - The scope of the IPAM. VpcId (string) - ID of the VPC. StartTime (datetime) - Start time for the history lookup. EndTime (datetime) - End time for the history lookup. MaxResults (integer) - Pagination limit. Returns: dict with historical data about the specified CIDR."
    },
    "ec2.client.get_ipam_discovered_accounts": {
        "new_func": "ec2.client.get_ipam_discovered_accounts",
        "description": "Retrieves IPAM discovered accounts, which are AWS accounts monitored under a resource discovery. Parameters: DryRun (boolean) - Optional. Checks permissions without making the request. IpamResourceDiscoveryId (string) - Identifier for the resource discovery. DiscoveryRegion (string) - Region where discovery occurs. Filters (list) - Filters for the discovery search."
    },
    "ec2.client.get_ipam_discovered_public_addresses": {
        "new_func": "ec2.client.get_ipam_discovered_public_addresses",
        "description": "Fetches public IP addresses discovered by IPAM. Parameters: DryRun (boolean) - Optional. Checks permissions without making the request. IpamResourceDiscoveryId (string) - Identifier for the resource discovery. AddressRegion (string) - Region where the address is located. Filters (list) - Filters for the discovery search."
    },
    "ec2.client.get_ipam_discovered_resource_cidrs": {
        "new_func": "ec2.client.get_ipam_discovered_resource_cidrs",
        "description": "Returns the resource CIDRs monitored by a resource discovery, including VPCs, public IPv4 pools, VPC subnets, and Elastic IPs. Parameters: DryRun (boolean) - Optional. Checks permissions without making the request. IpamResourceDiscoveryId (string) - Identifier for the resource discovery. ResourceRegion (string) - Region where the resource is located. Filters (list) - Filters for the discovery search."
    },
    "ec2.client.get_ipam_pool_allocations": {
        "new_func": "ec2.client.get_ipam_pool_allocations",
        "description": "Lists all CIDR allocations in an IPAM pool. Parameters: DryRun (boolean) - Optional. Checks permissions without making the request. IpamPoolId (string) - Required. The IPAM pool ID. IpamPoolAllocationId (string) - Identifier for the pool allocation. Filters (list) - Filters for the allocation search. MaxResults (integer) - Optional. The maximum number of results to return."
    },
    "ec2.client.get_ipam_pool_cidrs": {
        "new_func": "ec2.client.get_ipam_pool_cidrs",
        "description": "Retrieves the CIDRs provisioned to an IPAM pool. Parameters: DryRun (boolean) - Optional. Checks permissions without making the request. IpamPoolId (string) - Required. The IPAM pool ID. Filters (list) - Filters for the CIDR search. MaxResults (integer) - Optional. The maximum number of results to return."
    },
    "ec2.client.get_ipam_resource_cidrs": {
        "new_func": "ec2.client.get_ipam_resource_cidrs",
        "description": "Retrieves resource CIDRs managed by IPAM in a given scope. Parameters: DryRun (boolean) - Checks permissions without making the request. Filters (list) - Filters for results. MaxResults (integer) - Maximum results to return. Returns: List of resource CIDRs."
    },
    "ec2.client.get_launch_template_data": {
        "new_func": "ec2.client.get_launch_template_data",
        "description": "Retrieves configuration data of the specified instance to create a launch template. Parameters: DryRun (boolean) - Checks permissions without making the request. InstanceId (string) - Required. ID of the instance. Returns: dict with the instance's launch template data."
    },
    "ec2.client.get_managed_prefix_list_associations": {
        "new_func": "ec2.client.get_managed_prefix_list_associations",
        "description": "Gets information about resources associated with the specified managed prefix list. Parameters: DryRun (boolean) - Checks permissions without making the request. PrefixListId (string) - Required. ID of the prefix list. MaxResults (integer) - Maximum results to return."
    },
    "ec2.client.get_managed_prefix_list_entries": {
        "new_func": "ec2.client.get_managed_prefix_list_entries",
        "description": "Gets information about entries for the specified managed prefix list. Parameters: DryRun (boolean) - Checks permissions without making the request. PrefixListId (string) - Required. ID of the prefix list. TargetVersion (integer) - Specific version of the prefix list. MaxResults (integer) - Maximum results to return."
    },
    "ec2.client.get_network_insights_access_scope_analysis_findings": {
        "new_func": "ec2.client.get_network_insights_access_scope_analysis_findings",
        "description": "Gets findings for a specified Network Access Scope analysis. Parameters: NetworkInsightsAccessScopeAnalysisId (string) - Required. ID of the network insights analysis. MaxResults (integer) - Maximum results to return."
    },
    "ec2.client.get_network_insights_access_scope_content": {
        "new_func": "ec2.client.get_network_insights_access_scope_content",
        "description": "Retrieves the content for a specified Network Access Scope. Parameters: NetworkInsightsAccessScopeId (string) - Required. The ID of the Network Access Scope. DryRun (boolean) - Checks permissions without making the request. Returns: dict containing 'NetworkInsightsAccessScopeContent' with details of MatchPaths and ExcludePaths."
    },
    "ec2.client.get_paginator": {
        "new_func": "ec2.client.get_paginator",
        "description": "Creates a paginator for an operation. Parameters: operation_name (string) - The operation name. Raises: OperationNotPageableError if the operation is not pageable. Returns: Paginator object."
    },
    "ec2.client.get_password_data": {
        "new_func": "ec2.client.get_password_data",
        "description": "Retrieves the encrypted administrator password for a running Windows instance. Parameters: InstanceId (string) - Required. The ID of the Windows instance. DryRun (boolean) - Checks permissions without making the request. Returns: dict with 'InstanceId', 'PasswordData', and 'Timestamp'."
    },
    "ec2.client.get_reserved_instances_exchange_quote": {
        "new_func": "ec2.client.get_reserved_instances_exchange_quote",
        "description": "Gets a quote for exchanging one or more Convertible Reserved Instances for a new one. Parameters: DryRun (boolean) - Checks permissions without making the request. ReservedInstanceIds (list) - Required. The IDs to exchange. TargetConfigurations (list) - Configurations for the target Convertible Reserved Instances. Returns: dict with exchange information including 'CurrencyCode', 'IsValidExchange', 'OutputReservedInstancesWillExpireAt', 'PaymentDue', 'ReservedInstanceValueRollup', 'ReservedInstanceValueSet', 'TargetConfigurationValueRollup', 'TargetConfigurationValueSet', and 'ValidationFailureReason'."
    },
    "ec2.client.get_security_groups_for_vpc": {
        "new_func": "ec2.client.get_security_groups_for_vpc",
        "description": "Gets security groups that can be associated with network interfaces in the specified VPC. Parameters: VpcId (string) - Required. The ID of the VPC. Returns: Response with security group details."
    },
    "ec2.client.get_serial_console_access_status": {
        "new_func": "ec2.client.get_serial_console_access_status",
        "description": "Checks the access status of the account to the EC2 serial console. Parameters: DryRun (boolean) - Optional. Checks permissions without making the request. Returns: dict with 'SerialConsoleAccessEnabled' (boolean) indicating if access is enabled."
    },
    "ec2.client.get_snapshot_block_public_access_state": {
        "new_func": "ec2.client.get_snapshot_block_public_access_state",
        "description": "Gets the state of block public access for snapshots for the account and region. Parameters: DryRun (boolean) - Optional. Checks permissions without making the request. Returns: dict with 'State' (string) indicating the block public access state."
    },
    "ec2.client.get_spot_placement_scores": {
        "new_func": "ec2.client.get_spot_placement_scores",
        "description": "Calculates Spot placement score based on target capacity and compute requirements. Parameters: InstanceTypes (list of strings) - Optional. TargetCapacity (integer) - Required. TargetCapacityUnitType (string) - Required. SingleAvailabilityZone (boolean) - Optional. RegionNames (list of strings) - Optional. InstanceRequirementsWithMetadata (dict) - Optional. DryRun (boolean) - Optional. Checks permissions. MaxResults (integer) - Optional. Returns: dict with placement scores."
    },
    "ec2.client.get_subnet_cidr_reservations": {
        "new_func": "ec2.client.get_subnet_cidr_reservations",
        "description": "Retrieves information about the subnet CIDR reservations. Parameters: Filters (list of dicts) - Optional. SubnetId (string) - Required. DryRun (boolean) - Optional. Checks permissions without making the request."
    },
    "ec2.client.get_transit_gateway_attachment_propagations": {
        "new_func": "ec2.client.get_transit_gateway_attachment_propagations",
        "description": "Lists the route tables to which a transit gateway attachment propagates routes. Parameters: TransitGatewayAttachmentId (string) - Required. Filters (list of dicts) - Optional. MaxResults (integer) - Optional."
    },
    "ec2.client.get_transit_gateway_multicast_domain_associations": {
        "new_func": "ec2.client.get_transit_gateway_multicast_domain_associations",
        "description": "Retrieves associations for a transit gateway multicast domain. Parameters: TransitGatewayMulticastDomainId (string) - The ID of the domain. Filters (list) - Search criteria. MaxResults (integer) - Maximum number of results to return. Returns: List of multicast domain associations."
    },
    "ec2.client.get_transit_gateway_policy_table_associations": {
        "new_func": "ec2.client.get_transit_gateway_policy_table_associations",
        "description": "Gets a list of transit gateway policy table associations. Parameters: TransitGatewayPolicyTableId (string) - The ID of the policy table. Filters (list) - Search criteria. MaxResults (integer) - The maximum number of results to return. Returns: List of policy table associations."
    },
    "ec2.client.get_transit_gateway_policy_table_entries": {
        "new_func": "ec2.client.get_transit_gateway_policy_table_entries",
        "description": "Returns entries from a transit gateway policy table. Parameters: TransitGatewayPolicyTableId (string) - The ID of the policy table. Filters (list) - Criteria to filter results. MaxResults (integer) - The maximum number of results to return. Returns: List of policy table entries."
    },
    "ec2.client.get_transit_gateway_prefix_list_references": {
        "new_func": "ec2.client.get_transit_gateway_prefix_list_references",
        "description": "Fetches prefix list references in a specified transit gateway route table. Parameters: TransitGatewayRouteTableId (string) - Route table ID. Filters (list) - Criteria for filtering results. MaxResults (integer) - Maximum number of results to return. Returns: List of prefix list references."
    },
    "ec2.client.get_transit_gateway_route_table_associations": {
        "new_func": "ec2.client.get_transit_gateway_route_table_associations",
        "description": "Gets associations for a specific transit gateway route table. Parameters: TransitGatewayRouteTableId (string) - The route table ID. Filters (list) - Search filters. MaxResults (integer) - The maximum number of results to return. Returns: List of route table associations."
    },
    "ec2.client.get_transit_gateway_route_table_propagations": {
        "new_func": "ec2.client.get_transit_gateway_route_table_propagations",
        "description": "Retrieves route table propagations for a specified transit gateway route table. Parameters: TransitGatewayRouteTableId (string) - Required. The ID of the transit gateway route table. Filters (list) - Filters for the propagations. MaxResults (integer) - The maximum number of results to return. Returns: dict with route table propagations."
    },
    "ec2.client.get_verified_access_endpoint_policy": {
        "new_func": "ec2.client.get_verified_access_endpoint_policy",
        "description": "Gets the Verified Access policy for a specified endpoint. Parameters: VerifiedAccessEndpointId (string) - Required. The ID of the Verified Access endpoint. DryRun (boolean) - Checks permissions without making the request. Returns: dict with PolicyEnabled (boolean) and PolicyDocument (string)."
    },
    "ec2.client.get_verified_access_group_policy": {
        "new_func": "ec2.client.get_verified_access_group_policy",
        "description": "Displays the Verified Access policy for a specified group. Parameters: VerifiedAccessGroupId (string) - Required. The ID of the Verified Access group. DryRun (boolean) - Checks permissions without making the request. Returns: dict with PolicyEnabled (boolean) and PolicyDocument (string)."
    },
    "ec2.client.get_vpn_connection_device_sample_configuration": {
        "new_func": "ec2.client.get_vpn_connection_device_sample_configuration",
        "description": "Downloads a sample configuration file for a specified customer gateway device for a Site-to-Site VPN connection. Parameters: VpnConnectionId (string) - Required. The ID of the VPN connection. VpnConnectionDeviceTypeId (string) - Required. The device type ID. InternetKeyExchangeVersion (string) - The IKE version. DryRun (boolean) - Checks permissions without making the request. Returns: dict with VpnConnectionDeviceSampleConfiguration (string)."
    },
    "ec2.client.get_vpn_connection_device_types": {
        "new_func": "ec2.client.get_vpn_connection_device_types",
        "description": "Lists customer gateway devices eligible for sample configuration files. Parameters: MaxResults (integer) - The maximum number of results to return. Returns: dict with a list of customer gateway device types."
    },
    "ec2.client.get_vpn_tunnel_replacement_status": {
        "new_func": "ec2.client.get_vpn_tunnel_replacement_status",
        "description": "Retrieves the status of the VPN tunnel endpoint replacement. Parameters: VpnConnectionId (string) - Required. The ID of the Site-to-Site VPN connection. VpnTunnelOutsideIpAddress (string) - Required. The external IP address of the VPN tunnel. DryRun (boolean) - Checks permissions without the request. Returns: dict with VpnConnectionId, TransitGatewayId, CustomerGatewayId, VpnGatewayId, VpnTunnelOutsideIpAddress, and MaintenanceDetails containing PendingMaintenance, MaintenanceAutoAppliedAfter, and LastMaintenanceApplied."
    },
    "ec2.client.get_waiter": {
        "new_func": "ec2.client.get_waiter",
        "description": "Gets a waiter object that waits for a state specified by the given name. Parameters: waiter_name (str) - The name of the waiter. Returns: botocore.waiter.Waiter object."
    },
    "ec2.client.import_client_vpn_client_certificate_revocation_list": {
        "new_func": "ec2.client.import_client_vpn_client_certificate_revocation_list",
        "description": "Uploads a client certificate revocation list to a Client VPN endpoint, overwriting the existing list and resetting existing client connections. Parameters: ClientVpnEndpointId (string) - Required. The ID of the Client VPN endpoint. CertificateRevocationList (string) - Required. The client certificate revocation list file. DryRun (boolean) - Checks permissions without the request. Returns: dict with a boolean indicating success or failure."
    },
    "ec2.client.import_image": {
        "new_func": "ec2.client.import_image",
        "description": "Imports disk images or EBS snapshots into an Amazon Machine Image (AMI). Parameters: Architecture (string), ClientData (dict), ClientToken (string), Description (string), DiskContainers (list), DryRun (boolean), Encrypted (boolean), Hypervisor (string), KmsKeyId (string), LicenseType (string), Platform (string), RoleName (string), LicenseSpecifications (list), TagSpecifications (list), UsageOperation (string), BootMode (string). Returns: dict with Architecture, Description, Encrypted, Hypervisor, ImageId, ImportTaskId, KmsKeyId, LicenseType, Platform, Progress, SnapshotDetails, Status, StatusMessage, LicenseSpecifications, Tags, and UsageOperation."
    },
    "ec2.client.import_instance": {
        "new_func": "ec2.client.import_instance",
        "description": "Creates an import instance task using metadata from specified disk image. Parameters: Description (string), DiskImages (list), DryRun (boolean), LaunchSpecification (dict), Platform (string) - Required. Returns: dict with ConversionTask containing ConversionTaskId, ExpirationTime, ImportInstance, ImportVolume, State, StatusMessage, and Tags."
    },
    "ec2.client.import_key_pair": {
        "new_func": "ec2.client.import_key_pair",
        "description": "Imports a public key from an RSA or ED25519 key pair. Parameters: DryRun (boolean) - Checks permissions without the request. KeyName (string) - Required. Unique name for the key pair. PublicKeyMaterial (bytes) - Required. Base64-encoded public key. TagSpecifications (list) - Tags for the key pair. Returns: dict with KeyFingerprint, KeyName, KeyPairId, and Tags."
    },
    "ec2.client.import_snapshot": {
        "new_func": "ec2.client.import_snapshot",
        "description": "Imports a disk into an EBS snapshot. Parameters: ClientData (dict) - Client-specific data with Comment, UploadEnd, UploadSize, UploadStart. ClientToken (string) - Idempotency token. Description (string) - Snapshot description. DiskContainer (dict) - Disk image information with Description, Format, Url, UserBucket. DryRun (boolean) - Checks permissions without the request. Encrypted (boolean) - Whether the snapshot is encrypted. KmsKeyId (string) - KMS key identifier. RoleName (string) - Role for the import task. TagSpecifications (list) - Tags for the import snapshot task. Returns: dict with Description, ImportTaskId, SnapshotTaskDetail, and Tags."
    },
    "ec2.client.import_volume": {
        "new_func": "ec2.client.import_volume",
        "description": "Creates an import volume task from a disk image. Parameters: AvailabilityZone (string) - Required. Zone for the EBS volume. Description (string) - Volume description. DryRun (boolean) - Checks permissions without the request. Image (dict) - Required. Disk image information with Bytes, Format, ImportManifestUrl. Volume (dict) - Required. Volume size information with Size. Returns: dict with ConversionTask information including ConversionTaskId, ExpirationTime, ImportInstance, ImportVolume, State, StatusMessage, and Tags."
    },
    "ec2.client.list_images_in_recycle_bin": {
        "new_func": "ec2.client.list_images_in_recycle_bin",
        "description": "Lists AMIs currently in the Recycle Bin. Parameters: ImageIds (list) - Optional. AMI IDs to list. Returns: None specified in the provided description."
    },
    "ec2.client.list_snapshots_in_recycle_bin": {
        "new_func": "ec2.client.list_snapshots_in_recycle_bin",
        "description": "Lists snapshots currently in the Recycle Bin. Parameters: MaxResults (integer) - Optional. Maximum number of results to return. Returns: None specified in the provided description."
    },
    "ec2.client.lock_snapshot": {
        "new_func": "ec2.client.lock_snapshot",
        "description": "Locks an EBS snapshot, preventing deletion. Parameters: SnapshotId (string) - Required. ID of the snapshot. DryRun (boolean) - Checks permissions without making the request. LockMode (string) - Required. 'compliance' or 'governance'. CoolOffPeriod (integer) - Cooling-off period in hours for compliance mode. LockDuration (integer) - Lock duration in days. ExpirationDate (datetime) - UTC time when the lock expires. Returns: dict with snapshot lock details including SnapshotId, LockState, LockDuration, CoolOffPeriod, dates for CoolOffPeriodExpiresOn, LockCreatedOn, LockExpiresOn, and LockDurationStartTime."
    },
    "ec2.client.modify_address_attribute": {
        "new_func": "ec2.client.modify_address_attribute",
        "description": "Modifies an attribute of an Elastic IP address. Parameters: AllocationId (string) - Required. Allocation ID for the EIP. DomainName (string) - Domain name to modify. DryRun (boolean) - Checks permissions without making the request. Returns: dict with updated information about the Elastic IP address, including PublicIp, AllocationId, PtrRecord, and PtrRecordUpdate with Value, Status, and Reason."
    },
    "ec2.client.modify_availability_zone_group": {
        "new_func": "ec2.client.modify_availability_zone_group",
        "description": "Changes opt-in status of a zone group. Parameters: GroupName (string) - Required. Name of the zone group. OptInStatus (string) - Required. 'opted-in' to opt-in to the group. DryRun (boolean) - Checks permissions without making the request. Returns: dict with a boolean 'Return' indicating if the request succeeded."
    },
    "ec2.client.modify_capacity_reservation": {
        "new_func": "ec2.client.modify_capacity_reservation",
        "description": "Modifies a Capacity Reservation's capacity and release conditions. Parameters: CapacityReservationId (string) - Required. ID of the reservation. InstanceCount (integer) - Number of instances to reserve. EndDate (datetime) - UTC time when the reservation expires. EndDateType (string) - 'unlimited' or 'limited'. Accept (boolean) - Reserved. DryRun (boolean) - Checks permissions without making the request. AdditionalInfo (string) - Reserved. Returns: dict with a boolean 'Return' indicating if the request succeeded."
    },
    "ec2.client.modify_capacity_reservation_fleet": {
        "new_func": "ec2.client.modify_capacity_reservation_fleet",
        "description": "Modifies a Capacity Reservation Fleet. Parameters: CapacityReservationFleetId (string) - Required. ID of the Fleet. TotalTargetCapacity (integer) - Total capacity units to reserve. EndDate (datetime) - UTC time when the Fleet expires. DryRun (boolean) - Checks permissions without making the request. RemoveEndDate (boolean) - Indicates whether to remove the end date. Returns: dict with a boolean 'Return' indicating if the request succeeded."
    },
    "ec2.client.modify_client_vpn_endpoint": {
        "new_func": "ec2.client.modify_client_vpn_endpoint",
        "description": "Modifies a Client VPN endpoint. Parameters: ClientVpnEndpointId (string) - Required. The ID of the endpoint. ServerCertificateArn (string) - The ARN of the server certificate. ConnectionLogOptions (dict) - Options for connection logging. DnsServers (dict) - Information about DNS servers. VpnPort (integer) - The port number for the VPN. Description (string) - Description of the endpoint. SplitTunnel (boolean) - If the VPN is split-tunnel. DryRun (boolean) - Checks permissions without making the request. SecurityGroupIds (list) - Security group IDs. VpcId (string) - The ID of the VPC. SelfServicePortal (string) - Enable/disable self-service portal. ClientConnectOptions (dict) - Options for connection authorization. SessionTimeoutHours (integer) - Maximum session duration. ClientLoginBannerOptions (dict) - Options for a customizable text banner. Returns: dict with 'Return' (boolean) indicating success or failure."
    },
    "ec2.client.modify_default_credit_specification": {
        "new_func": "ec2.client.modify_default_credit_specification",
        "description": "Modifies the default credit option for CPU usage of burstable performance instances. Parameters: DryRun (boolean) - Checks permissions without making the request. InstanceFamily (string) - Required. The instance family. CpuCredits (string) - Required. The credit option for CPU usage. Returns: dict with 'InstanceFamilyCreditSpecification' containing 'InstanceFamily' (string) and 'CpuCredits' (string)."
    },
    "ec2.client.modify_ebs_default_kms_key_id": {
        "new_func": "ec2.client.modify_ebs_default_kms_key_id",
        "description": "Changes the default KMS key for EBS encryption for your account in this Region. Parameters: KmsKeyId (string) - Required. The identifier of the KMS key for EBS encryption. DryRun (boolean) - Checks permissions without making the request. Returns: dict with 'KmsKeyId' (string)."
    },
    "ec2.client.modify_fleet": {
        "new_func": "ec2.client.modify_fleet",
        "description": "Modifies the specified EC2 Fleet. Can only modify EC2 Fleets of type 'maintain'. Parameters: DryRun (boolean) - Checks permissions without making the request. ExcessCapacityTerminationPolicy (string) - Termination policy for excess capacity. LaunchTemplateConfigs (list) - The launch template configurations. FleetId (string) - Required. The ID of the EC2 Fleet. TargetCapacitySpecification (dict) - The size of the EC2 Fleet. Context (string) - Reserved. Returns: dict with 'Return' (boolean) indicating success or failure."
    },
    "ec2.client.modify_fpga_image_attribute": {
        "new_func": "ec2.client.modify_fpga_image_attribute",
        "description": "Modifies an attribute of an Amazon FPGA Image (AFI). Parameters: DryRun (boolean) - Checks permissions without making the request. FpgaImageId (string) - Required. The ID of the AFI. Attribute (string) - The attribute to modify. OperationType (string) - The operation type ('add' or 'remove'). UserIds (list) - AWS account IDs when modifying the 'loadPermission' attribute. UserGroups (list) - User groups when modifying the 'loadPermission' attribute. ProductCodes (list) - Product codes when modifying the 'productCodes' attribute. LoadPermission (dict) - The load permission for the AFI. Description (string) - A description for the AFI. Name (string) - A name for the AFI. Returns: dict with 'FpgaImageAttribute' containing AFI attributes."
    },
    "ec2.client.modify_hosts": {
        "new_func": "ec2.client.modify_hosts",
        "description": "Modifies the auto-placement and host recovery settings of a Dedicated Host, and the instance types it supports. Parameters: AutoPlacement (string) - Enable or disable auto-placement. HostIds (list) - IDs of the Dedicated Hosts to modify. HostRecovery (string) - Enable or disable host recovery. InstanceType (string) - Instance type to be supported. InstanceFamily (string) - Instance family to be supported. HostMaintenance (string) - Enable or disable host maintenance. Returns: dict with Successful and Unsuccessful modifications, including error codes and messages."
    },
    "ec2.client.modify_id_format": {
        "new_func": "ec2.client.modify_id_format",
        "description": "Modifies the ID format for the specified resource on a per-Region basis to use longer IDs. Parameters: Resource (string) - Type of resource to modify. UseLongIds (boolean) - Whether the resource should use longer IDs. Returns: None"
    },
    "ec2.client.modify_identity_id_format": {
        "new_func": "ec2.client.modify_identity_id_format",
        "description": "Modifies the ID format of a resource for specified IAM users, roles, or account. Parameters: PrincipalArn (string) - ARN of the principal or 'all' for all IAM users, roles, and root user. Resource (string) - Type of resource to modify. UseLongIds (boolean) - Whether the resource should use longer IDs. Returns: None"
    },
    "ec2.client.modify_image_attribute": {
        "new_func": "ec2.client.modify_image_attribute",
        "description": "Modifies an attribute of an AMI, such as description, launch permissions, or IMDS support. Parameters: Attribute (string) - Attribute to modify. Description (dict) - New description for AMI. ImageId (string) - AMI ID. LaunchPermission (dict) - New launch permission for the AMI. OperationType (string) - Type of operation for launch permissions. UserGroups, UserIds, OrganizationArns, OrganizationalUnitArns (lists) - User groups and IDs for launch permissions. ImdsSupport (dict) - Enable IMDSv2. DryRun (boolean) - Check permissions without making the request. Returns: None"
    },
    "ec2.client.modify_instance_attribute": {
        "new_func": "ec2.client.modify_instance_attribute",
        "description": "Modifies an attribute of a specified instance, such as instance type, kernel, or RAM disk. Parameters: Attribute (string) - Attribute to modify. BlockDeviceMappings (list) - Modifies volume attributes. DisableApiTermination (dict) - Enables or disables termination protection. EbsOptimized (dict) - Specifies EBS I/O optimization. EnaSupport (dict) - Enables enhanced networking with ENA. Groups (list) - Security groups for the instance. InstanceId (string) - ID of the instance. InstanceInitiatedShutdownBehavior (dict) - Shutdown behavior. InstanceType (dict) - Changes the instance type. Kernel, Ramdisk, SriovNetSupport (dicts) - Change kernel, RAM disk, or SR-IOV networking. UserData (dict) - Changes the user data. Value (string) - New value for the attribute. DisableApiStop (dict) - Enables or disables stop protection. Returns: None"
    },
    "ec2.client.modify_instance_capacity_reservation_attributes": {
        "new_func": "ec2.client.modify_instance_capacity_reservation_attributes",
        "description": "Modifies Capacity Reservation settings for a stopped instance. Parameters: InstanceId (string) - Required. The ID of the instance. CapacityReservationSpecification (dict) - Required. Details about the Capacity Reservation targeting option, including 'CapacityReservationPreference' (string) and 'CapacityReservationTarget' (dict) with 'CapacityReservationId' (string) and 'CapacityReservationResourceGroupArn' (string). DryRun (boolean) - Optional. Checks permissions without making the request. Returns: dict containing 'Return' (boolean) indicating if the request succeeded."
    },
    "ec2.client.modify_instance_credit_specification": {
        "new_func": "ec2.client.modify_instance_credit_specification",
        "description": "Modifies the credit option for CPU usage on a burstable performance instance. Parameters: DryRun (boolean) - Optional. Checks permissions without making the request. ClientToken (string) - Ensures idempotency. InstanceCreditSpecifications (list of dicts) - Required. Information about the credit option for CPU usage, including 'InstanceId' (string) and 'CpuCredits' (string). Returns: dict with 'SuccessfulInstanceCreditSpecifications' (list of dicts) and 'UnsuccessfulInstanceCreditSpecifications' (list of dicts) indicating modification results."
    },
    "ec2.client.modify_instance_event_start_time": {
        "new_func": "ec2.client.modify_instance_event_start_time",
        "description": "Modifies the start time for a scheduled EC2 instance event. Parameters: DryRun (boolean) - Optional. Checks permissions without making the request. InstanceId (string) - Required. The ID of the instance. InstanceEventId (string) - Required. The ID of the event. NotBefore (datetime) - Required. The new date and time for the event. Returns: dict with 'Event' (dict) containing details like 'InstanceEventId', 'Code', 'Description', 'NotAfter', 'NotBefore', and 'NotBeforeDeadline'."
    },
    "ec2.client.modify_instance_event_window": {
        "new_func": "ec2.client.modify_instance_event_window",
        "description": "Modifies the specified event window. Parameters: DryRun (boolean) - Optional. Checks permissions without making the request. Name (string) - Name of the event window. InstanceEventWindowId (string) - Required. ID of the event window. TimeRanges (list of dicts) or CronExpression (string) - Specify time ranges or a cron expression for the event window. Returns: dict with 'InstanceEventWindow' (dict) containing details like 'InstanceEventWindowId', 'TimeRanges', 'Name', 'CronExpression', 'AssociationTarget', 'State', and 'Tags'."
    },
    "ec2.client.modify_instance_maintenance_options": {
        "new_func": "ec2.client.modify_instance_maintenance_options",
        "description": "Modifies the recovery behavior of an instance. Parameters: InstanceId (string) - Required. The ID of the instance. AutoRecovery (string) - Sets the instance's automatic recovery behavior. DryRun (boolean) - Optional. Checks permissions without making the request. Returns: dict with 'InstanceId' (string) and 'AutoRecovery' (string) indicating the automatic recovery behavior."
    },
    "ec2.client.modify_instance_metadata_defaults": {
        "new_func": "ec2.client.modify_instance_metadata_defaults",
        "description": "Modifies default IMDS settings at the account level in a region. Parameters: HttpTokens (string) - IMDSv2 requirement. HttpPutResponseHopLimit (integer) - Max hops for metadata token, -1 for no preference. HttpEndpoint (string) - Enables/disables IMDS endpoint. InstanceMetadataTags (string) - Enables/disables access to instance tags via IMDS. DryRun (boolean) - Checks permissions without making the request. Returns: dict with 'Return' (boolean) indicating success."
    },
    "ec2.client.modify_instance_metadata_options": {
        "new_func": "ec2.client.modify_instance_metadata_options",
        "description": "Modifies instance metadata parameters for a running/stopped instance. Parameters: InstanceId (string) - Required. ID of the instance. HttpTokens (string) - IMDSv2 requirement. HttpPutResponseHopLimit (integer) - Desired HTTP PUT response limit. HttpEndpoint (string) - Enables/disables the HTTP metadata endpoint. HttpProtocolIpv6 (string) - Enables/disables IPv6 endpoint for IMDS. InstanceMetadataTags (string) - Enables/disables access to instance tags via IMDS. DryRun (boolean) - Checks permissions without making the request. Returns: dict with 'InstanceId', and 'InstanceMetadataOptions' describing metadata options and their state."
    },
    "ec2.client.modify_instance_placement": {
        "new_func": "ec2.client.modify_instance_placement",
        "description": "Modifies placement attributes for a specified instance. Parameters: Affinity (string) - Affinity setting for instance and Dedicated Host. GroupName (string) - Placement group name. HostId (string) - ID of the Dedicated Host. InstanceId (string) - Required. ID of the instance. Tenancy (string) - Instance tenancy setting. PartitionNumber (integer) - Partition number in a placement group. HostResourceGroupArn (string) - ARN of the host resource group. GroupId (string) - Group Id of a placement group. Returns: dict with 'Return' (boolean) indicating success."
    },
    "ec2.client.modify_ipam": {
        "new_func": "ec2.client.modify_ipam",
        "description": "Modifies configurations of an IPAM. Parameters: DryRun (boolean) - Checks permissions without making the request. IpamId (string) - Required. ID of the IPAM. Description (string) - New description. AddOperatingRegions (list) - Operating regions to add. RemoveOperatingRegions (list) - Operating regions to remove. Tier (string) - IPAM tier ('free' or 'advanced'). Returns: dict with 'Ipam' containing IPAM details such as 'OwnerId', 'IpamId', 'State', and more."
    },
    "ec2.client.modify_ipam_pool": {
        "new_func": "ec2.client.modify_ipam_pool",
        "description": "Modifies configurations of an IPAM pool. Parameters: DryRun (boolean) - Checks permissions without making the request. IpamPoolId (string) - Required. ID of the IPAM pool. Description (string) - New description. AutoImport (boolean) - Toggles automatic import of resources. AllocationMinNetmaskLength (integer) - Min netmask length for allocations. AllocationMaxNetmaskLength (integer) - Max netmask length for allocations. AllocationDefaultNetmaskLength (integer) - Default netmask length for new allocations. ClearAllocationDefaultNetmaskLength (boolean) - Clear default netmask length allocation rule. AddAllocationResourceTags (list) - Tags for allocation rules to add. RemoveAllocationResourceTags (list) - Tags for allocation rules to remove. Returns: dict with 'IpamPool' containing details such as 'OwnerId', 'Description', 'State', and more."
    },
    "ec2.client.modify_ipam_resource_cidr": {
        "new_func": "ec2.client.modify_ipam_resource_cidr",
        "description": "Modifies a resource CIDR within IPAM, allowing transfer between scopes and toggling monitoring. Parameters: DryRun (boolean), ResourceId (string) - Required, ResourceCidr (string) - Required, ResourceRegion (string) - Required, CurrentIpamScopeId (string) - Required, DestinationIpamScopeId (string), Monitored (boolean) - Required. Returns: dict with 'IpamResourceCidr' details including IpamId, IpamScopeId, ResourceRegion, ResourceOwnerId, ResourceId, ResourceCidr, ResourceType, ResourceTags, and more."
    },
    "ec2.client.modify_ipam_resource_discovery": {
        "new_func": "ec2.client.modify_ipam_resource_discovery",
        "description": "Modifies a resource discovery in IPAM. Parameters: DryRun (boolean), IpamResourceDiscoveryId (string) - Required, Description (string), AddOperatingRegions (list of dicts with 'RegionName'), RemoveOperatingRegions (list of dicts with 'RegionName'). Returns: dict with 'IpamResourceDiscovery' details including OwnerId, IpamResourceDiscoveryId, Description, OperatingRegions, IsDefault, State, Tags."
    },
    "ec2.client.modify_ipam_scope": {
        "new_func": "ec2.client.modify_ipam_scope",
        "description": "Modifies an IPAM scope. Parameters: DryRun (boolean), IpamScopeId (string) - Required, Description (string). Returns: dict with 'IpamScope' details including OwnerId, IpamScopeId, IpamScopeArn, IpamRegion, IpamScopeType, IsDefault, Description, PoolCount, State, Tags."
    },
    "ec2.client.modify_launch_template": {
        "new_func": "ec2.client.modify_launch_template",
        "description": "Modifies a launch template, including setting the default version. Parameters: DryRun (boolean), ClientToken (string), LaunchTemplateId (string), LaunchTemplateName (string), DefaultVersion (string). Returns: dict with 'LaunchTemplate' details including LaunchTemplateId, LaunchTemplateName, CreateTime, CreatedBy, DefaultVersionNumber, LatestVersionNumber, Tags."
    },
    "ec2.client.modify_local_gateway_route": {
        "new_func": "ec2.client.modify_local_gateway_route",
        "description": "Modifies a local gateway route. Parameters: DestinationCidrBlock (string), LocalGatewayRouteTableId (string) - Required, LocalGatewayVirtualInterfaceGroupId (string), NetworkInterfaceId (string), DryRun (boolean), DestinationPrefixListId (string). Returns: dict with 'Route' details including DestinationCidrBlock, LocalGatewayVirtualInterfaceGroupId, Type, State, LocalGatewayRouteTableId, OwnerId, SubnetId, CoipPoolId, NetworkInterfaceId, DestinationPrefixListId."
    },
    "ec2.client.modify_managed_prefix_list": {
        "new_func": "ec2.client.modify_managed_prefix_list",
        "description": "Modifies a managed prefix list. Parameters: PrefixListId (string) - Required. CurrentVersion (integer) - Current version. PrefixListName (string) - Name of the prefix list. AddEntries (list) - Entries to add. RemoveEntries (list) - Entries to remove. MaxEntries (integer) - Maximum number of entries. DryRun (boolean) - Checks permissions without making the request. Returns: dict with PrefixList details, including PrefixListId, AddressFamily, State, StateMessage, PrefixListArn, PrefixListName, MaxEntries, Version, Tags, and OwnerId."
    },
    "ec2.client.modify_network_interface_attribute": {
        "new_func": "ec2.client.modify_network_interface_attribute",
        "description": "Modifies attributes of a network interface. Parameters: Attachment (dict) - Attachment information. Description (dict) - New description. DryRun (boolean) - Checks permissions without making the request. Groups (list) - Security groups. NetworkInterfaceId (string) - Required. ID of the network interface. SourceDestCheck (dict) - Enables/disables source/destination checks. EnaSrdSpecification (dict) - Updates ENA Express configuration. EnablePrimaryIpv6 (boolean) - Assigns a primary IPv6 address. ConnectionTrackingSpecification (dict) - Connection tracking settings. AssociatePublicIpAddress (boolean) - Assigns a public IPv4 address. Returns: None."
    },
    "ec2.client.modify_private_dns_name_options": {
        "new_func": "ec2.client.modify_private_dns_name_options",
        "description": "Modifies DNS name options for an instance. Parameters: InstanceId (string) - Required. ID of the instance. PrivateDnsHostnameType (string) - Type of hostname. EnableResourceNameDnsARecord (boolean) - Enables DNS A records. EnableResourceNameDnsAAAARecord (boolean) - Enables DNS AAAA records. DryRun (boolean) - Checks permissions without making the request. Returns: dict with Return indicating success or error."
    },
    "ec2.client.modify_reserved_instances": {
        "new_func": "ec2.client.modify_reserved_instances",
        "description": "Modifies Reserved Instances. Parameters: ReservedInstancesIds (list) - Required. IDs of the Reserved Instances. ClientToken (string) - Idempotency token. TargetConfigurations (list) - Required. Configuration settings for modification. Returns: dict with ReservedInstancesModificationId."
    },
    "ec2.client.modify_security_group_rules": {
        "new_func": "ec2.client.modify_security_group_rules",
        "description": "Modifies rules of a security group. Parameters: GroupId (string) - Required. ID of the security group. SecurityGroupRules (list) - Required. Rules to update. DryRun (boolean) - Checks permissions without making the request. Returns: dict with Return indicating success or error."
    },
    "ec2.client.modify_snapshot_attribute": {
        "new_func": "ec2.client.modify_snapshot_attribute",
        "description": "Modifies permissions for a specified snapshot. Parameters: Attribute (string) - The snapshot attribute to modify. CreateVolumePermission (dict) - Permission modifications. OperationType (string) - 'add' or 'remove' permissions. SnapshotId (string) - Required. The snapshot ID. UserIds (list) - AWS account IDs to modify permissions. DryRun (boolean) - Check permissions without making changes. Returns: None."
    },
    "ec2.client.modify_snapshot_tier": {
        "new_func": "ec2.client.modify_snapshot_tier",
        "description": "Archives an EBS snapshot, moving it from the standard tier to the archive tier. Parameters: SnapshotId (string) - Required. The snapshot ID. StorageTier (string) - Required. Must be 'archive'. DryRun (boolean) - Check permissions without making changes. Returns: dict with SnapshotId and TieringStartTime."
    },
    "ec2.client.modify_spot_fleet_request": {
        "new_func": "ec2.client.modify_spot_fleet_request",
        "description": "Modifies a Spot Fleet request. Parameters: ExcessCapacityTerminationPolicy (string) - Termination policy for excess capacity. LaunchTemplateConfigs (list) - List of launch templates and overrides. SpotFleetRequestId (string) - Required. The Spot Fleet request ID. TargetCapacity (integer) - The new target capacity. OnDemandTargetCapacity (integer) - The new On-Demand target capacity. Context (string) - Reserved. Returns: dict with the key 'Return' indicating request success."
    },
    "ec2.client.modify_subnet_attribute": {
        "new_func": "ec2.client.modify_subnet_attribute",
        "description": "Modifies a subnet attribute. Parameters: AssignIpv6AddressOnCreation (dict) - Assign IPv6 addresses on creation. MapPublicIpOnLaunch (dict) - Assign public IPv4 addresses on launch. SubnetId (string) - Required. The subnet ID. MapCustomerOwnedIpOnLaunch (dict) - Assign customer-owned IPv4 addresses on launch. EnableDns64 (dict) - Enable DNS64. PrivateDnsHostnameTypeOnLaunch (string) - Hostname type at launch. EnableResourceNameDnsARecordOnLaunch (dict) - Enable DNS A records. EnableResourceNameDnsAAAARecordOnLaunch (dict) - Enable DNS AAAA records. EnableLniAtDeviceIndex (integer) - Device index for LNI. DisableLniAtDeviceIndex (dict) - Disable LNI at device index. Returns: None."
    },
    "ec2.client.modify_traffic_mirror_filter_network_services": {
        "new_func": "ec2.client.modify_traffic_mirror_filter_network_services",
        "description": "Modifies network services for a Traffic Mirror filter. Parameters: TrafficMirrorFilterId (string) - Required. The Traffic Mirror filter ID. AddNetworkServices (list) - Network services to add. RemoveNetworkServices (list) - Network services to remove. DryRun (boolean) - Check permissions without making changes. Returns: dict with TrafficMirrorFilter details."
    },
    "ec2.client.modify_traffic_mirror_filter_rule": {
        "new_func": "ec2.client.modify_traffic_mirror_filter_rule",
        "description": "Modifies a Traffic Mirror rule. Parameters: TrafficMirrorFilterRuleId (string) - Required. ID of the rule. TrafficDirection (string) - Traffic type ('ingress' or 'egress'). RuleNumber (integer) - Rule number, must be unique. RuleAction (string) - Action ('accept' or 'reject'). DestinationPortRange, SourcePortRange (dict) - Port ranges with FromPort and ToPort (integers). Protocol (integer) - The protocol number. DestinationCidrBlock, SourceCidrBlock (string) - CIDR blocks. Description (string) - Rule description. RemoveFields (list) - Fields to remove from the rule. DryRun (boolean) - Permission check without action. Returns: dict with updated TrafficMirrorFilterRule details."
    },
    "ec2.client.modify_traffic_mirror_session": {
        "new_func": "ec2.client.modify_traffic_mirror_session",
        "description": "Modifies a Traffic Mirror session. Parameters: TrafficMirrorSessionId (string) - Required. ID of the session. TrafficMirrorTargetId (string) - ID of the Traffic Mirror target. TrafficMirrorFilterId (string) - ID of the Traffic Mirror filter. PacketLength (integer) - Bytes to mirror after VXLAN header. SessionNumber (integer) - Session number for evaluation order. VirtualNetworkId (integer) - Virtual network ID of the session. Description (string) - Session description. RemoveFields (list) - Fields to set to default. DryRun (boolean) - Permission check without action. Returns: dict with updated TrafficMirrorSession details."
    },
    "ec2.client.modify_transit_gateway": {
        "new_func": "ec2.client.modify_transit_gateway",
        "description": "Modifies a transit gateway. Parameters: TransitGatewayId (string) - Required. ID of the transit gateway. Description (string) - Description for the transit gateway. Options (dict) - Options to modify, including AddTransitGatewayCidrBlocks, RemoveTransitGatewayCidrBlocks, VpnEcmpSupport, DnsSupport, AutoAcceptSharedAttachments, DefaultRouteTableAssociation, AssociationDefaultRouteTableId, DefaultRouteTablePropagation, PropagationDefaultRouteTableId, and AmazonSideAsn. DryRun (boolean) - Permission check without action. Returns: dict with updated TransitGateway details."
    },
    "ec2.client.modify_transit_gateway_prefix_list_reference": {
        "new_func": "ec2.client.modify_transit_gateway_prefix_list_reference",
        "description": "Modifies a prefix list reference in a transit gateway route table. Parameters: TransitGatewayRouteTableId (string) - Required. ID of the route table. PrefixListId (string) - Required. ID of the prefix list. TransitGatewayAttachmentId (string) - ID of the attachment for traffic routing. Blackhole (boolean) - Drop traffic that matches the route. DryRun (boolean) - Permission check without action. Returns: dict with updated TransitGatewayPrefixListReference details."
    },
    "ec2.client.modify_transit_gateway_vpc_attachment": {
        "new_func": "ec2.client.modify_transit_gateway_vpc_attachment",
        "description": "Modifies a VPC attachment to a transit gateway. Parameters: TransitGatewayAttachmentId (string) - Required. ID of the attachment. AddSubnetIds (list) - Subnet IDs to add. RemoveSubnetIds (list) - Subnet IDs to remove. Options (dict) - New attachment options, including DnsSupport, SecurityGroupReferencingSupport, Ipv6Support, and ApplianceModeSupport. DryRun (boolean) - Permission check without action. Returns: dict with updated TransitGatewayVpcAttachment details."
    },
    "ec2.client.modify_verified_access_endpoint": {
        "new_func": "ec2.client.modify_verified_access_endpoint",
        "description": "Modifies the configuration of a specified AWS Verified Access endpoint. Parameters: VerifiedAccessEndpointId (string) - Required. The ID of the endpoint. VerifiedAccessGroupId (string) - The ID of the access group. LoadBalancerOptions (dict) - Load balancer details. SubnetIds (list) - IDs of subnets. Protocol (string) - IP protocol. Port (integer) - IP port number. NetworkInterfaceOptions (dict) - Network interface options. Description (string) - Description of the endpoint. ClientToken (string) - Token for idempotency. DryRun (boolean) - Check permissions without making the request. Returns: dict with detailed information about the Verified Access endpoint, including status, options, and tags."
    },
    "ec2.client.modify_verified_access_endpoint_policy": {
        "new_func": "ec2.client.modify_verified_access_endpoint_policy",
        "description": "Modifies the policy of a specified AWS Verified Access endpoint. Parameters: VerifiedAccessEndpointId (string) - Required. ID of the endpoint. PolicyEnabled (boolean) - Status of the policy. PolicyDocument (string) - The policy document. ClientToken (string) - Token for idempotency. DryRun (boolean) - Check permissions without making the request. SseSpecification (dict) - Server side encryption options. CustomerManagedKeyEnabled (boolean) - Use of customer managed KMS keys. KmsKeyArn (string) - ARN of the KMS key. Returns: dict with the status of the policy, the policy document, and server side encryption options."
    },
    "ec2.client.modify_verified_access_group": {
        "new_func": "ec2.client.modify_verified_access_group",
        "description": "Modifies a specified AWS Verified Access group configuration. Parameters: VerifiedAccessGroupId (string) - Required. ID of the access group. VerifiedAccessInstanceId (string) - ID of the access instance. Description (string) - Description of the group. ClientToken (string) - Token for idempotency. DryRun (boolean) - Check permissions without making the request. Returns: dict with details about the Verified Access group, including description, owner, ARN, creation and update times, tags, and encryption options."
    },
    "ec2.client.modify_verified_access_group_policy": {
        "new_func": "ec2.client.modify_verified_access_group_policy",
        "description": "Modifies the policy of a specified AWS Verified Access group. Parameters: VerifiedAccessGroupId (string) - Required. ID of the group. PolicyEnabled (boolean) - Status of the policy. PolicyDocument (string) - The policy document. ClientToken (string) - Token for idempotency. DryRun (boolean) - Check permissions without making the request. SseSpecification (dict) - Server side encryption options. CustomerManagedKeyEnabled (boolean) - Use of customer managed KMS keys. KmsKeyArn (string) - ARN of the KMS key. Returns: dict with the status of the policy, the policy document, and server side encryption options."
    },
    "ec2.client.modify_verified_access_instance": {
        "new_func": "ec2.client.modify_verified_access_instance",
        "description": "Modifies the configuration of a specified AWS Verified Access instance. Parameters: VerifiedAccessInstanceId (string) - Required. ID of the instance. Description (string) - Description of the instance. DryRun (boolean) - Check permissions without making the request. ClientToken (string) - Token for idempotency. Returns: dict with details about the Verified Access instance, including description, trust providers, creation and update times, tags, and FIPs status."
    },
    "ec2.client.modify_verified_access_instance_logging_configuration": {
        "new_func": "ec2.client.modify_verified_access_instance_logging_configuration",
        "description": "Modifies the logging configuration for a specified AWS Verified Access instance. Parameters: VerifiedAccessInstanceId (string) - Required. ID of the instance. AccessLogs (dict) - Required. Dict specifying S3, CloudWatchLogs, KinesisDataFirehose logging options, LogVersion, and IncludeTrustContext. DryRun (boolean) - Optional. Checks permissions without making the request. ClientToken (string) - Optional. Token for idempotency. Returns: dict with LoggingConfiguration including VerifiedAccessInstanceId and details about access logs."
    },
    "ec2.client.modify_verified_access_trust_provider": {
        "new_func": "ec2.client.modify_verified_access_trust_provider",
        "description": "Modifies the configuration of a specified AWS Verified Access trust provider. Parameters: VerifiedAccessTrustProviderId (string) - Required. ID of the trust provider. OidcOptions (dict) - Options for OIDC-compatible user-identity trust providers. DeviceOptions (dict) - Options for device-based trust providers. Description (string) - Description of the trust provider. DryRun (boolean) - Optional. Checks permissions without making the request. ClientToken (string) - Optional. Token for idempotency. SseSpecification (dict) - Options for server-side encryption. Returns: dict with VerifiedAccessTrustProvider details including ID, description, types, options, and encryption details."
    },
    "ec2.client.modify_volume": {
        "new_func": "ec2.client.modify_volume",
        "description": "Modifies settings of an existing EBS volume. Parameters: VolumeId (string) - Required. ID of the volume. Size (integer) - New size of the volume. VolumeType (string) - New volume type. Iops (integer) - New IOPS rate. Throughput (integer) - New throughput in MiB/s. MultiAttachEnabled (boolean) - Enable/disable Amazon EBS Multi-Attach. DryRun (boolean) - Optional. Checks permissions without making the request. Returns: dict with VolumeModification details including state, progress, start and end time."
    },
    "ec2.client.modify_volume_attribute": {
        "new_func": "ec2.client.modify_volume_attribute",
        "description": "Modifies a volume attribute. Parameters: VolumeId (string) - Required. ID of the volume. AutoEnableIO (dict) - Dict with 'Value' key to indicate if the volume should be auto-enabled for I/O operations. DryRun (boolean) - Optional. Checks permissions without making the request. Returns: None."
    },
    "ec2.client.modify_vpc_attribute": {
        "new_func": "ec2.client.modify_vpc_attribute",
        "description": "Modifies the specified attribute of the specified VPC. Parameters: VpcId (string) - Required. ID of the VPC. EnableDnsHostnames (dict) - Dict with 'Value' key to indicate whether instances get DNS hostnames. EnableDnsSupport (dict) - Dict with 'Value' key indicating if DNS resolution is supported. EnableNetworkAddressUsageMetrics (dict) - Dict with 'Value' key to enable/disable Network Address Usage metrics. Returns: None."
    },
    "ec2.client.modify_vpc_endpoint": {
        "new_func": "ec2.client.modify_vpc_endpoint",
        "description": "Modifies attributes of a VPC endpoint. Parameters: DryRun (boolean) - Checks permissions. VpcEndpointId (string) - Required. Endpoint ID. ResetPolicy (boolean) - Resets policy to default for gateway endpoints. PolicyDocument (string) - JSON policy for interface/gateway endpoints. Add/RemoveRouteTableIds (list) - Route table IDs to associate/disassociate for gateway endpoints. Add/RemoveSubnetIds (list) - Subnet IDs to serve/remove the endpoint for interface/Gateway Load Balancer endpoints. Add/RemoveSecurityGroupIds (list) - Security group IDs to associate/disassociate for interface endpoints. IpAddressType (string) - The IP address type. DnsOptions (dict) - DNS options. PrivateDnsEnabled (boolean) - Associates a private hosted zone with the VPC for interface endpoints. SubnetConfigurations (list) - Subnet configurations. Returns: dict with 'Return' (boolean) indicating success or error."
    },
    "ec2.client.modify_vpc_endpoint_connection_notification": {
        "new_func": "ec2.client.modify_vpc_endpoint_connection_notification",
        "description": "Modifies a connection notification for VPC endpoint or service. Parameters: DryRun (boolean) - Checks permissions. ConnectionNotificationId (string) - Required. Notification ID. ConnectionNotificationArn (string) - SNS topic ARN for the notification. ConnectionEvents (list) - Endpoint events for notification. Returns: dict with 'ReturnValue' (boolean) indicating success or error."
    },
    "ec2.client.modify_vpc_endpoint_service_configuration": {
        "new_func": "ec2.client.modify_vpc_endpoint_service_configuration",
        "description": "Modifies attributes of a VPC endpoint service configuration. Parameters: DryRun (boolean) - Checks permissions. ServiceId (string) - Required. Service ID. PrivateDnsName (string) - Private DNS name for the service. RemovePrivateDnsName (boolean) - Removes the private DNS name. AcceptanceRequired (boolean) - Indicates if service requests must be accepted. Add/RemoveNetworkLoadBalancerArns (list) - Network Load Balancer ARNs to add/remove. Add/RemoveGatewayLoadBalancerArns (list) - Gateway Load Balancer ARNs to add/remove. Add/RemoveSupportedIpAddressTypes (list) - IP address types to add/remove. Returns: dict with 'Return' (boolean) indicating success or error."
    },
    "ec2.client.modify_vpc_endpoint_service_payer_responsibility": {
        "new_func": "ec2.client.modify_vpc_endpoint_service_payer_responsibility",
        "description": "Modifies the payer responsibility for a VPC endpoint service. Parameters: DryRun (boolean) - Checks permissions. ServiceId (string) - Required. Service ID. PayerResponsibility (string) - Required. Entity responsible for the endpoint costs. Returns: dict with 'ReturnValue' (boolean) indicating success or error."
    },
    "ec2.client.modify_vpc_endpoint_service_permissions": {
        "new_func": "ec2.client.modify_vpc_endpoint_service_permissions",
        "description": "Modifies permissions for a VPC endpoint service. Parameters: DryRun (boolean) - Checks permissions. ServiceId (string) - Required. Service ID. AddAllowedPrincipals (list) - ARNs of principals to grant permissions. RemoveAllowedPrincipals (list) - ARNs of principals to revoke permissions. Returns: dict with 'AddedPrincipals' (list) containing details of added principals and 'ReturnValue' (boolean) indicating success or error."
    },
    "ec2.client.modify_vpc_peering_connection_options": {
        "new_func": "ec2.client.modify_vpc_peering_connection_options",
        "description": "Modifies options of a VPC peering connection. Parameters: AccepterPeeringConnectionOptions (dict) - Options for the accepter VPC. RequesterPeeringConnectionOptions (dict) - Options for the requester VPC. VpcPeeringConnectionId (string) - Required. The ID of the VPC peering connection. DryRun (boolean) - Checks required permissions without making the request. Returns: dict with updated peering connection options for accepter and requester."
    },
    "ec2.client.modify_vpc_tenancy": {
        "new_func": "ec2.client.modify_vpc_tenancy",
        "description": "Changes the instance tenancy attribute of a specified VPC to default. Parameters: VpcId (string) - Required. The ID of the VPC. InstanceTenancy (string) - Required. The instance tenancy attribute, set to 'default'. DryRun (boolean) - Checks required permissions without making the request. Returns: dict with a ReturnValue indicating if the request succeeds."
    },
    "ec2.client.modify_vpn_connection": {
        "new_func": "ec2.client.modify_vpn_connection",
        "description": "Modifies the customer or target gateway of a VPN connection. Parameters: VpnConnectionId (string) - Required. ID of the VPN connection. TransitGatewayId (string) - ID of the transit gateway. CustomerGatewayId (string) - ID of the customer gateway. VpnGatewayId (string) - ID of the virtual private gateway. DryRun (boolean) - Checks required permissions without making the request. Returns: dict with information about the modified VPN connection, including its state, options, and routes."
    },
    "ec2.client.modify_vpn_connection_options": {
        "new_func": "ec2.client.modify_vpn_connection_options",
        "description": "Modifies connection options for a Site-to-Site VPN connection. Parameters: VpnConnectionId (string) - Required. ID of the VPN connection. LocalIpv4NetworkCidr (string) - IPv4 CIDR for the customer gateway. RemoteIpv4NetworkCidr (string) - IPv4 CIDR for the AWS side. LocalIpv6NetworkCidr (string) - IPv6 CIDR for the customer gateway. RemoteIpv6NetworkCidr (string) - IPv6 CIDR for the AWS side. DryRun (boolean) - Checks required permissions without making the request. Returns: dict with information about the VPN connection and its current state and options."
    },
    "ec2.client.modify_vpn_tunnel_certificate": {
        "new_func": "ec2.client.modify_vpn_tunnel_certificate",
        "description": "Modifies the VPN tunnel endpoint certificate. Parameters: VpnConnectionId (string) - Required. ID of the AWS Site-to-Site VPN connection. VpnTunnelOutsideIpAddress (string) - Required. The external IP address of the VPN tunnel. DryRun (boolean) - Checks required permissions without making the request. Returns: dict with information about the VPN connection including its state, options, and routes."
    },
    "ec2.client.modify_vpn_tunnel_options": {
        "new_func": "ec2.client.modify_vpn_tunnel_options",
        "description": "Modifies options for a VPN tunnel in a Site-to-Site VPN connection. Parameters: VpnConnectionId (string) - Required. The ID of the VPN connection. VpnTunnelOutsideIpAddress (string) - Required. The external IP address of the VPN tunnel. TunnelOptions (dict) - Required. The tunnel options to modify, including TunnelInsideCidr, PreSharedKey, Phase1LifetimeSeconds, etc. DryRun (boolean) - Checks permissions without making the request. SkipTunnelReplacement (boolean) - If set, no immediate tunnel replacement. Returns: dict with details of the VPN connection's status and configuration."
    },
    "ec2.client.monitor_instances": {
        "new_func": "ec2.client.monitor_instances",
        "description": "Enables detailed monitoring for a running instance. Parameters: InstanceIds (list) - Required. The IDs of the instances. DryRun (boolean) - Checks permissions without making the request. Returns: dict with an array of InstanceMonitorings, indicating monitoring state for each instance."
    },
    "ec2.client.move_address_to_vpc": {
        "new_func": "ec2.client.move_address_to_vpc",
        "description": "Deprecated. Moves an Elastic IP address from EC2-Classic to EC2-VPC. Parameters: PublicIp (string) - Required. The Elastic IP address. DryRun (boolean) - Checks permissions without making the request. Returns: dict with AllocationId and Status of the IP address."
    },
    "ec2.client.move_byoip_cidr_to_ipam": {
        "new_func": "ec2.client.move_byoip_cidr_to_ipam",
        "description": "Moves a BYOIPv4 CIDR to IPAM from a public IPv4 pool. Parameters: Cidr (string) - Required. The BYOIP CIDR. IpamPoolId (string) - Required. The IPAM pool ID. IpamPoolOwner (string) - Required. The AWS account ID of the pool owner. DryRun (boolean) - Checks permissions without making the request. Returns: dict with ByoipCidr details including Cidr, Description, State, and NetworkBorderGroup."
    },
    "ec2.client.provision_byoip_cidr": {
        "new_func": "ec2.client.provision_byoip_cidr",
        "description": "Provisions an IP address range for BYOIP and creates a corresponding address pool. Parameters: Cidr (string) - Required. The IP address range in CIDR notation. CidrAuthorizationContext (dict) - Required. A signed document proving authorization to bring the IP range. PubliclyAdvertisable (boolean) - For IPv6, indicates if the range will be advertised. Description (string) - Description for the address range. DryRun (boolean) - Checks permissions without making the request. PoolTagSpecifications (list) - Tags for the address pool. MultiRegion (boolean) - Reserved. NetworkBorderGroup (string) - The network border group for Local Zones. Returns: dict with ByoipCidr information including Cidr, Description, and Status."
    },
    "ec2.client.provision_ipam_byoasn": {
        "new_func": "ec2.client.provision_ipam_byoasn",
        "description": "Provisions an Autonomous System Number (ASN) for use in AWS. Parameters: DryRun (boolean) - Permission check flag. IpamId (string) - Required. The IPAM ID. Asn (string) - Required. The ASN to provision. AsnAuthorizationContext (dict) - Required. Contains Message (string) - Required, and Signature (string) - Required. Returns: dict with Byoasn details including Asn, IpamId, StatusMessage, and State."
    },
    "ec2.client.provision_ipam_pool_cidr": {
        "new_func": "ec2.client.provision_ipam_pool_cidr",
        "description": "Provisions a CIDR to an IPAM pool. Parameters: DryRun (boolean) - Permission check flag. IpamPoolId (string) - Required. The pool ID. Cidr (string) - The CIDR to assign. CidrAuthorizationContext (dict) - Contains Message and Signature. NetmaskLength (integer) - The netmask length. ClientToken (string) - Idempotency token. Returns: dict with IpamPoolCidr details including Cidr, State, FailureReason, IpamPoolCidrId, and NetmaskLength."
    },
    "ec2.client.provision_public_ipv4_pool_cidr": {
        "new_func": "ec2.client.provision_public_ipv4_pool_cidr",
        "description": "Provisions a CIDR to a public IPv4 pool. Parameters: DryRun (boolean) - Permission check flag. IpamPoolId (string) - Required. IPAM pool ID. PoolId (string) - Required. Public IPv4 pool ID. NetmaskLength (integer) - Required. Netmask length. Returns: dict with PoolId and PoolAddressRange details including FirstAddress, LastAddress, AddressCount, and AvailableAddressCount."
    },
    "ec2.client.purchase_capacity_block": {
        "new_func": "ec2.client.purchase_capacity_block",
        "description": "Purchases a Capacity Block for GPU capacity. Parameters: DryRun (boolean) - Permission check flag. TagSpecifications (list) - Tags for the Capacity Block. CapacityBlockOfferingId (string) - Required. Offering ID. InstancePlatform (string) - Required. Operating system type. Returns: dict with CapacityReservation details including IDs, ARNs, types, counts, states, prices, and tags."
    },
    "ec2.client.purchase_host_reservation": {
        "new_func": "ec2.client.purchase_host_reservation",
        "description": "Purchases a reservation for Dedicated Hosts. Parameters: ClientToken (string) - Idempotency token. CurrencyCode (string) - Currency for prices (only USD supported). HostIdSet (list) - Required. Dedicated Host IDs. LimitPrice (string) - Price limit in USD. OfferingId (string) - Required. Offering ID. TagSpecifications (list) - Tags for the reservation. Returns: dict with purchase details including ClientToken, CurrencyCode, Purchase list, TotalHourlyPrice, and TotalUpfrontPrice."
    },
    "ec2.client.purchase_reserved_instances_offering": {
        "new_func": "ec2.client.purchase_reserved_instances_offering",
        "description": "Purchases a Reserved Instance offering. Parameters: InstanceCount (integer) - Required. Number of instances to purchase. ReservedInstancesOfferingId (string) - Required. Offering ID to purchase. DryRun (boolean) - Checks required permissions. LimitPrice (dict) - Limit on the total order price. PurchaseTime (datetime) - Time to purchase the Reserved Instance. Returns: dict with 'ReservedInstancesId' (string) indicating the ID of the purchased Reserved Instances."
    },
    "ec2.client.purchase_scheduled_instances": {
        "new_func": "ec2.client.purchase_scheduled_instances",
        "description": "Purchases Scheduled Instances with a specified schedule. Parameters: ClientToken (string) - Idempotent request token. DryRun (boolean) - Checks required permissions. PurchaseRequests (list of dicts) - Required. Purchase requests with 'InstanceCount' (integer) and 'PurchaseToken' (string). Returns: dict with 'ScheduledInstanceSet' containing details of the purchased Scheduled Instances."
    },
    "ec2.client.reboot_instances": {
        "new_func": "ec2.client.reboot_instances",
        "description": "Requests a reboot of specified instances. Parameters: InstanceIds (list of strings) - Required. IDs of the instances to reboot. DryRun (boolean) - Checks required permissions. Returns: None."
    },
    "ec2.client.register_image": {
        "new_func": "ec2.client.register_image",
        "description": "Registers an AMI. Parameters: ImageLocation (string) - S3 path to AMI manifest. Architecture (string) - AMI architecture. BlockDeviceMappings (list of dicts) - EBS and instance store volumes to attach. Description (string) - AMI description. DryRun (boolean) - Checks required permissions. EnaSupport (boolean) - Enables ENA networking. Name (string) - Required. AMI name. BillingProducts (list of strings) - Billing product codes. Returns: dict with 'ImageId' (string) indicating the ID of the registered AMI."
    },
    "ec2.client.register_instance_event_notification_attributes": {
        "new_func": "ec2.client.register_instance_event_notification_attributes",
        "description": "Registers tag keys for scheduled event notifications. Parameters: DryRun (boolean) - Checks required permissions. InstanceTagAttribute (dict) - Required. Info about the tag keys to register. Returns: dict with 'InstanceTagAttribute' containing the registered tag keys and inclusion status."
    },
    "ec2.client.register_transit_gateway_multicast_group_members": {
        "new_func": "ec2.client.register_transit_gateway_multicast_group_members",
        "description": "Registers network interfaces as members with a transit gateway multicast group. Parameters: TransitGatewayMulticastDomainId (string) - Required. ID of the multicast domain. GroupIpAddress (string) - IP address of the multicast group. NetworkInterfaceIds (list) - Required. IDs of network interfaces to register. DryRun (boolean) - Simulates permissions check. Returns: dict with 'RegisteredMulticastGroupMembers' containing the domain ID, registered network interface IDs, and group IP address."
    },
    "ec2.client.register_transit_gateway_multicast_group_sources": {
        "new_func": "ec2.client.register_transit_gateway_multicast_group_sources",
        "description": "Registers network interfaces as sources with a transit gateway multicast group. Parameters: TransitGatewayMulticastDomainId (string) - Required. ID of the multicast domain. GroupIpAddress (string) - IP address of the multicast group. NetworkInterfaceIds (list) - Required. IDs of network interfaces to register. DryRun (boolean) - Simulates permissions check. Returns: dict with 'RegisteredMulticastGroupSources' containing the domain ID, registered network interface IDs, and group IP address."
    },
    "ec2.client.reject_transit_gateway_multicast_domain_associations": {
        "new_func": "ec2.client.reject_transit_gateway_multicast_domain_associations",
        "description": "Rejects association requests for subnets with a transit gateway multicast domain. Parameters: TransitGatewayMulticastDomainId (string) - Multicast domain ID. TransitGatewayAttachmentId (string) - Transit gateway attachment ID. SubnetIds (list) - IDs of subnets to reject association. DryRun (boolean) - Simulates permissions check. Returns: dict with 'Associations' detailing domain ID, attachment ID, resource ID and type, owner ID, and subnets with states."
    },
    "ec2.client.reject_transit_gateway_peering_attachment": {
        "new_func": "ec2.client.reject_transit_gateway_peering_attachment",
        "description": "Rejects a transit gateway peering attachment request. Parameters: TransitGatewayAttachmentId (string) - Required. ID of the peering attachment. DryRun (boolean) - Simulates permissions check. Returns: dict with 'TransitGatewayPeeringAttachment' detailing attachment ID, info about requestor and accepter transit gateways, options, status, state, creation time, and tags."
    },
    "ec2.client.reject_transit_gateway_vpc_attachment": {
        "new_func": "ec2.client.reject_transit_gateway_vpc_attachment",
        "description": "Rejects a request to attach a VPC to a transit gateway. Parameters: TransitGatewayAttachmentId (string) - Required. ID of the VPC attachment. DryRun (boolean) - Simulates permissions check. Returns: dict with 'TransitGatewayVpcAttachment' including attachment ID, transit gateway ID, VPC ID, owner ID, state, subnet IDs, options, and tags."
    },
    "ec2.client.reject_vpc_endpoint_connections": {
        "new_func": "ec2.client.reject_vpc_endpoint_connections",
        "description": "Rejects VPC endpoint connection requests. Parameters: DryRun (boolean) - Checks permissions without making request. ServiceId (string) - Required. The service ID. VpcEndpointIds (list of strings) - Required. IDs of the VPC endpoints. Returns: dict with 'Unsuccessful' list containing information about endpoints not rejected."
    },
    "ec2.client.reject_vpc_peering_connection": {
        "new_func": "ec2.client.reject_vpc_peering_connection",
        "description": "Rejects a VPC peering connection request in the pending-acceptance state. Parameters: DryRun (boolean) - Checks permissions without making request. VpcPeeringConnectionId (string) - Required. The ID of the VPC peering connection. Returns: dict with 'Return' key indicating the success of the request."
    },
    "ec2.client.release_address": {
        "new_func": "ec2.client.release_address",
        "description": "Releases the specified Elastic IP address. Parameters: AllocationId (string) - Required. The allocation ID for the Elastic IP. PublicIp (string) - Deprecated. NetworkBorderGroup (string) - The set of Availability Zones from which AWS advertises IP addresses. DryRun (boolean) - Checks permissions without making request. Returns: None."
    },
    "ec2.client.release_hosts": {
        "new_func": "ec2.client.release_hosts",
        "description": "Releases specified On-Demand Dedicated Hosts. Parameters: HostIds (list of strings) - Required. The IDs of the Dedicated Hosts to release. Returns: dict with 'Successful' list of released host IDs and 'Unsuccessful' list with errors."
    },
    "ec2.client.release_ipam_pool_allocation": {
        "new_func": "ec2.client.release_ipam_pool_allocation",
        "description": "Releases an allocation within an IPAM pool. Parameters: DryRun (boolean) - Checks permissions without making request. IpamPoolId (string) - Required. The ID of the IPAM pool. Cidr (string) - Required. The CIDR of the allocation to release. IpamPoolAllocationId (string) - Required. The ID of the allocation. Returns: dict with 'Success' indicating if the release was successful."
    },
    "ec2.client.replace_iam_instance_profile_association": {
        "new_func": "ec2.client.replace_iam_instance_profile_association",
        "description": "Replaces an IAM instance profile for a running instance. Parameters: IamInstanceProfile (dict) - Required. Arn (string) - ARN of the instance profile. Name (string) - Name of the instance profile. AssociationId (string) - Required. ID of the existing IAM instance profile association. Returns: dict with keys IamInstanceProfileAssociation including AssociationId, InstanceId, IamInstanceProfile, State, Timestamp."
    },
    "ec2.client.replace_network_acl_association": {
        "new_func": "ec2.client.replace_network_acl_association",
        "description": "Changes the network ACL associated with a subnet. Parameters: AssociationId (string) - Required. ID of the current ACL-subnet association. DryRun (boolean) - Validates permissions. NetworkAclId (string) - Required. ID of the new network ACL. Returns: dict with NewAssociationId representing the new association."
    },
    "ec2.client.replace_network_acl_entry": {
        "new_func": "ec2.client.replace_network_acl_entry",
        "description": "Replaces an entry in a network ACL. Parameters: CidrBlock (string) - IPv4 CIDR range. DryRun (boolean) - Validates permissions. Egress (boolean) - Whether to replace the egress rule. IcmpTypeCode (dict) - ICMP type and code. Ipv6CidrBlock (string) - IPv6 CIDR range. NetworkAclId (string) - Required. ID of the ACL. PortRange (dict) - Port range for TCP/UDP. Protocol (string) - Required. Protocol number. RuleAction (string) - Required. Allow or deny traffic. RuleNumber (integer) - Required. Rule number to replace. Returns: None."
    },
    "ec2.client.replace_route": {
        "new_func": "ec2.client.replace_route",
        "description": "Replaces an existing route within a VPC route table. Parameters: DestinationCidrBlock (string) - IPv4 CIDR block for destination match. DestinationIpv6CidrBlock (string) - IPv6 CIDR block for destination match. DestinationPrefixListId (string) - ID of the prefix list. DryRun (boolean) - Validates permissions. Various resource parameters for route targets. RouteTableId (string) - Required. ID of the route table. Returns: None."
    },
    "ec2.client.replace_route_table_association": {
        "new_func": "ec2.client.replace_route_table_association",
        "description": "Changes the route table associated with a subnet or gateway in a VPC. Parameters: AssociationId (string) - Required. The association ID. DryRun (boolean) - Validates permissions. RouteTableId (string) - Required. ID of the new route table. Returns: dict with NewAssociationId and AssociationState containing State and StatusMessage."
    },
    "ec2.client.replace_transit_gateway_route": {
        "new_func": "ec2.client.replace_transit_gateway_route",
        "description": "Replaces a route in a transit gateway route table. Parameters: DestinationCidrBlock (string) - CIDR for the destination match. TransitGatewayRouteTableId (string) - Route table ID. TransitGatewayAttachmentId (string) - Attachment ID. Blackhole (boolean) - Indicates if traffic is dropped. DryRun (boolean) - Checks permissions without request. Returns: dict with details of the modified route."
    },
    "ec2.client.replace_vpn_tunnel": {
        "new_func": "ec2.client.replace_vpn_tunnel",
        "description": "Replaces a VPN tunnel. Parameters: VpnConnectionId (string) - VPN connection ID. VpnTunnelOutsideIpAddress (string) - External IP address of the VPN tunnel. ApplyPendingMaintenance (boolean) - Triggers pending maintenance. DryRun (boolean) - Checks permissions without request. Returns: dict with confirmation of the replace tunnel operation."
    },
    "ec2.client.report_instance_status": {
        "new_func": "ec2.client.report_instance_status",
        "description": "Submits feedback on instance status. Parameters: Description (string) - Instance health state description. DryRun (boolean) - Checks permissions without request. EndTime (datetime) - Time when instance health state ended. Instances (list) - Instances. ReasonCodes (list) - Reason codes for health state. StartTime (datetime) - Time when instance health state began. Status (string) - Status of instances. Returns: None."
    },
    "ec2.client.request_spot_fleet": {
        "new_func": "ec2.client.request_spot_fleet",
        "description": "Creates a Spot Fleet request. Parameters: DryRun (boolean) - Checks permissions without request. SpotFleetRequestConfig (dict) - Configuration for the Spot Fleet request, including target capacity, allocation strategy, launch specifications, and more. Returns: dict with the SpotFleetRequestId."
    },
    "ec2.client.request_spot_instances": {
        "new_func": "ec2.client.request_spot_instances",
        "description": "Creates a Spot Instance request. Parameters: AvailabilityZoneGroup (string) - Logical grouping name. BlockDurationMinutes (integer) - Deprecated. ClientToken (string) - Idempotency token. DryRun (boolean) - Checks permissions without request. InstanceCount (integer) - Number of instances to launch. LaunchGroup (string) - Instance launch group. LaunchSpecification (dict) - Launch specification details. SpotPrice (string) - Max price per unit hour. Type (string) - Request type, one-time or persistent. ValidFrom (datetime) - Start date of the request. ValidUntil (datetime) - End date of the request. TagSpecifications (list) - Tags to apply upon creation. InstanceInterruptionBehavior (string) - Behavior when instance is interrupted. Returns: dict with details of the Spot Instance requests."
    },
    "ec2.client.reset_address_attribute": {
        "new_func": "ec2.client.reset_address_attribute",
        "description": "Resets the specified attribute of an IP address. Parameters: AllocationId (string) - Required. The allocation ID. Attribute (string) - Required. The attribute to reset. DryRun (boolean) - Checks required permissions without making the request. Returns: dict with details of the IP address, including PublicIp, AllocationId, PtrRecord, and PtrRecordUpdate with Value, Status, and Reason."
    },
    "ec2.client.reset_ebs_default_kms_key_id": {
        "new_func": "ec2.client.reset_ebs_default_kms_key_id",
        "description": "Resets the default KMS key for EBS encryption to the AWS managed KMS key. Parameters: DryRun (boolean) - Checks required permissions without making the request. Returns: dict with KmsKeyId representing the ARN of the reset default KMS key."
    },
    "ec2.client.reset_fpga_image_attribute": {
        "new_func": "ec2.client.reset_fpga_image_attribute",
        "description": "Resets the specified attribute of an Amazon FPGA Image (AFI) to its default value. Parameters: DryRun (boolean) - Checks required permissions without making the request. FpgaImageId (string) - Required. The ID of the AFI. Attribute (string) - The attribute to reset. Returns: dict with a boolean 'Return' indicating success or failure of the request."
    },
    "ec2.client.reset_image_attribute": {
        "new_func": "ec2.client.reset_image_attribute",
        "description": "Resets an attribute of an AMI to its default value. Parameters: Attribute (string) - Required. The attribute to reset (only launch permission). ImageId (string) - Required. The ID of the AMI. DryRun (boolean) - Checks required permissions without making the request. Returns: None."
    },
    "ec2.client.reset_instance_attribute": {
        "new_func": "ec2.client.reset_instance_attribute",
        "description": "Resets an attribute of an instance to its default value. Parameters: Attribute (string) - Required. The attribute to reset. InstanceId (string) - Required. The ID of the instance. DryRun (boolean) - Checks required permissions without making the request. Returns: None."
    },
    "ec2.client.reset_network_interface_attribute": {
        "new_func": "ec2.client.reset_network_interface_attribute",
        "description": "Resets a network interface attribute. Parameters: DryRun (boolean) - Check permissions without making the request. NetworkInterfaceId (string) - Required. The ID of the network interface. SourceDestCheck (string) - Resets the source/destination checking attribute to true. Returns: None."
    },
    "ec2.client.reset_snapshot_attribute": {
        "new_func": "ec2.client.reset_snapshot_attribute",
        "description": "Resets permission settings for a snapshot. Parameters: Attribute (string) - Required. The attribute for permission to create volumes. SnapshotId (string) - Required. The ID of the snapshot. DryRun (boolean) - Check permissions without making the request. Returns: None."
    },
    "ec2.client.restore_address_to_classic": {
        "new_func": "ec2.client.restore_address_to_classic",
        "description": "Deprecated. Restores an Elastic IP address to the EC2-Classic platform. Parameters: DryRun (boolean) - Check permissions without making the request. PublicIp (string) - Required. The Elastic IP address. Returns: dict with PublicIp and Status."
    },
    "ec2.client.restore_image_from_recycle_bin": {
        "new_func": "ec2.client.restore_image_from_recycle_bin",
        "description": "Restores an AMI from the Recycle Bin. Parameters: ImageId (string) - Required. The ID of the AMI to restore. DryRun (boolean) - Check permissions without making the request. Returns: dict with a boolean indicating the success of the request."
    },
    "ec2.client.restore_managed_prefix_list_version": {
        "new_func": "ec2.client.restore_managed_prefix_list_version",
        "description": "Restores entries from a previous version to a new version of a managed prefix list. Parameters: DryRun (boolean) - Check permissions without making the request. PrefixListId (string) - Required. The ID of the prefix list. PreviousVersion (integer) - Required. The version to restore. CurrentVersion (integer) - Required. The current version number. Returns: dict with information about the prefix list, including PrefixListId, AddressFamily, State, StateMessage, PrefixListArn, PrefixListName, MaxEntries, Version, Tags, and OwnerId."
    },
    "ec2.client.restore_snapshot_from_recycle_bin": {
        "new_func": "ec2.client.restore_snapshot_from_recycle_bin",
        "description": "Restores a snapshot from the Recycle Bin. Parameters: SnapshotId (string) - Required. The ID of the snapshot to restore. DryRun (boolean) - Checks required permissions without making the request. Returns: dict with SnapshotId, OutpostArn, Description, Encrypted, OwnerId, Progress, StartTime, State, VolumeId, VolumeSize, SseType."
    },
    "ec2.client.restore_snapshot_tier": {
        "new_func": "ec2.client.restore_snapshot_tier",
        "description": "Restores an archived EBS snapshot or modifies the restore period or restore type for a temporarily restored snapshot. Parameters: SnapshotId (string) - Required. The ID of the snapshot. TemporaryRestoreDays (integer) - Days to temporarily restore an archived snapshot. PermanentRestore (boolean) - Whether to permanently restore an archived snapshot. DryRun (boolean) - Checks required permissions without making the request. Returns: dict with SnapshotId, RestoreStartTime, RestoreDuration, IsPermanentRestore."
    },
    "ec2.client.revoke_client_vpn_ingress": {
        "new_func": "ec2.client.revoke_client_vpn_ingress",
        "description": "Removes an ingress authorization rule from a Client VPN endpoint. Parameters: ClientVpnEndpointId (string) - Required. The ID of the Client VPN endpoint. TargetNetworkCidr (string) - Required. The IPv4 CIDR range of the network. AccessGroupId (string) - The ID of the Active Directory group for which to revoke access. RevokeAllGroups (boolean) - Whether to revoke access for all clients. DryRun (boolean) - Checks required permissions without making the request. Returns: dict with the current state of the authorization rule (Status)."
    },
    "ec2.client.revoke_security_group_egress": {
        "new_func": "ec2.client.revoke_security_group_egress",
        "description": "Removes specified outbound (egress) rules from a security group. Parameters: DryRun (boolean) - Checks required permissions without making the request. GroupId (string) - Required. The ID of the security group. IpPermissions (list) - The sets of IP permissions. SecurityGroupRuleIds (list) - The IDs of the security group rules. Returns: dict with a boolean indicating if the request succeeds and any UnknownIpPermissions."
    },
    "ec2.client.revoke_security_group_ingress": {
        "new_func": "ec2.client.revoke_security_group_ingress",
        "description": "Removes specified inbound (ingress) rules from a security group. Parameters: CidrIp (string) - The CIDR IP address range. FromPort (integer) - Start of the port range. GroupId (string) - The ID of the security group. GroupName (string) - Default VPC security group name. IpPermissions (list) - The sets of IP permissions. IpProtocol (string) - The IP protocol name or number. ToPort (integer) - End of the port range. DryRun (boolean) - Checks required permissions without making the request. SecurityGroupRuleIds (list) - The IDs of the security group rules. Returns: dict with a boolean indicating if the request succeeds and any UnknownIpPermissions."
    },
    "ec2.client.run_instances": {
        "new_func": "ec2.client.run_instances",
        "description": "Launches specified number of instances using an AMI. Parameters: BlockDeviceMappings (list) - EBS volumes and instance store volumes to attach. ImageId (string) - Required. ID of the AMI. InstanceType (string) - Required. Type of instance to launch. Ipv6AddressCount (integer) - Number of IPv6 addresses to associate with primary network interface. Ipv6Addresses (list) - Specific IPv6 addresses from the subnet range. KernelId (string) - ID of the kernel. KeyName (string) - Name of the key pair. MaxCount (integer) - Required. Maximum number of instances to launch. MinCount (integer) - Required. Minimum number of instances to launch. Monitoring (dict) - Enables detailed monitoring. Placement (dict) - Placement for the instance. RamdiskId (string) - ID of the RAM disk. SecurityGroupIds (list) - IDs of the security groups. SubnetId (string) - ID of the subnet to launch instances into. UserData (string) - User data script. AdditionalInfo (string) - Reserved. ClientToken (string) - Idempotency token. DisableApiTermination (boolean) - If true, instance cannot be terminated via API. DryRun (boolean) - Checks permissions without making request. EbsOptimized (boolean) - If true, instance is optimized for EBS I/O. IamInstanceProfile (dict) - IAM instance profile. InstanceInitiatedShutdownBehavior (string) - Indicates whether instance stops or terminates on shutdown. NetworkInterfaces (list) - Network interfaces to associate with instance. PrivateIpAddress (string) - Primary IPv4 address. ElasticGpuSpecification (list) - Elastic GPU to associate with instance. ElasticInferenceAccelerators (list) - Elastic inference accelerators to associate. TagSpecifications (list) - Tags to apply to resources during launch. LaunchTemplate (dict) - Launch template to use. InstanceMarketOptions (dict) - Market options for instances. CreditSpecification (dict) - Credit option for CPU usage. CpuOptions (dict) - CPU options for instance. CapacityReservationSpecification (dict) - Capacity Reservation targeting option. HibernationOptions (dict) - If true, instance is enabled for hibernation. LicenseSpecifications (list) - License configurations. MetadataOptions (dict) - Metadata options for instance. EnclaveOptions (dict) - If true, instance is enabled for AWS Nitro Enclaves. PrivateDnsNameOptions (dict) - Options for instance hostname. MaintenanceOptions (dict) - Maintenance and recovery options. DisableApiStop (boolean) - If true, instance is enabled for stop protection. EnablePrimaryIpv6 (boolean) - If true, primary IPv6 address is assigned. Returns: dict with instance launch information."
    },
    "ec2.client.run_scheduled_instances": {
        "new_func": "ec2.client.run_scheduled_instances",
        "description": "Launches specified Scheduled Instances. Parameters: ClientToken (string) - Idempotency token. DryRun (boolean) - Checks permissions without making request. InstanceCount (integer) - Number of instances to launch. LaunchSpecification (dict) - Required. Specifications for launching instances. ScheduledInstanceId (string) - Required. ID of the Scheduled Instance. Returns: dict with InstanceIdSet containing IDs of newly launched instances."
    },
    "ec2.client.search_local_gateway_routes": {
        "new_func": "ec2.client.search_local_gateway_routes",
        "description": "Searches for routes in specified local gateway route table. Parameters: LocalGatewayRouteTableId (string) - Required. ID of the local gateway route table. Filters (list) - Filters for the routes. MaxResults (integer) - Maximum number of routes to return. Returns: dict with routes information."
    },
    "ec2.client.search_transit_gateway_multicast_groups": {
        "new_func": "ec2.client.search_transit_gateway_multicast_groups",
        "description": "Searches transit gateway multicast groups. Parameters: TransitGatewayMulticastDomainId (string) - ID of the transit gateway multicast domain. Filters (list) - Filters for the multicast groups. MaxResults (integer) - Maximum number of results to return. Returns: dict with multicast group membership information."
    },
    "ec2.client.search_transit_gateway_routes": {
        "new_func": "ec2.client.search_transit_gateway_routes",
        "description": "Searches for routes in specified transit gateway route table. Parameters: TransitGatewayRouteTableId (string) - Required. ID of the transit gateway route table. Filters (list) - Required. Filters for the routes. MaxResults (integer) - Maximum number of routes to return. DryRun (boolean) - Checks permissions without making request. Returns: dict with routes and whether additional routes are available."
    },
    "ec2.client.send_diagnostic_interrupt": {
        "new_func": "ec2.client.send_diagnostic_interrupt",
        "description": "Sends a diagnostic interrupt to an EC2 instance. Parameters: InstanceId (string) - Required. The ID of the instance. DryRun (boolean) - Checks permissions without making the request. Returns: None."
    },
    "ec2.client.start_instances": {
        "new_func": "ec2.client.start_instances",
        "description": "Starts an Amazon EBS-backed instance that was previously stopped. Parameters: InstanceIds (list) - Required. The IDs of the instances. AdditionalInfo (string) - Reserved. DryRun (boolean) - Checks permissions without making the request. Returns: dict with information about the starting instances, including CurrentState, InstanceId, and PreviousState."
    },
    "ec2.client.start_network_insights_access_scope_analysis": {
        "new_func": "ec2.client.start_network_insights_access_scope_analysis",
        "description": "Starts analysis on a specified Network Access Scope. Parameters: NetworkInsightsAccessScopeId (string) - Required. The ID of the Network Access Scope. DryRun (boolean) - Checks permissions without making the request. TagSpecifications (list) - The tags to apply. ClientToken (string) - Required. Ensures idempotency. Returns: dict with details of the analysis, including NetworkInsightsAccessScopeAnalysisId and status."
    },
    "ec2.client.start_network_insights_analysis": {
        "new_func": "ec2.client.start_network_insights_analysis",
        "description": "Starts analysis on the specified path to determine if it is reachable. Parameters: NetworkInsightsPathId (string) - Required. The ID of the path. AdditionalAccounts (list) - Member accounts for path traversal. FilterInArns (list) - ARNs of resources to traverse. DryRun (boolean) - Checks permissions without making the request. TagSpecifications (list) - Tags to apply. ClientToken (string) - Required. Ensures idempotency. Returns: dict with details of the analysis, including path components and explanations."
    },
    "ec2.client.start_vpc_endpoint_service_private_dns_verification": {
        "new_func": "ec2.client.start_vpc_endpoint_service_private_dns_verification",
        "description": "Begins verification for a service provider to prove ownership of a private DNS domain for an endpoint service. Parameters: ServiceId (string) - Required. The ID of the endpoint service. DryRun (boolean) - Checks permissions without making the request. Returns: dict with a boolean indicating if the request was successful."
    },
    "ec2.client.stop_instances": {
        "new_func": "ec2.client.stop_instances",
        "description": "Stops one or more Amazon EBS-backed instances. Parameters: InstanceIds (list) - Required. IDs of the instances to stop. Hibernate (boolean) - Hibernates the instance if enabled at launch. DryRun (boolean) - Checks permissions without making the request. Force (boolean) - Forces instances to stop without flushing file system caches. Returns: dict with 'StoppingInstances' containing state change information for each instance."
    },
    "ec2.client.terminate_client_vpn_connections": {
        "new_func": "ec2.client.terminate_client_vpn_connections",
        "description": "Terminates active Client VPN endpoint connections. Parameters: ClientVpnEndpointId (string) - Required. ID of the Client VPN endpoint. ConnectionId (string) - ID of the client connection to terminate. Username (string) - Name of the user to terminate all connections for. DryRun (boolean) - Checks permissions without making the request. Returns: dict with 'ClientVpnEndpointId', 'Username', and 'ConnectionStatuses' showing the status of each terminated connection."
    },
    "ec2.client.terminate_instances": {
        "new_func": "ec2.client.terminate_instances",
        "description": "Shuts down one or more instances. Parameters: InstanceIds (list) - Required. IDs of the instances to terminate. DryRun (boolean) - Checks permissions without making the request. Returns: dict with 'TerminatingInstances' containing state change information for each instance."
    },
    "ec2.client.unassign_ipv6_addresses": {
        "new_func": "ec2.client.unassign_ipv6_addresses",
        "description": "Unassigns one or more IPv6 addresses or IPv4 Prefix Delegation prefixes from a network interface. Parameters: Ipv6Addresses (list) - IPv6 addresses to unassign. Ipv6Prefixes (list) - IPv6 prefixes to unassign. NetworkInterfaceId (string) - Required. ID of the network interface. Returns: dict with 'NetworkInterfaceId', 'UnassignedIpv6Addresses', and 'UnassignedIpv6Prefixes'."
    },
    "ec2.client.unassign_private_ip_addresses": {
        "new_func": "ec2.client.unassign_private_ip_addresses",
        "description": "Unassigns one or more secondary private IP addresses or IPv4 Prefix Delegation prefixes from a network interface. Parameters: NetworkInterfaceId (string) - Required. ID of the network interface. PrivateIpAddresses (list) - Secondary private IP addresses to unassign. Ipv4Prefixes (list) - IPv4 prefixes to unassign. Returns: None."
    },
    "ec2.client.unassign_private_nat_gateway_address": {
        "new_func": "ec2.client.unassign_private_nat_gateway_address",
        "description": "Unassigns secondary private IPv4 addresses from a NAT gateway. Parameters: NatGatewayId (string) - Required. ID of the NAT gateway. PrivateIpAddresses (list) - Required. IPv4 addresses to unassign. MaxDrainDurationSeconds (integer) - Time to wait before forcibly releasing IPs. DryRun (boolean) - Check permissions without making the request. Returns: dict with NatGatewayId and NatGatewayAddresses, including details like AllocationId, NetworkInterfaceId, PrivateIp, PublicIp, AssociationId, IsPrimary, FailureMessage, and Status."
    },
    "ec2.client.unlock_snapshot": {
        "new_func": "ec2.client.unlock_snapshot",
        "description": "Unlocks a snapshot locked in governance or compliance mode (if within cooling-off period). Parameters: SnapshotId (string) - Required. ID of the snapshot to unlock. DryRun (boolean) - Check permissions without making the request. Returns: dict with SnapshotId."
    },
    "ec2.client.unmonitor_instances": {
        "new_func": "ec2.client.unmonitor_instances",
        "description": "Disables detailed monitoring for running instances. Parameters: InstanceIds (list) - Required. IDs of instances to stop monitoring. DryRun (boolean) - Check permissions without making the request. Returns: dict with an array of InstanceMonitorings, including InstanceId and Monitoring State."
    },
    "ec2.client.update_security_group_rule_descriptions_egress": {
        "new_func": "ec2.client.update_security_group_rule_descriptions_egress",
        "description": "Updates the description of egress security group rules. Parameters: DryRun (boolean) - Check permissions without making the request. GroupId (string) - ID or GroupName (string) - name of security group. IpPermissions (list) - IP permissions to update. SecurityGroupRuleDescriptions (list) - Descriptions for security group rules. Returns: dict with a boolean Return indicating success or error."
    },
    "ec2.client.update_security_group_rule_descriptions_ingress": {
        "new_func": "ec2.client.update_security_group_rule_descriptions_ingress",
        "description": "Updates the description of ingress security group rules. Parameters: DryRun (boolean) - Check permissions without making the request. GroupId (string) - ID or GroupName (string) - name of security group. IpPermissions (list) - IP permissions to update. SecurityGroupRuleDescriptions (list) - Descriptions for security group rules. Returns: dict with a boolean Return indicating success or error."
    },
    "ec2.client.withdraw_byoip_cidr": {
        "new_func": "ec2.client.withdraw_byoip_cidr",
        "description": "Stops advertising an address range provisioned as an address pool; limit of one operation every 10 seconds. Parameters: Cidr (string) - Required. The address range in CIDR notation. DryRun (boolean) - Checks permissions without making the request. Returns: dict containing 'ByoipCidr' with information about the address pool such as Cidr, Description, AsnAssociations, StatusMessage, State, and NetworkBorderGroup."
    },
    "iam.client.add_client_id_to_open_id_connect_provider": {
        "new_func": "iam.client.add_client_id_to_open_id_connect_provider",
        "description": "Adds a new client ID to the list of client IDs for a specified IAM OpenID Connect provider resource. Parameters: OpenIDConnectProviderArn (string) - Required. The ARN of the IAM OIDC provider. ClientID (string) - Required. The client ID to add. Returns: None."
    },
    "iam.client.add_role_to_instance_profile": {
        "new_func": "iam.client.add_role_to_instance_profile",
        "description": "Adds an IAM role to an instance profile, which can contain only one role. Requires PassRole permission. Parameters: InstanceProfileName (string) - Required. The instance profile name. RoleName (string) - Required. The role name to add. Returns: None."
    },
    "iam.client.add_user_to_group": {
        "new_func": "iam.client.add_user_to_group",
        "description": "Adds a user to a group. Parameters: GroupName (string) - Required. The group name to update. UserName (string) - Required. The user name to add. Returns: None."
    },
    "iam.client.attach_group_policy": {
        "new_func": "iam.client.attach_group_policy",
        "description": "Attaches a managed policy to an IAM group. Parameters: GroupName (string) - Required. The group name. PolicyArn (string) - Required. The ARN of the policy to attach. Returns: None."
    },
    "iam.client.attach_role_policy": {
        "new_func": "iam.client.attach_role_policy",
        "description": "Attaches a managed policy to an IAM role. Parameters: RoleName (string) - Required. The name of the role. PolicyArn (string) - Required. The ARN of the policy to attach. Returns: None."
    },
    "iam.client.attach_user_policy": {
        "new_func": "iam.client.attach_user_policy",
        "description": "Attaches a managed policy to an IAM user. Parameters: UserName (string) - Required. The name of the user. PolicyArn (string) - Required. The ARN of the policy to attach. Returns: None."
    },
    "iam.client.can_paginate": {
        "new_func": "iam.client.can_paginate",
        "description": "Checks if an operation can be paginated. Parameter: operation_name (string) - The operation name. Returns: True if the operation can be paginated, False otherwise."
    },
    "iam.client.change_password": {
        "new_func": "iam.client.change_password",
        "description": "Changes the password of the IAM user calling this operation. Parameters: OldPassword (string) - Required. The current password. NewPassword (string) - Required. The new password. Returns: None."
    },
    "iam.client.close": {
        "new_func": "iam.client.close",
        "description": "Closes underlying endpoint connections. No parameters. Returns: None."
    },
    "iam.client.create_access_key": {
        "new_func": "iam.client.create_access_key",
        "description": "Creates a new AWS secret access key and corresponding AWS access key ID for a specified user. Parameters: UserName (string) - The name of the IAM user that the new key will belong to. Returns: dict with AccessKey containing UserName, AccessKeyId, Status, SecretAccessKey, and CreateDate."
    },
    "iam.client.create_account_alias": {
        "new_func": "iam.client.create_account_alias",
        "description": "Creates an alias for your AWS account. Parameters: AccountAlias (string) - Required. The account alias to create. Returns: None."
    },
    "iam.client.create_group": {
        "new_func": "iam.client.create_group",
        "description": "Creates a new IAM group. Parameters: Path (string) - The path to the group (optional, defaults to '/'); GroupName (string) - Required. The name of the group to create. Returns: dict with Group containing Path, GroupName, GroupId, Arn, and CreateDate."
    },
    "iam.client.create_instance_profile": {
        "new_func": "iam.client.create_instance_profile",
        "description": "Creates a new instance profile. Parameters: InstanceProfileName (string) - Required. The name of the instance profile; Path (string) - The path to the instance profile (optional, defaults to '/'); Tags (list) - A list of tags to attach to the instance profile. Returns: dict with InstanceProfile containing Path, InstanceProfileName, InstanceProfileId, Arn, CreateDate, Roles, and Tags."
    },
    "iam.client.create_login_profile": {
        "new_func": "iam.client.create_login_profile",
        "description": "Creates a password for the specified IAM user for AWS Management Console access. Parameters: UserName (string) - Required. The user's name; Password (string) - Required. The new password for the user; PasswordResetRequired (boolean) - Specifies if the user is required to set a new password on next sign-in. Returns: dict with LoginProfile containing UserName, CreateDate, and PasswordResetRequired."
    },
    "iam.client.create_open_id_connect_provider": {
        "new_func": "iam.client.create_open_id_connect_provider",
        "description": "Creates an IAM OIDC identity provider. Parameters: Url (string) - Required. URL of the OIDC IdP. ClientIDList (list) - List of client IDs (audiences). ThumbprintList (list) - List of server certificate thumbprints. Tags (list) - Tags for the IAM OIDC provider. Returns: dict with 'OpenIDConnectProviderArn' and 'Tags'."
    },
    "iam.client.create_policy": {
        "new_func": "iam.client.create_policy",
        "description": "Creates a new managed IAM policy. Parameters: PolicyName (string) - Required. Name of the policy. Path (string) - Path for the policy. PolicyDocument (string) - Required. JSON policy document content. Description (string) - Policy description. Tags (list) - Tags for the policy. Returns: dict with detailed 'Policy' information."
    },
    "iam.client.create_policy_version": {
        "new_func": "iam.client.create_policy_version",
        "description": "Creates a new version of a specified managed policy. Parameters: PolicyArn (string) - Required. ARN of the IAM policy. PolicyDocument (string) - Required. JSON policy document. SetAsDefault (boolean) - Sets new version as default. Returns: dict with 'PolicyVersion' details."
    },
    "iam.client.create_role": {
        "new_func": "iam.client.create_role",
        "description": "Creates a new IAM role. Parameters: Path (string) - Path to the role. RoleName (string) - Required. Name of the role. AssumeRolePolicyDocument (string) - Required. Trust relationship policy document. Description (string) - Role description. MaxSessionDuration (integer) - Max session duration in seconds. PermissionsBoundary (string) - ARN of permissions boundary policy. Tags (list) - Tags for the role. Returns: dict with 'Role' details including ARN, policy document, and 'RoleLastUsed'."
    },
    "iam.client.create_saml_provider": {
        "new_func": "iam.client.create_saml_provider",
        "description": "Creates an IAM SAML 2.0 identity provider. Parameters: SAMLMetadataDocument (string) - Required. XML document from IdP. Name (string) - Required. Name of the provider. Tags (list) - Tags for the SAML provider. Returns: dict with 'SAMLProviderArn' and 'Tags'."
    },
    "iam.client.create_service_linked_role": {
        "new_func": "iam.client.create_service_linked_role",
        "description": "Creates an IAM role linked to an AWS service. Parameters: AWSServiceName (string) - Required. The service principal for the AWS service. Description (string) - The role description. CustomSuffix (string) - A string to form the complete role name. Returns: dict with Role details including Path, RoleName, RoleId, Arn, CreateDate, AssumeRolePolicyDocument, Description, MaxSessionDuration, PermissionsBoundary, Tags, and RoleLastUsed."
    },
    "iam.client.create_service_specific_credential": {
        "new_func": "iam.client.create_service_specific_credential",
        "description": "Generates credentials for a specific service. Parameters: UserName (string) - Required. The name of the IAM user. ServiceName (string) - Required. The AWS service for the credentials. Returns: dict with ServiceSpecificCredential including CreateDate, ServiceName, ServiceUserName, ServicePassword, ServiceSpecificCredentialId, UserName, and Status."
    },
    "iam.client.create_user": {
        "new_func": "iam.client.create_user",
        "description": "Creates a new IAM user. Parameters: Path (string) - The path for the user name. UserName (string) - Required. The name of the user. PermissionsBoundary (string) - The ARN of the policy for permissions boundary. Tags (list) - Tags to attach to the user. Returns: dict with User details including Path, UserName, UserId, Arn, CreateDate, PasswordLastUsed, PermissionsBoundary, and Tags."
    },
    "iam.client.create_virtual_mfa_device": {
        "new_func": "iam.client.create_virtual_mfa_device",
        "description": "Creates a new virtual MFA device. Parameters: Path (string) - The path for the MFA device. VirtualMFADeviceName (string) - Required. The unique name of the virtual MFA device. Tags (list) - Tags to attach to the MFA device. Returns: dict with VirtualMFADevice details including SerialNumber, Base32StringSeed, QRCodePNG, User, EnableDate, and Tags."
    },
    "iam.client.deactivate_mfa_device": {
        "new_func": "iam.client.deactivate_mfa_device",
        "description": "Deactivates an MFA device. Parameters: UserName (string) - Required. The user name associated with the MFA device. SerialNumber (string) - Required. The serial number of the MFA device. Returns: None."
    },
    "iam.client.delete_access_key": {
        "new_func": "iam.client.delete_access_key",
        "description": "Deletes an IAM user's access key pair. Parameters: UserName (string) - The user's name. AccessKeyId (string) - Required. The access key ID to delete. Returns: None."
    },
    "iam.client.delete_account_alias": {
        "new_func": "iam.client.delete_account_alias",
        "description": "Deletes a specified AWS account alias. Parameters: AccountAlias (string) - Required. The account alias to delete. Returns: None."
    },
    "iam.client.delete_account_password_policy": {
        "new_func": "iam.client.delete_account_password_policy",
        "description": "Deletes the password policy for the AWS account. No parameters required. Returns: None."
    },
    "iam.client.delete_group": {
        "new_func": "iam.client.delete_group",
        "description": "Deletes a specified IAM group, which must not contain any users or attached policies. Parameters: GroupName (string) - Required. The name of the group to delete. Returns: None."
    },
    "iam.client.delete_group_policy": {
        "new_func": "iam.client.delete_group_policy",
        "description": "Deletes an inline policy embedded in a specified IAM group. Parameters: GroupName (string) - Required. The group's name. PolicyName (string) - Required. The name of the policy to delete. Returns: None."
    },
    "iam.client.delete_instance_profile": {
        "new_func": "iam.client.delete_instance_profile",
        "description": "Deletes a specified IAM instance profile. Parameters: InstanceProfileName (string) - Required. The name of the instance profile to delete. Returns: None. Exceptions: NoSuchEntityException, DeleteConflictException, LimitExceededException, ServiceFailureException."
    },
    "iam.client.delete_login_profile": {
        "new_func": "iam.client.delete_login_profile",
        "description": "Deletes the password for a specified IAM user. Parameters: UserName (string) - Required. The name of the user whose password you want to delete. Returns: None. Exceptions: EntityTemporarilyUnmodifiableException, NoSuchEntityException, LimitExceededException, ServiceFailureException."
    },
    "iam.client.delete_open_id_connect_provider": {
        "new_func": "iam.client.delete_open_id_connect_provider",
        "description": "Deletes an IAM OpenID Connect provider resource. Parameters: OpenIDConnectProviderArn (string) - Required. The ARN of the IAM OpenID Connect provider resource to delete. Returns: None. Exceptions: InvalidInputException, NoSuchEntityException, ServiceFailureException."
    },
    "iam.client.delete_policy": {
        "new_func": "iam.client.delete_policy",
        "description": "Deletes a specified managed IAM policy. Parameters: PolicyArn (string) - Required. The ARN of the IAM policy to delete. Returns: None. Exceptions: NoSuchEntityException, LimitExceededException, InvalidInputException, DeleteConflictException, ServiceFailureException."
    },
    "iam.client.delete_policy_version": {
        "new_func": "iam.client.delete_policy_version",
        "description": "Deletes a specified version from a managed IAM policy. Parameters: PolicyArn (string) - Required. The ARN of the IAM policy. VersionId (string) - Required. The policy version to delete. Returns: None. Exceptions: NoSuchEntityException, LimitExceededException, InvalidInputException, DeleteConflictException, ServiceFailureException."
    },
    "iam.client.delete_role": {
        "new_func": "iam.client.delete_role",
        "description": "Deletes a specified IAM role. Before deleting, manually remove inline policies, detach managed policies, and remove any instance profiles. Parameters: RoleName (string) - Required. Name of the role to delete. Returns: None. Exceptions: NoSuchEntityException, DeleteConflictException, LimitExceededException, UnmodifiableEntityException, ConcurrentModificationException, ServiceFailureException."
    },
    "iam.client.delete_role_permissions_boundary": {
        "new_func": "iam.client.delete_role_permissions_boundary",
        "description": "Deletes the permissions boundary for a specified IAM role, which might increase its permissions. Parameters: RoleName (string) - Required. Name of the IAM role. Returns: None. Exceptions: NoSuchEntityException, UnmodifiableEntityException, ServiceFailureException."
    },
    "iam.client.delete_role_policy": {
        "new_func": "iam.client.delete_role_policy",
        "description": "Deletes a specified inline policy from an IAM role. Parameters: RoleName (string) - Required. Name of the role. PolicyName (string) - Required. Name of the inline policy. Returns: None. Exceptions: NoSuchEntityException, LimitExceededException, UnmodifiableEntityException, ServiceFailureException."
    },
    "iam.client.delete_saml_provider": {
        "new_func": "iam.client.delete_saml_provider",
        "description": "Deletes a SAML provider resource in IAM. Parameters: SAMLProviderArn (string) - Required. ARN of the SAML provider. Returns: None. Exceptions: InvalidInputException, LimitExceededException, NoSuchEntityException, ServiceFailureException."
    },
    "iam.client.delete_server_certificate": {
        "new_func": "iam.client.delete_server_certificate",
        "description": "Deletes a specified server certificate. Remove references from services before deletion to avoid service disruption. Parameters: ServerCertificateName (string) - Required. Name of the server certificate. Returns: None. Exceptions: NoSuchEntityException, DeleteConflictException, LimitExceededException, ServiceFailureException."
    },
    "iam.client.delete_service_linked_role": {
        "new_func": "iam.client.delete_service_linked_role",
        "description": "Deletes a service-linked role and returns a DeletionTaskId. Parameters: RoleName (string) - Required. Name of the role to be deleted. Returns: dict with DeletionTaskId (string) - Identifier for the deletion task."
    },
    "iam.client.delete_service_specific_credential": {
        "new_func": "iam.client.delete_service_specific_credential",
        "description": "Deletes a specified service-specific credential. Parameters: UserName (string) - Name of the IAM user. ServiceSpecificCredentialId (string) - Required. Unique identifier of the credential. Returns: None."
    },
    "iam.client.delete_signing_certificate": {
        "new_func": "iam.client.delete_signing_certificate",
        "description": "Deletes a signing certificate for the specified IAM user. Parameters: UserName (string) - User name of the certificate owner. CertificateId (string) - Required. ID of the certificate to delete. Returns: None."
    },
    "iam.client.delete_ssh_public_key": {
        "new_func": "iam.client.delete_ssh_public_key",
        "description": "Deletes an SSH public key. Parameters: UserName (string) - Required. Name of the IAM user. SSHPublicKeyId (string) - Required. Unique identifier for the SSH public key. Returns: None."
    },
    "iam.client.delete_user": {
        "new_func": "iam.client.delete_user",
        "description": "Deletes an IAM user and their associated items. Parameters: UserName (string) - Required. Name of the user to delete. Returns: None."
    },
    "iam.client.delete_user_permissions_boundary": {
        "new_func": "iam.client.delete_user_permissions_boundary",
        "description": "Deletes the permissions boundary for an IAM user. Parameters: UserName (string) - Required. The name of the user. Returns: None. Exceptions: NoSuchEntityException, ServiceFailureException."
    },
    "iam.client.delete_user_policy": {
        "new_func": "iam.client.delete_user_policy",
        "description": "Deletes an inline policy from an IAM user. Parameters: UserName (string) - Required. The user's name. PolicyName (string) - Required. The policy name to delete. Returns: None. Exceptions: NoSuchEntityException, LimitExceededException, ServiceFailureException."
    },
    "iam.client.delete_virtual_mfa_device": {
        "new_func": "iam.client.delete_virtual_mfa_device",
        "description": "Deletes a virtual MFA device. Parameters: SerialNumber (string) - Required. Unique serial number/ARN of the MFA device. Returns: None. Exceptions: NoSuchEntityException, DeleteConflictException, LimitExceededException, ServiceFailureException, ConcurrentModificationException."
    },
    "iam.client.detach_group_policy": {
        "new_func": "iam.client.detach_group_policy",
        "description": "Removes a managed policy from an IAM group. Parameters: GroupName (string) - Required. The group's name. PolicyArn (string) - Required. The ARN of the policy to detach. Returns: None. Exceptions: NoSuchEntityException, LimitExceededException, InvalidInputException, ServiceFailureException."
    },
    "iam.client.detach_role_policy": {
        "new_func": "iam.client.detach_role_policy",
        "description": "Removes a managed policy from an IAM role. Parameters: RoleName (string) - Required. The role's name. PolicyArn (string) - Required. The ARN of the policy to detach. Returns: None. Exceptions: NoSuchEntityException, LimitExceededException, InvalidInputException, UnmodifiableEntityException, ServiceFailureException."
    },
    "iam.client.detach_user_policy": {
        "new_func": "iam.client.detach_user_policy",
        "description": "Detaches a managed policy from an IAM user. Parameters: UserName (string) - Required. Name of the IAM user. PolicyArn (string) - Required. ARN of the policy to detach. Returns: None."
    },
    "iam.client.enable_mfa_device": {
        "new_func": "iam.client.enable_mfa_device",
        "description": "Enables and associates an MFA device with an IAM user. Parameters: UserName (string) - Required. Name of the user. SerialNumber (string) - Required. Serial number of the MFA device. AuthenticationCode1 (string) - Required. First authentication code. AuthenticationCode2 (string) - Required. Second authentication code. Returns: None."
    },
    "iam.client.generate_credential_report": {
        "new_func": "iam.client.generate_credential_report",
        "description": "Generates a credential report for the AWS account. Returns: dict with 'State' (string) - The state of the credential report, 'Description' (string) - Information about the report."
    },
    "iam.client.generate_organizations_access_report": {
        "new_func": "iam.client.generate_organizations_access_report",
        "description": "Generates a service last accessed data report for an entity or policy in AWS Organizations. Parameters: EntityPath (string) - Required. The path of the entity. OrganizationsPolicyId (string) - Optional. SCP identifier. Returns: dict with 'JobId' (string) - Identifier for the report generation job."
    },
    "iam.client.generate_service_last_accessed_details": {
        "new_func": "iam.client.generate_service_last_accessed_details",
        "description": "Generates a report on when an IAM resource was last used to access AWS services. Parameters: Arn (string) - Required. ARN of the IAM resource. Granularity (string) - Level of detail for the report. Returns: dict with 'JobId' (string) - Identifier for the detailed access report job."
    },
    "iam.client.get_access_key_last_used": {
        "new_func": "iam.client.get_access_key_last_used",
        "description": "Retrieves information about when a specified access key was last used. Parameters: AccessKeyId (string) - Required. Returns: dict with 'UserName' and 'AccessKeyLastUsed' containing 'LastUsedDate', 'ServiceName', and 'Region'."
    },
    "iam.client.get_account_authorization_details": {
        "new_func": "iam.client.get_account_authorization_details",
        "description": "Retrieves information about IAM users, groups, roles, and policies in an AWS account. Parameters: Filter (list) - Entity types to include. MaxItems (integer) - Maximum number of items to return. Marker (string) - Position to start from in a paginated list. Returns: dict with 'UserDetailList', 'GroupDetailList', 'RoleDetailList', 'Policies', 'IsTruncated', and 'Marker'."
    },
    "iam.client.get_account_password_policy": {
        "new_func": "iam.client.get_account_password_policy",
        "description": "Retrieves the password policy for the AWS account. Returns: dict with 'PasswordPolicy' detailing password complexity requirements and rotation periods."
    },
    "iam.client.get_account_summary": {
        "new_func": "iam.client.get_account_summary",
        "description": "Retrieves information about IAM entity usage and quotas in the AWS account. Returns: dict with 'SummaryMap' containing key-value pairs of IAM entity usage and quotas."
    },
    "iam.client.get_context_keys_for_custom_policy": {
        "new_func": "iam.client.get_context_keys_for_custom_policy",
        "description": "Gets a list of context keys referenced in the input policies. Parameters: PolicyInputList (list) - Required. Policies to check for context keys. Returns: dict with 'ContextKeyNames' containing a list of context keys."
    },
    "iam.client.get_context_keys_for_principal_policy": {
        "new_func": "iam.client.get_context_keys_for_principal_policy",
        "description": "Retrieves a list of context keys referenced in IAM policies attached to the specified IAM entity (user, group, or role). Parameters: PolicySourceArn (string) - Required. ARN of the IAM entity. PolicyInputList (list) - Optional list of additional policies. Returns: dict with ContextKeyNames (list of strings)."
    },
    "iam.client.get_credential_report": {
        "new_func": "iam.client.get_credential_report",
        "description": "Retrieves a credential report for the AWS account. Returns: dict with Content (Base64-encoded bytes), ReportFormat (string), and GeneratedTime (datetime)."
    },
    "iam.client.get_group": {
        "new_func": "iam.client.get_group",
        "description": "Returns a list of IAM users in the specified IAM group. Parameters: GroupName (string) - Required. Marker (string) - To paginate results, use after truncated results. MaxItems (integer) - Maximum number of items to return. Returns: dict with Group details, Users list, IsTruncated (boolean), and Marker (string)."
    },
    "iam.client.get_group_policy": {
        "new_func": "iam.client.get_group_policy",
        "description": "Retrieves the specified inline policy document embedded in the specified IAM group. Parameters: GroupName (string) - Required. PolicyName (string) - Required. Returns: dict with GroupName (string), PolicyName (string), and PolicyDocument (string)."
    },
    "iam.client.get_instance_profile": {
        "new_func": "iam.client.get_instance_profile",
        "description": "Retrieves information about the specified instance profile including path, GUID, ARN, and role. Parameters: InstanceProfileName (string) - Required. Returns: dict with InstanceProfile details including Path, InstanceProfileName, InstanceProfileId, Arn, CreateDate, Roles list, and Tags list."
    },
    "iam.client.get_login_profile": {
        "new_func": "iam.client.get_login_profile",
        "description": "Retrieves the login profile for an IAM user. Parameters: UserName (string) - Required. The user's name. Returns: dict with 'LoginProfile' containing 'UserName', 'CreateDate', 'PasswordResetRequired'."
    },
    "iam.client.get_mfa_device": {
        "new_func": "iam.client.get_mfa_device",
        "description": "Retrieves information about an MFA device for a user. Parameters: SerialNumber (string) - Required. Uniquely identifies the MFA device. UserName (string) - The user's name. Returns: dict with 'UserName', 'SerialNumber', 'EnableDate', 'Certifications'."
    },
    "iam.client.get_open_id_connect_provider": {
        "new_func": "iam.client.get_open_id_connect_provider",
        "description": "Returns information about the specified OpenID Connect provider. Parameters: OpenIDConnectProviderArn (string) - Required. The ARN of the OIDC provider. Returns: dict with 'Url', 'ClientIDList', 'ThumbprintList', 'CreateDate', 'Tags'."
    },
    "iam.client.get_organizations_access_report": {
        "new_func": "iam.client.get_organizations_access_report",
        "description": "Retrieves a service last accessed data report for Organizations. Parameters: JobId (string) - Required. Identifier of the report request. MaxItems (integer) - Maximum number of items to return. Marker (string) - Position to start the next list of returned items. SortKey (string) - Key to sort the results. Returns: dict with 'JobStatus', 'JobCreationDate', 'JobCompletionDate', 'NumberOfServicesAccessible', 'NumberOfServicesNotAccessed', 'AccessDetails', 'IsTruncated', 'Marker', 'ErrorDetails'."
    },
    "iam.client.get_paginator": {
        "new_func": "iam.client.get_paginator",
        "description": "Creates a paginator for an operation. Parameters: operation_name (string) - The operation name. Returns: botocore.paginate.Paginator."
    },
    "iam.client.get_policy": {
        "new_func": "iam.client.get_policy",
        "description": "Retrieves information about a managed policy. Parameters: PolicyArn (string) - Required. ARN of the managed policy. Returns: dict with policy metadata including PolicyName, PolicyId, Arn, Path, DefaultVersionId, AttachmentCount, PermissionsBoundaryUsageCount, IsAttachable, Description, CreateDate, UpdateDate, and Tags."
    },
    "iam.client.get_policy_version": {
        "new_func": "iam.client.get_policy_version",
        "description": "Retrieves a specific version of a managed policy. Parameters: PolicyArn (string) - Required. ARN of the policy. VersionId (string) - Required. Identifier for the policy version. Returns: dict with the policy version details including Document, VersionId, IsDefaultVersion, and CreateDate."
    },
    "iam.client.get_role": {
        "new_func": "iam.client.get_role",
        "description": "Retrieves information about the specified IAM role. Parameters: RoleName (string) - Required. Name of the role. Returns: dict with role details including Path, RoleName, RoleId, Arn, CreateDate, AssumeRolePolicyDocument, Description, MaxSessionDuration, PermissionsBoundary, Tags, and RoleLastUsed."
    },
    "iam.client.get_role_policy": {
        "new_func": "iam.client.get_role_policy",
        "description": "Retrieves an inline policy document embedded with an IAM role. Parameters: RoleName (string) - Required. Name of the role. PolicyName (string) - Required. Name of the policy. Returns: dict with RoleName, PolicyName, and PolicyDocument."
    },
    "iam.client.get_saml_provider": {
        "new_func": "iam.client.get_saml_provider",
        "description": "Returns the SAML provider metadata document. Parameters: SAMLProviderArn (string) - Required. ARN of the SAML provider. Returns: dict with SAMLMetadataDocument, CreateDate, ValidUntil, and Tags."
    },
    "iam.client.get_server_certificate": {
        "new_func": "iam.client.get_server_certificate",
        "description": "Retrieves a specified server certificate stored in IAM. Parameters: ServerCertificateName (string) - Required. Name of the server certificate. Returns: dict containing ServerCertificate with metadata, CertificateBody, CertificateChain, and Tags."
    },
    "iam.client.get_service_last_accessed_details": {
        "new_func": "iam.client.get_service_last_accessed_details",
        "description": "Retrieves a service last accessed report. Parameters: JobId (string) - Required. ID of the report job. MaxItems (integer) - Maximum number of items in response. Marker (string) - Position in pagination. Returns: dict with JobStatus, JobType, JobCreationDate, ServicesLastAccessed, JobCompletionDate, IsTruncated, Marker, and Error."
    },
    "iam.client.get_service_last_accessed_details_with_entities": {
        "new_func": "iam.client.get_service_last_accessed_details_with_entities",
        "description": "Retrieves entities that could have used permissions to access a service. Parameters: JobId (string) - Required. ID of the report job. ServiceNamespace (string) - Required. Namespace of the AWS service. MaxItems (integer) - Maximum number of items in response. Marker (string) - Position in pagination. Returns: dict with JobStatus, JobCreationDate, JobCompletionDate, EntityDetailsList, IsTruncated, Marker, and Error."
    },
    "iam.client.get_service_linked_role_deletion_status": {
        "new_func": "iam.client.get_service_linked_role_deletion_status",
        "description": "Checks status of service-linked role deletion. Parameters: DeletionTaskId (string) - Required. Identifier for the deletion task. Returns: dict with Status, and Reason containing a short description and RoleUsageList if deletion failed."
    },
    "iam.client.get_ssh_public_key": {
        "new_func": "iam.client.get_ssh_public_key",
        "description": "Retrieves an SSH public key. Parameters: UserName (string) - Required. Associated IAM user name. SSHPublicKeyId (string) - Required. SSH public key ID. Encoding (string) - Required. Format for the public key. Returns: dict with SSHPublicKey containing UserName, SSHPublicKeyId, Fingerprint, SSHPublicKeyBody, Status, and UploadDate."
    },
    "iam.client.get_user": {
        "new_func": "iam.client.get_user",
        "description": "Retrieves information about the specified IAM user. Parameters: UserName (string) - Optional. The name of the user to get information. Defaults to the user making the request if not specified. Returns: dict with user details including Path, UserName, UserId, Arn, CreateDate, PasswordLastUsed, PermissionsBoundary, and Tags."
    },
    "iam.client.get_user_policy": {
        "new_func": "iam.client.get_user_policy",
        "description": "Retrieves the specified inline policy document for an IAM user. Parameters: UserName (string) - Required. Name of the user. PolicyName (string) - Required. Name of the policy document to retrieve. Returns: dict with UserName, PolicyName, and PolicyDocument as a URL-encoded JSON string."
    },
    "iam.client.get_waiter": {
        "new_func": "iam.client.get_waiter",
        "description": "Returns a waiter object that waits for a condition to be met. Parameters: waiter_name (str) - Required. Name of the waiter. Returns: botocore.waiter.Waiter object."
    },
    "iam.client.list_access_keys": {
        "new_func": "iam.client.list_access_keys",
        "description": "Lists the access key IDs for the specified IAM user. Parameters: UserName (string) - Optional. Name of the user. Marker (string) - For paginated results, indicates where to continue from. MaxItems (integer) - Maximum number of items to return in the response. Returns: dict with AccessKeyMetadata, IsTruncated, and Marker indicating access keys and pagination details."
    },
    "iam.client.list_account_aliases": {
        "new_func": "iam.client.list_account_aliases",
        "description": "Lists the account alias associated with the Amazon Web Services account. Parameters: Marker (string) - For paginated results, indicates where to continue from. MaxItems (integer) - Maximum number of items to return in the response. Returns: dict with AccountAliases, IsTruncated, and Marker indicating account aliases and pagination details."
    },
    "iam.client.list_attached_group_policies": {
        "new_func": "iam.client.list_attached_group_policies",
        "description": "Lists all managed policies attached to a specified IAM group. Parameters: GroupName (string) - Required. Name of the group. PathPrefix (string) - Optional. Prefix for filtering policies. Marker (string) - Optional. For paginated results. MaxItems (integer) - Optional. Maximum number of items to return. Returns: dict with AttachedPolicies, IsTruncated, and Marker."
    },
    "iam.client.list_attached_role_policies": {
        "new_func": "iam.client.list_attached_role_policies",
        "description": "Lists all managed policies attached to a specified IAM role. Parameters: RoleName (string) - Required. Name of the role. PathPrefix (string) - Optional. Prefix for filtering policies. Marker (string) - Optional. For paginated results. MaxItems (integer) - Optional. Maximum number of items to return. Returns: dict with AttachedPolicies, IsTruncated, and Marker."
    },
    "iam.client.list_attached_user_policies": {
        "new_func": "iam.client.list_attached_user_policies",
        "description": "Lists all managed policies attached to a specified IAM user. Parameters: UserName (string) - Required. Name of the user. PathPrefix (string) - Optional. Prefix for filtering policies. Marker (string) - Optional. For paginated results. MaxItems (integer) - Optional. Maximum number of items to return. Returns: dict with AttachedPolicies, IsTruncated, and Marker."
    },
    "iam.client.list_entities_for_policy": {
        "new_func": "iam.client.list_entities_for_policy",
        "description": "Lists all IAM users, groups, and roles that a specified managed policy is attached to. Parameters: PolicyArn (string) - Required. ARN of the policy. EntityFilter (string) - Optional. Type of entity to return. PathPrefix (string) - Optional. Prefix for filtering entities. PolicyUsageFilter (string) - Optional. Filter for policy usage. Marker (string) - Optional. For paginated results. MaxItems (integer) - Optional. Maximum number of items to return. Returns: dict with PolicyGroups, PolicyUsers, PolicyRoles, IsTruncated, and Marker."
    },
    "iam.client.list_group_policies": {
        "new_func": "iam.client.list_group_policies",
        "description": "Lists the names of inline policies embedded in a specified IAM group. Parameters: GroupName (string) - Required. Name of the group. Marker (string) - Optional. For paginated results. MaxItems (integer) - Optional. Maximum number of items to return. Returns: dict with PolicyNames, IsTruncated, and Marker."
    },
    "iam.client.list_groups": {
        "new_func": "iam.client.list_groups",
        "description": "Lists IAM groups with a specified path prefix. Parameters: PathPrefix (string) - Path prefix for filtering results, defaults to '/'. Marker (string) - For paginated results, specifies the start of the next set of results. MaxItems (integer) - Maximum number of items to return, defaults to 100. Returns: dict containing 'Groups' (list of group information), 'IsTruncated' (boolean), and 'Marker' (string for further pagination)."
    },
    "iam.client.list_groups_for_user": {
        "new_func": "iam.client.list_groups_for_user",
        "description": "Lists IAM groups a user belongs to. Parameters: UserName (string) - Required. Name of the user. Marker (string) - For paginated results, specifies the start of the next set of results. MaxItems (integer) - Maximum number of items to return, defaults to 100. Returns: dict containing 'Groups' (list of group information), 'IsTruncated' (boolean), and 'Marker' (string for further pagination)."
    },
    "iam.client.list_instance_profile_tags": {
        "new_func": "iam.client.list_instance_profile_tags",
        "description": "Lists tags for an IAM instance profile. Parameters: InstanceProfileName (string) - Required. Name of the instance profile. Marker (string) - For paginated results, specifies the start of the next set of results. MaxItems (integer) - Maximum number of tags to return, defaults to 100. Returns: dict containing 'Tags' (list of tags), 'IsTruncated' (boolean), and 'Marker' (string for further pagination)."
    },
    "iam.client.list_instance_profiles": {
        "new_func": "iam.client.list_instance_profiles",
        "description": "Lists instance profiles with a specified path prefix. Parameters: PathPrefix (string) - Path prefix for filtering results, defaults to '/'. Marker (string) - For paginated results, specifies the start of the next set of results. MaxItems (integer) - Maximum number of profiles to return, defaults to 100. Returns: dict containing 'InstanceProfiles' (list of instance profile information), 'IsTruncated' (boolean), and 'Marker' (string for further pagination)."
    },
    "iam.client.list_instance_profiles_for_role": {
        "new_func": "iam.client.list_instance_profiles_for_role",
        "description": "Lists instance profiles associated with a specified IAM role. Parameters: RoleName (string) - Required. Name of the role. Marker (string) - For paginated results, specifies the start of the next set of results. MaxItems (integer) - Maximum number of profiles to return, defaults to 100. Returns: dict containing 'InstanceProfiles' (list of instance profile information), 'IsTruncated' (boolean), and 'Marker' (string for further pagination)."
    },
    "iam.client.list_mfa_device_tags": {
        "new_func": "iam.client.list_mfa_device_tags",
        "description": "Lists tags for an IAM virtual MFA device, sorted by tag key. Parameters: SerialNumber (string) - Required. Identifier for the MFA device. Marker (string) - Pagination marker. MaxItems (integer) - Maximum number of items to return, default is 100. Returns: dict with 'Tags', 'IsTruncated', and 'Marker'."
    },
    "iam.client.list_mfa_devices": {
        "new_func": "iam.client.list_mfa_devices",
        "description": "Lists MFA devices for an IAM user. Parameters: UserName (string) - Name of the user. Marker (string) - Pagination marker. MaxItems (integer) - Maximum number of items to return, default is 100. Returns: dict with 'MFADevices', 'IsTruncated', and 'Marker'."
    },
    "iam.client.list_open_id_connect_provider_tags": {
        "new_func": "iam.client.list_open_id_connect_provider_tags",
        "description": "Lists tags for an OIDC identity provider, sorted by tag key. Parameters: OpenIDConnectProviderArn (string) - Required. ARN of the OIDC provider. Marker (string) - Pagination marker. MaxItems (integer) - Maximum number of items to return, default is 100. Returns: dict with 'Tags', 'IsTruncated', and 'Marker'."
    },
    "iam.client.list_open_id_connect_providers": {
        "new_func": "iam.client.list_open_id_connect_providers",
        "description": "Lists OIDC provider resource objects in the AWS account. Returns: dict with 'OpenIDConnectProviderList' containing ARNs of the providers."
    },
    "iam.client.list_policies": {
        "new_func": "iam.client.list_policies",
        "description": "Lists managed policies in your AWS account. Can filter by OnlyAttached, Scope, and PathPrefix. Parameters: Scope (string) - Scope of policies to return ('All', 'AWS', 'Local'). OnlyAttached (boolean) - Whether to list only attached policies. PathPrefix (string) - Path prefix for filtering results. PolicyUsageFilter (string) - Filter for permissions policies or permissions boundaries. Marker (string) - Pagination marker. MaxItems (integer) - Maximum number of items to return, default is 100. Returns: dict with 'Policies', 'IsTruncated', and 'Marker'."
    },
    "iam.client.list_policies_granting_service_access": {
        "new_func": "iam.client.list_policies_granting_service_access",
        "description": "Retrieves a list of policies allowing IAM identities to access specified services. Parameters: Marker (string) - Pagination marker. Arn (string) - Required. ARN of the IAM identity. ServiceNamespaces (list) - Required. Service namespaces for AWS services. Returns: dict with PoliciesGrantingServiceAccess, IsTruncated, and Marker."
    },
    "iam.client.list_policy_tags": {
        "new_func": "iam.client.list_policy_tags",
        "description": "Lists tags attached to a specified IAM customer managed policy. Parameters: PolicyArn (string) - Required. ARN of the IAM policy. Marker (string) - Pagination marker. MaxItems (integer) - Maximum number of items to return. Returns: dict with Tags, IsTruncated, and Marker."
    },
    "iam.client.list_policy_versions": {
        "new_func": "iam.client.list_policy_versions",
        "description": "Lists versions of the specified managed policy, including the default version. Parameters: PolicyArn (string) - Required. ARN of the IAM policy. Marker (string) - Pagination marker. MaxItems (integer) - Maximum number of items to return. Returns: dict with Versions, IsTruncated, and Marker."
    },
    "iam.client.list_role_policies": {
        "new_func": "iam.client.list_role_policies",
        "description": "Lists names of inline policies embedded in the specified IAM role. Parameters: RoleName (string) - Required. Name of the IAM role. Marker (string) - Pagination marker. MaxItems (integer) - Maximum number of items to return. Returns: dict with PolicyNames, IsTruncated, and Marker."
    },
    "iam.client.list_role_tags": {
        "new_func": "iam.client.list_role_tags",
        "description": "Lists tags attached to the specified IAM role. Parameters: RoleName (string) - Required. Name of the IAM role. Marker (string) - Pagination marker. MaxItems (integer) - Maximum number of items to return. Returns: dict with Tags, IsTruncated, and Marker."
    },
    "iam.client.list_roles": {
        "new_func": "iam.client.list_roles",
        "description": "Lists IAM roles with an optional path prefix. Parameters: PathPrefix (string) - Path prefix for filtering results. Marker (string) - Pagination marker for truncated results. MaxItems (integer) - Max number of items to return; affects truncation. Returns: dict with Roles, IsTruncated, and Marker. The Roles list includes role details like Path, RoleName, RoleId, Arn, CreateDate, and AssumeRolePolicyDocument."
    },
    "iam.client.list_saml_provider_tags": {
        "new_func": "iam.client.list_saml_provider_tags",
        "description": "Lists tags for a specified SAML identity provider. Parameters: SAMLProviderArn (string) - Required ARN of the SAML provider. Marker (string) - Pagination marker for truncated results. MaxItems (integer) - Max number of items to return; affects truncation. Returns: dict with Tags, IsTruncated, and Marker."
    },
    "iam.client.list_saml_providers": {
        "new_func": "iam.client.list_saml_providers",
        "description": "Lists SAML provider resources in IAM. Returns: dict with SAMLProviderList including Arn, ValidUntil, and CreateDate for each provider."
    },
    "iam.client.list_server_certificate_tags": {
        "new_func": "iam.client.list_server_certificate_tags",
        "description": "Lists tags attached to an IAM server certificate. Parameters: ServerCertificateName (string) - Required name of the server certificate. Marker (string) - Pagination marker for truncated results. MaxItems (integer) - Max number of items to return; affects truncation. Returns: dict with Tags, IsTruncated, and Marker."
    },
    "iam.client.list_server_certificates": {
        "new_func": "iam.client.list_server_certificates",
        "description": "Lists server certificates with an optional path prefix. Parameters: PathPrefix (string) - Path prefix for filtering results. Marker (string) - Pagination marker for truncated results. MaxItems (integer) - Max number of items to return; affects truncation. Returns: dict with ServerCertificateMetadataList, IsTruncated, and Marker. MetadataList includes Path, ServerCertificateName, ServerCertificateId, Arn, UploadDate, and Expiration."
    },
    "iam.client.list_service_specific_credentials": {
        "new_func": "iam.client.list_service_specific_credentials",
        "description": "Retrieves service-specific credentials for an IAM user. Parameters: UserName (string) - The user's name. ServiceName (string) - Filters results for a specific AWS service. Returns: dict with 'ServiceSpecificCredentials' containing arrays of credential details like UserName, Status, ServiceUserName, CreateDate, ServiceSpecificCredentialId, and ServiceName."
    },
    "iam.client.list_signing_certificates": {
        "new_func": "iam.client.list_signing_certificates",
        "description": "Lists the signing certificates associated with an IAM user. Parameters: UserName (string) - The user's name. Marker (string) - Marker for paginated results. MaxItems (integer) - Max number of items to return. Returns: dict with 'Certificates' containing arrays of certificate details like UserName, CertificateId, CertificateBody, Status, UploadDate, and pagination information 'IsTruncated', 'Marker'."
    },
    "iam.client.list_ssh_public_keys": {
        "new_func": "iam.client.list_ssh_public_keys",
        "description": "Returns SSH public keys associated with an IAM user. Parameters: UserName (string) - The user's name. Marker (string) - Marker for paginated results. MaxItems (integer) - Max number of items to return. Returns: dict with 'SSHPublicKeys' containing arrays of key details like UserName, SSHPublicKeyId, Status, UploadDate, and pagination information 'IsTruncated', 'Marker'."
    },
    "iam.client.list_user_policies": {
        "new_func": "iam.client.list_user_policies",
        "description": "Lists inline policies embedded in the specified IAM user. Parameters: UserName (string) - The user's name. Marker (string) - Marker for paginated results. MaxItems (integer) - Max number of items to return. Returns: dict with 'PolicyNames' array, 'IsTruncated', and 'Marker' for pagination."
    },
    "iam.client.list_user_tags": {
        "new_func": "iam.client.list_user_tags",
        "description": "Lists the tags attached to the specified IAM user. Parameters: UserName (string) - The user's name. Marker (string) - Marker for paginated results. MaxItems (integer) - Max number of items to return. Returns: dict with 'Tags' containing arrays of tag details like Key and Value, and pagination information 'IsTruncated', 'Marker'."
    },
    "iam.client.list_users": {
        "new_func": "iam.client.list_users",
        "description": "Lists IAM users with optional path prefix filtering. Parameters: PathPrefix (string) - Filters users with path starting with specified prefix. Marker (string) - Paginate results starting from this marker. MaxItems (integer) - Maximum number of items to return (default 100). Returns: dict with Users (list of user details), IsTruncated (boolean), Marker (string)."
    },
    "iam.client.list_virtual_mfa_devices": {
        "new_func": "iam.client.list_virtual_mfa_devices",
        "description": "Lists virtual MFA devices by assignment status. Parameters: AssignmentStatus (string) - Status ('Assigned', 'Unassigned', or 'Any') of devices to list. Marker (string) - Paginate results starting from this marker. MaxItems (integer) - Maximum number of items to return (default 100). Returns: dict with VirtualMFADevices (list of device details), IsTruncated (boolean), Marker (string)."
    },
    "iam.client.put_group_policy": {
        "new_func": "iam.client.put_group_policy",
        "description": "Adds or updates inline policy document for an IAM group. Parameters: GroupName (string) - Required. Name of the group. PolicyName (string) - Required. Name of the policy. PolicyDocument (string) - Required. Policy document in JSON format. Returns: None. Exceptions: LimitExceededException, MalformedPolicyDocumentException, NoSuchEntityException, ServiceFailureException."
    },
    "iam.client.put_role_permissions_boundary": {
        "new_func": "iam.client.put_role_permissions_boundary",
        "description": "Sets or updates the permissions boundary for an IAM role. Parameters: RoleName (string) - Required. Name of the role. PermissionsBoundary (string) - Required. ARN of the policy used as the permissions boundary. Returns: None. Exceptions: NoSuchEntityException, InvalidInputException, UnmodifiableEntityException, PolicyNotAttachableException, ServiceFailureException."
    },
    "iam.client.put_role_policy": {
        "new_func": "iam.client.put_role_policy",
        "description": "Adds or updates inline policy document for an IAM role. Parameters: RoleName (string) - Required. Name of the role. PolicyName (string) - Required. Name of the policy. PolicyDocument (string) - Required. Policy document in JSON format. Returns: None. Exceptions: LimitExceededException, MalformedPolicyDocumentException, NoSuchEntityException, UnmodifiableEntityException, ServiceFailureException."
    },
    "iam.client.put_user_permissions_boundary": {
        "new_func": "iam.client.put_user_permissions_boundary",
        "description": "Sets or updates an IAM user's permissions boundary. Parameters: UserName (string) - Required. The user's name. PermissionsBoundary (string) - Required. The ARN of the policy to set as the permissions boundary. Returns: None. Exceptions: NoSuchEntityException, InvalidInputException, PolicyNotAttachableException, ServiceFailureException."
    },
    "iam.client.put_user_policy": {
        "new_func": "iam.client.put_user_policy",
        "description": "Adds or updates an inline policy for an IAM user. Parameters: UserName (string) - Required. The user's name. PolicyName (string) - Required. The policy name. PolicyDocument (string) - Required. The policy document in JSON format. Returns: None. Exceptions: LimitExceededException, MalformedPolicyDocumentException, NoSuchEntityException, ServiceFailureException."
    },
    "iam.client.remove_client_id_from_open_id_connect_provider": {
        "new_func": "iam.client.remove_client_id_from_open_id_connect_provider",
        "description": "Removes a client ID from an IAM OIDC provider. Parameters: OpenIDConnectProviderArn (string) - Required. The OIDC provider ARN. ClientID (string) - Required. The client ID to remove. Returns: None. Exceptions: InvalidInputException, NoSuchEntityException, ServiceFailureException."
    },
    "iam.client.remove_role_from_instance_profile": {
        "new_func": "iam.client.remove_role_from_instance_profile",
        "description": "Removes an IAM role from an EC2 instance profile. Parameters: InstanceProfileName (string) - Required. The instance profile name. RoleName (string) - Required. The role name to remove. Returns: None. Exceptions: NoSuchEntityException, LimitExceededException, UnmodifiableEntityException, ServiceFailureException."
    },
    "iam.client.remove_user_from_group": {
        "new_func": "iam.client.remove_user_from_group",
        "description": "Removes a user from an IAM group. Parameters: GroupName (string) - Required. The group name. UserName (string) - Required. The user name to remove. Returns: None. Exceptions: NoSuchEntityException, LimitExceededException, ServiceFailureException."
    },
    "iam.client.reset_service_specific_credential": {
        "new_func": "iam.client.reset_service_specific_credential",
        "description": "Resets the password for a service-specific credential, generating a new Amazon Web Services password. Parameters: UserName (string) - The name of the IAM user. ServiceSpecificCredentialId (string) - Required, the unique identifier of the service-specific credential. Returns: dict with 'ServiceSpecificCredential' containing details such as CreateDate, ServiceName, ServiceUserName, ServicePassword, ServiceSpecificCredentialId, UserName, and Status."
    },
    "iam.client.resync_mfa_device": {
        "new_func": "iam.client.resync_mfa_device",
        "description": "Synchronizes a specified MFA device with its IAM resource object on AWS servers. Parameters: UserName (string) - Required, the user's name. SerialNumber (string) - Required, the MFA device's serial number. AuthenticationCode1 (string) - Required, first authentication code from the device. AuthenticationCode2 (string) - Required, second authentication code from the device. Returns: None."
    },
    "iam.client.set_default_policy_version": {
        "new_func": "iam.client.set_default_policy_version",
        "description": "Sets a specified version of a specified policy as the policy's default version. Parameters: PolicyArn (string) - Required, the ARN of the IAM policy. VersionId (string) - Required, the version of the policy to set as default. Returns: None."
    },
    "iam.client.set_security_token_service_preferences": {
        "new_func": "iam.client.set_security_token_service_preferences",
        "description": "Sets the global endpoint token version for the AWS account. Parameters: GlobalEndpointTokenVersion (string) - Required, the token version ('v1Token' or 'v2Token'). Returns: None."
    },
    "iam.client.simulate_custom_policy": {
        "new_func": "iam.client.simulate_custom_policy",
        "description": "Simulates a set of IAM policies to determine the effective permissions for a list of API operations and AWS resources. Parameters: PolicyInputList (list) - Required, IAM policy documents. ActionNames (list) - Required, API operations to evaluate. ResourceArns (list) - AWS resources to include in the simulation. ResourcePolicy (string), ResourceOwner (string), CallerArn (string), ContextEntries (list), ResourceHandlingOption (string), MaxItems (integer), Marker (string). Returns: dict with 'EvaluationResults', 'IsTruncated', and 'Marker'."
    },
    "iam.client.simulate_principal_policy": {
        "new_func": "iam.client.simulate_principal_policy",
        "description": "Simulates IAM policy permissions for a given entity (user, group, or role) against specified API operations and resources. Parameters: PolicySourceArn (string) - Required. ARN of the user, group, or role. PolicyInputList (list) - Optional. Additional policy documents to include. ActionNames (list) - Required. API operations to evaluate. ResourceArns (list) - Optional. ARNs of resources to include. ResourcePolicy (string) - Optional. Resource-based policy. ResourceOwner (string), CallerArn (string), ContextEntries (list), ResourceHandlingOption (string), MaxItems (integer), Marker (string) - Optional parameters for simulation context and pagination. Returns: dict with EvaluationResults, IsTruncated, and Marker indicating the outcome of the simulation."
    },
    "iam.client.tag_instance_profile": {
        "new_func": "iam.client.tag_instance_profile",
        "description": "Adds tags to an IAM instance profile. Parameters: InstanceProfileName (string) - Required. Name of the instance profile. Tags (list) - Required. List of tags to add. Each tag is a dict with Key and Value. Returns: None. Exceptions: NoSuchEntityException, InvalidInputException, LimitExceededException, ConcurrentModificationException, ServiceFailureException."
    },
    "iam.client.tag_mfa_device": {
        "new_func": "iam.client.tag_mfa_device",
        "description": "Adds tags to an IAM virtual MFA device. Parameters: SerialNumber (string) - Required. Identifier for the virtual MFA device. Tags (list) - Required. List of tags to add. Each tag is a dict with Key and Value. Returns: None. Exceptions: InvalidInputException, NoSuchEntityException, LimitExceededException, ConcurrentModificationException, ServiceFailureException."
    },
    "iam.client.tag_open_id_connect_provider": {
        "new_func": "iam.client.tag_open_id_connect_provider",
        "description": "Adds tags to an OIDC identity provider. Parameters: OpenIDConnectProviderArn (string) - Required. ARN of the OIDC provider. Tags (list) - Required. List of tags to add. Each tag is a dict with Key and Value. Returns: None. Exceptions: NoSuchEntityException, LimitExceededException, InvalidInputException, ConcurrentModificationException, ServiceFailureException."
    },
    "iam.client.tag_policy": {
        "new_func": "iam.client.tag_policy",
        "description": "Adds tags to an IAM customer managed policy. Parameters: PolicyArn (string) - Required. ARN of the customer managed policy. Tags (list) - Required. List of tags to add. Each tag is a dict with Key and Value. Returns: None. Exceptions: NoSuchEntityException, LimitExceededException, InvalidInputException, ConcurrentModificationException, ServiceFailureException."
    },
    "iam.client.tag_role": {
        "new_func": "iam.client.tag_role",
        "description": "Adds tags to an IAM role, overwriting existing tags with the same key. Parameters: RoleName (string) - The IAM role name. Tags (list of dicts) - Key (string): tag key, Value (string): tag value. Returns: None."
    },
    "iam.client.tag_saml_provider": {
        "new_func": "iam.client.tag_saml_provider",
        "description": "Adds tags to a SAML identity provider, overwriting existing tags with the same key. Parameters: SAMLProviderArn (string) - The ARN of the SAML provider. Tags (list of dicts) - Key (string): tag key, Value (string): tag value. Returns: None."
    },
    "iam.client.tag_server_certificate": {
        "new_func": "iam.client.tag_server_certificate",
        "description": "Adds tags to an IAM server certificate, overwriting existing tags with the same key. Parameters: ServerCertificateName (string) - The server certificate name. Tags (list of dicts) - Key (string): tag key, Value (string): tag value. Returns: None."
    },
    "iam.client.tag_user": {
        "new_func": "iam.client.tag_user",
        "description": "Adds tags to an IAM user, overwriting existing tags with the same key. Parameters: UserName (string) - The IAM user name. Tags (list of dicts) - Key (string): tag key, Value (string): tag value. Returns: None."
    },
    "iam.client.untag_instance_profile": {
        "new_func": "iam.client.untag_instance_profile",
        "description": "Removes tags from an IAM instance profile. Parameters: InstanceProfileName (string) - The instance profile name. TagKeys (list of strings) - The keys of the tags to remove. Returns: None."
    },
    "iam.client.untag_mfa_device": {
        "new_func": "iam.client.untag_mfa_device",
        "description": "Removes tags from an IAM virtual MFA device. Parameters: SerialNumber (string) - Required. Unique identifier for the virtual MFA device. TagKeys (list of strings) - Required. Keys of the tags to remove. Returns: None."
    },
    "iam.client.untag_open_id_connect_provider": {
        "new_func": "iam.client.untag_open_id_connect_provider",
        "description": "Removes tags from an IAM OIDC provider. Parameters: OpenIDConnectProviderArn (string) - Required. ARN of the OIDC provider. TagKeys (list of strings) - Required. Keys of the tags to remove. Returns: None."
    },
    "iam.client.untag_policy": {
        "new_func": "iam.client.untag_policy",
        "description": "Removes tags from an IAM customer managed policy. Parameters: PolicyArn (string) - Required. ARN of the customer managed policy. TagKeys (list of strings) - Required. Keys of the tags to remove. Returns: None."
    },
    "iam.client.untag_role": {
        "new_func": "iam.client.untag_role",
        "description": "Removes tags from an IAM role. Parameters: RoleName (string) - Required. Name of the IAM role. TagKeys (list of strings) - Required. Keys of the tags to remove. Returns: None."
    },
    "iam.client.untag_saml_provider": {
        "new_func": "iam.client.untag_saml_provider",
        "description": "Removes tags from an IAM SAML identity provider. Parameters: SAMLProviderArn (string) - Required. ARN of the SAML identity provider. TagKeys (list of strings) - Required. Keys of the tags to remove. Returns: None."
    },
    "iam.client.untag_server_certificate": {
        "new_func": "iam.client.untag_server_certificate",
        "description": "Removes tags from an IAM server certificate. Parameters: ServerCertificateName (string) - Required. Name of the server certificate. TagKeys (list of strings) - Required. Keys of tags to remove. Returns: None."
    },
    "iam.client.untag_user": {
        "new_func": "iam.client.untag_user",
        "description": "Removes tags from an IAM user. Parameters: UserName (string) - Required. Name of the user. TagKeys (list of strings) - Required. Keys of tags to remove. Returns: None."
    },
    "iam.client.update_access_key": {
        "new_func": "iam.client.update_access_key",
        "description": "Changes the status of an IAM user's access key. Parameters: UserName (string) - Name of the user. AccessKeyId (string) - Required. The access key ID. Status (string) - Required. New status ('Active' or 'Inactive'). Returns: None."
    },
    "iam.client.update_account_password_policy": {
        "new_func": "iam.client.update_account_password_policy",
        "description": "Updates the password policy for the AWS account. Parameters include: MinimumPasswordLength (integer), RequireSymbols (boolean), RequireNumbers (boolean), RequireUppercaseCharacters (boolean), RequireLowercase Characters (boolean), AllowUsersToChangePassword (boolean), MaxPasswordAge (integer), PasswordReusePrevention (integer), HardExpiry (boolean). All parameters are optional and default to account-specific defaults. Returns: None."
    },
    "iam.client.update_assume_role_policy": {
        "new_func": "iam.client.update_assume_role_policy",
        "description": "Updates the trust policy of an IAM role. Parameters: RoleName (string) - Required. Name of the role. PolicyDocument (string) - Required. The policy document in JSON format. Returns: None."
    },
    "iam.client.update_group": {
        "new_func": "iam.client.update_group",
        "description": "Updates the name and/or path of an IAM group. Parameters: GroupName (string) - Required. Original name of the group. NewPath (string) - New path for the group. NewGroupName (string) - New name for the group. Returns: None."
    },
    "iam.client.update_login_profile": {
        "new_func": "iam.client.update_login_profile",
        "description": "Changes the password for an IAM user. Parameters: UserName (string) - Required. User whose password is being updated. Password (string) - New password. PasswordResetRequired (boolean) - Whether the new password is required to be changed on next sign-in. Returns: None."
    },
    "iam.client.update_open_id_connect_provider_thumbprint": {
        "new_func": "iam.client.update_open_id_connect_provider_thumbprint",
        "description": "Replaces the list of server certificate thumbprints for an OIDC provider. Parameters: OpenIDConnectProviderArn (string) - Required. ARN of the IAM OIDC provider. ThumbprintList (list) - Required. New list of thumbprints. Returns: None."
    },
    "iam.client.update_role": {
        "new_func": "iam.client.update_role",
        "description": "Updates the description or maximum session duration of a role. Parameters: RoleName (string) - Required. Name of the role. Description (string) - New description. MaxSessionDuration (integer) - Maximum session duration in seconds. Returns: dict."
    },
    "iam.client.update_role_description": {
        "new_func": "iam.client.update_role_description",
        "description": "Modifies the description of a role. Parameters: RoleName (string) - Required. Name of the role. Description (string) - Required. New description. Returns: dict with details of the modified role, including Path, RoleName, RoleId, Arn, CreateDate, AssumeRolePolicyDocument, Description, MaxSessionDuration, PermissionsBoundary, Tags, RoleLastUsed."
    },
    "iam.client.update_saml_provider": {
        "new_func": "iam.client.update_saml_provider",
        "description": "Updates the metadata document for an existing SAML provider. Parameters: SAMLMetadataDocument (string) - Required. An XML document from an IdP. SAMLProviderArn (string) - Required. The ARN of the SAML provider. Returns: dict with 'SAMLProviderArn' updated."
    },
    "iam.client.update_server_certificate": {
        "new_func": "iam.client.update_server_certificate",
        "description": "Updates the name and/or path of a server certificate stored in IAM. Parameters: ServerCertificateName (string) - Required. Current name of the certificate. NewPath (string) - New path for the certificate. NewServerCertificateName (string) - New name for the certificate. Returns: None."
    },
    "iam.client.update_service_specific_credential": {
        "new_func": "iam.client.update_service_specific_credential",
        "description": "Sets a service-specific credential's status to Active or Inactive. Parameters: UserName (string) - IAM user name. ServiceSpecificCredentialId (string) - Required. Credential's unique identifier. Status ('Active'|'Inactive') - Required. New status for the credential. Returns: None."
    },
    "iam.client.update_signing_certificate": {
        "new_func": "iam.client.update_signing_certificate",
        "description": "Changes the status of a user signing certificate. Parameters: UserName (string) - The user's name. CertificateId (string) - Required. The certificate's ID. Status ('Active'|'Inactive') - Required. New status for the certificate. Returns: None."
    },
    "iam.client.update_ssh_public_key": {
        "new_func": "iam.client.update_ssh_public_key",
        "description": "Sets the status of an IAM user's SSH public key to active or inactive. Parameters: UserName (string) - Required. Name of the IAM user. SSHPublicKeyId (string) - Required. Identifier for the SSH public key. Status ('Active'|'Inactive') - Required. New status for the SSH public key. Returns: None."
    },
    "iam.client.update_user": {
        "new_func": "iam.client.update_user",
        "description": "Updates the name and/or the path of the specified IAM user. Parameters: UserName (string) - Required. Original user name. NewPath (string) - New path for the IAM user. NewUserName (string) - New name for the user. Returns: None."
    },
    "iam.client.upload_server_certificate": {
        "new_func": "iam.client.upload_server_certificate",
        "description": "Uploads a server certificate entity for the AWS account, including a public key certificate, a private key, and an optional certificate chain. Parameters: Path (string) - The path for the server certificate. ServerCertificateName (string) - Required. Name for the server certificate. CertificateBody (string) - Required. Public key certificate contents. PrivateKey (string) - Required. Private key contents. CertificateChain (string) - Certificate chain contents. Tags (list) - List of tags for the IAM server certificate. Returns: dict with ServerCertificateMetadata and Tags."
    },
    "iam.client.upload_signing_certificate": {
        "new_func": "iam.client.upload_signing_certificate",
        "description": "Uploads an X.509 signing certificate for the specified IAM user. Parameters: UserName (string) - IAM user name. CertificateBody (string) - Required. Contents of the signing certificate. Returns: dict with information about the certificate including UserName, CertificateId, CertificateBody, Status, and UploadDate."
    },
    "iam.client.upload_ssh_public_key": {
        "new_func": "iam.client.upload_ssh_public_key",
        "description": "Uploads an SSH public key and associates it with the specified IAM user. Parameters: UserName (string) - Required. IAM user name. SSHPublicKeyBody (string) - Required. SSH public key content. Returns: dict with SSHPublicKey containing UserName, SSHPublicKeyId, Fingerprint, SSHPublicKeyBody, Status, and UploadDate."
    },
    "rds.client.add_role_to_db_cluster": {
        "new_func": "rds.client.add_role_to_db_cluster",
        "description": "Associates an IAM role with a DB cluster. Parameters: DBClusterIdentifier (string) - Required. DB cluster name. RoleArn (string) - Required. ARN of the IAM role to associate. FeatureName (string) - Feature name for the DB cluster. Returns: None."
    },
    "rds.client.add_role_to_db_instance": {
        "new_func": "rds.client.add_role_to_db_instance",
        "description": "Associates an IAM role with a DB instance. Parameters: DBInstanceIdentifier (string) - Required. Name of the DB instance. RoleArn (string) - Required. ARN of the IAM role. FeatureName (string) - Required. Name of the feature for the DB instance. Returns: None."
    },
    "rds.client.add_source_identifier_to_subscription": {
        "new_func": "rds.client.add_source_identifier_to_subscription",
        "description": "Adds a source identifier to an existing RDS event notification subscription. Parameters: SubscriptionName (string) - Required. Name of the subscription. SourceIdentifier (string) - Required. Identifier of the event source to be added. Returns: dict with details of the updated EventSubscription."
    },
    "rds.client.add_tags_to_resource": {
        "new_func": "rds.client.add_tags_to_resource",
        "description": "Adds metadata tags to an Amazon RDS resource. Parameters: ResourceName (string) - Required. ARN of the RDS resource. Tags (list of dicts) - Required. Tags to be assigned to the RDS resource with Key and Value. Returns: None."
    },
    "rds.client.apply_pending_maintenance_action": {
        "new_func": "rds.client.apply_pending_maintenance_action",
        "description": "Applies a pending maintenance action to a resource. Parameters: ResourceIdentifier (string) - Required. ARN of the resource. ApplyAction (string) - Required. Maintenance action to apply. OptInType (string) - Required. Type of opt-in request. Returns: dict with details of the ResourcePendingMaintenanceActions."
    },
    "rds.client.authorize_db_security_group_ingress": {
        "new_func": "rds.client.authorize_db_security_group_ingress",
        "description": "Enables ingress to a DBSecurityGroup. Parameters: DBSecurityGroupName (string) - Required. Name of the DB security group. CIDRIP (string) - IP range to authorize. EC2SecurityGroupName (string) - Name of the EC2 security group to authorize. EC2SecurityGroupId (string) - Id of the EC2 security group to authorize. EC2SecurityGroupOwnerId (string) - AWS account number of the owner of the EC2 security group. Returns: dict with details of the DBSecurityGroup."
    },
    "rds.client.backtrack_db_cluster": {
        "new_func": "rds.client.backtrack_db_cluster",
        "description": "Backtracks a DB cluster to a specific time without creating a new DB cluster. Only applies to Aurora MySQL DB clusters. Parameters: DBClusterIdentifier (string) - Required. Identifier for the DB cluster. BacktrackTo (datetime) - Required. Timestamp to backtrack the DB cluster to. Force (boolean) - Force backtrack when binary logging is enabled. UseEarliestTimeOnPointInTimeUnavailable (boolean) - Backtrack to the earliest possible time if specified timestamp is unavailable. Returns: dict with Backtrack details including DBClusterIdentifier, BacktrackIdentifier, BacktrackTo, BacktrackedFrom, BacktrackRequestCreationTime, and Status."
    },
    "rds.client.can_paginate": {
        "new_func": "rds.client.can_paginate",
        "description": "Checks if a specified operation can be paginated in RDS. Parameters: operation_name (string) - The operation name. Returns: bool indicating if the operation can be paginated."
    },
    "rds.client.cancel_export_task": {
        "new_func": "rds.client.cancel_export_task",
        "description": "Cancels an in-progress export task that is exporting a snapshot or cluster to Amazon S3. Parameters: ExportTaskIdentifier (string) - Required. Identifier of the export task. Returns: dict with details of the cancelled task including ExportTaskIdentifier, SourceArn, ExportOnly, SnapshotTime, TaskStartTime, TaskEndTime, S3Bucket, S3Prefix, IamRoleArn, KmsKeyId, Status, PercentProgress, TotalExtractedDataInGB, FailureCause, and WarningMessage."
    },
    "rds.client.close": {
        "new_func": "rds.client.close",
        "description": "Closes the RDS client's underlying endpoint connections."
    },
    "rds.client.copy_db_cluster_parameter_group": {
        "new_func": "rds.client.copy_db_cluster_parameter_group",
        "description": "Copies a DB cluster parameter group. Parameters: SourceDBClusterParameterGroupIdentifier (string) - Required. Identifier or ARN for the source parameter group. TargetDBClusterParameterGroupIdentifier (string) - Required. Identifier for the copied parameter group. TargetDBClusterParameterGroupDescription (string) - Required. Description for the copied parameter group. Tags (list of dict) - List of tags to assign to the parameter group. Returns: dict with copied DBClusterParameterGroup details including DBClusterParameterGroupName, DBParameterGroupFamily, Description, and DBClusterParameterGroupArn."
    },
    "rds.client.copy_db_cluster_snapshot": {
        "new_func": "rds.client.copy_db_cluster_snapshot",
        "description": "Copies a DB cluster snapshot, possibly across regions, and encrypts with a specified KMS key if desired. Parameters: SourceDBClusterSnapshotIdentifier (string) - The identifier for the source snapshot. TargetDBClusterSnapshotIdentifier (string) - The identifier for the new snapshot. KmsKeyId (string) - The KMS key identifier for encryption. CopyTags (boolean) - Whether to copy tags. Tags (list) - List of tags. SourceRegion (string) - The source region containing the snapshot. Returns: dict with DBClusterSnapshot attributes."
    },
    "rds.client.copy_db_parameter_group": {
        "new_func": "rds.client.copy_db_parameter_group",
        "description": "Copies a DB parameter group. Parameters: SourceDBParameterGroupIdentifier (string) - The identifier or ARN for the source parameter group. TargetDBParameterGroupIdentifier (string) - The identifier for the new parameter group. TargetDBParameterGroupDescription (string) - Description for the new parameter group. Tags (list) - A list of tags. Returns: dict with DBParameterGroup attributes."
    },
    "rds.client.copy_db_snapshot": {
        "new_func": "rds.client.copy_db_snapshot",
        "description": "Copies a DB snapshot, potentially across regions. Parameters: SourceDBSnapshotIdentifier (string) - Identifier for the source snapshot. TargetDBSnapshotIdentifier (string) - Identifier for the new snapshot. KmsKeyId (string) - KMS key identifier for encryption. CopyTags (boolean) - Whether to copy tags. Tags (list) - List of tags. OptionGroupName (string) - Option group for the snapshot. SourceRegion (string) - The source region of the snapshot. Returns: dict with DBSnapshot attributes."
    },
    "rds.client.copy_option_group": {
        "new_func": "rds.client.copy_option_group",
        "description": "Copies an option group. Parameters: SourceOptionGroupIdentifier (string) - Identifier for the source option group. TargetOptionGroupIdentifier (string) - Identifier for the new option group. TargetOptionGroupDescription (string) - Description for the new option group. Tags (list) - A list of tags. Returns: dict with OptionGroup attributes."
    },
    "rds.client.create_blue_green_deployment": {
        "new_func": "rds.client.create_blue_green_deployment",
        "description": "Creates a blue/green deployment, cloning a production database to a staging environment for testing. Parameters: BlueGreenDeploymentName (string) - Name of the deployment. Source (string) - ARN of the source database. TargetEngineVersion (string) - Engine version for the green environment. TargetDBParameterGroupName (string) - Parameter group for the green environment DB instance. TargetDBClusterParameterGroupName (string) - Parameter group for the green environment DB cluster. Tags (list) - Tags for the deployment. TargetDBInstanceClass (string) - Instance class for the green environment. UpgradeTargetStorageConfig (boolean) - Whether to upgrade storage file system configuration. Returns: dict with BlueGreenDeployment attributes."
    },
    "rds.client.create_custom_db_engine_version": {
        "new_func": "rds.client.create_custom_db_engine_version",
        "description": "Creates a custom DB engine version. Parameters: Engine (string) - Required. Database engine. EngineVersion (string) - Required. CEV name. DatabaseInstallationFilesS3BucketName (string) - S3 bucket with database installation files. DatabaseInstallationFilesS3Prefix (string) - S3 directory with database installation files. ImageId (string) - ID of the Amazon Machine Image (AMI). KMSKeyId (string) - AWS KMS key identifier for encryption. Description (string) - Description of CEV. Manifest (string) - JSON document describing the installation files. Tags (list) - Tags for the resource. SourceCustomDbEngineVersionIdentifier (string) - ARN of a CEV source. UseAwsProvidedLatestImage (boolean) - Use latest service-provided AMI. Returns: dict with details of the created custom DB engine version."
    },
    "rds.client.create_db_cluster": {
        "new_func": "rds.client.create_db_cluster",
        "description": "Creates a new Amazon Aurora DB cluster or Multi-AZ DB cluster. Parameters: AvailabilityZones (list) - AZs for DB instances. BackupRetentionPeriod (integer) - Days to retain automated backups. CharacterSetName (string) - Character set name. DatabaseName (string) - Name for the database. DBClusterIdentifier (string) - Required. Identifier for the DB cluster. DBClusterParameterGroupName (string) - DB cluster parameter group name. VpcSecurityGroupIds (list) - EC2 VPC security groups. DBSubnetGroupName (string) - DB subnet group. Engine (string) - Required. Database engine. EngineVersion (string) - Database engine version. Port (integer) - Port number for the instances. MasterUsername (string) - Master user name. MasterUserPassword (string) - Master user password. Tags (list) - Tags for the resource. StorageEncrypted (boolean) - DB cluster encryption. KmsKeyId (string) - AWS KMS key identifier. EnableIAMDatabaseAuthentication (boolean) - Enable IAM database authentication. Returns: dict with details of the created DB cluster."
    },
    "rds.client.create_db_cluster_endpoint": {
        "new_func": "rds.client.create_db_cluster_endpoint",
        "description": "Creates a new custom endpoint for an Amazon Aurora DB cluster. Parameters: DBClusterIdentifier (string) - Required. Identifier of the DB cluster. DBClusterEndpointIdentifier (string) - Required. Identifier for the endpoint. EndpointType (string) - Required. Type of the endpoint. StaticMembers (list) - DB instance identifiers in the custom endpoint group. ExcludedMembers (list) - DB instance identifiers not in the custom endpoint group. Tags (list) - Tags for the resource. Returns: dict with details of the created DB cluster endpoint."
    },
    "rds.client.create_db_cluster_parameter_group": {
        "new_func": "rds.client.create_db_cluster_parameter_group",
        "description": "Creates a new DB cluster parameter group. Parameters: DBClusterParameterGroupName (string) - Required. Name of the DB cluster parameter group. DBParameterGroupFamily (string) - Required. DB cluster parameter group family name. Description (string) - Description for the DB cluster parameter group. Tags (list) - Tags for the resource. Returns: dict with details of the created DB cluster parameter group."
    },
    "rds.client.create_db_cluster_snapshot": {
        "new_func": "rds.client.create_db_cluster_snapshot",
        "description": "Creates a snapshot of a DB cluster. Parameters: DBClusterSnapshotIdentifier (string) - Required. Identifier for the DB cluster snapshot. DBClusterIdentifier (string) - Required. Identifier of the DB cluster. Tags (list) - Tags for the DB cluster snapshot. Returns: dict with details of the created DB cluster snapshot."
    },
    "rds.client.create_db_instance": {
        "new_func": "rds.client.create_db_instance",
        "description": "Creates a new DB instance or adds an instance to an Aurora DB cluster. Parameters: DBInstanceIdentifier (string) - Required. Unique identifier for the instance. DBInstanceClass (string) - Required. Instance class type. Engine (string) - Required. Database engine type (e.g., 'mysql'). MasterUsername, MasterUserPassword (string) - Master DB user credentials. DBSecurityGroups, VpcSecurityGroupIds (list) - Security groups. AllocatedStorage (integer) - Initial storage size (GiB). Returns: dict with details of the DBInstance."
    },
    "rds.client.create_db_instance_read_replica": {
        "new_func": "rds.client.create_db_instance_read_replica",
        "description": "Creates a DB instance read replica. Parameters: DBInstanceIdentifier (string) - Required. Identifier for the replica. SourceDBInstanceIdentifier (string) - Required. Identifier of the source instance. DBInstanceClass (string) - Instance class type. Port (integer) - Port number for the replica. MultiAZ (boolean) - Specifies Multi-AZ deployment. Tags (list) - Tags for the read replica. Returns: dict with details of the DBInstance."
    },
    "rds.client.create_db_parameter_group": {
        "new_func": "rds.client.create_db_parameter_group",
        "description": "Creates a new DB parameter group. Parameters: DBParameterGroupName (string) - Required. Name of the parameter group. DBParameterGroupFamily (string) - Required. DB parameter group family name. Description (string) - Required. Description of the parameter group. Tags (list) - Tags for the parameter group. Returns: dict with details of the DBParameterGroup."
    },
    "rds.client.create_db_proxy": {
        "new_func": "rds.client.create_db_proxy",
        "description": "Creates a new DB proxy. Parameters: DBProxyName (string) - Required. Identifier for the proxy. EngineFamily (string) - Required. Database engine family. Auth (list) - Required. Authentication details. RoleArn (string) - Required. IAM role ARN for accessing secrets. VpcSubnetIds (list) - Required. VPC subnet IDs. RequireTLS (boolean) - TLS encryption requirement. IdleClientTimeout (integer) - Inactivity timeout for client connections. Tags (list) - Tags for the proxy. Returns: dict with details of the DBProxy."
    },
    "rds.client.create_db_proxy_endpoint": {
        "new_func": "rds.client.create_db_proxy_endpoint",
        "description": "Creates a DB proxy endpoint. Parameters: DBProxyName (string) - Required. Name of the associated DB proxy. DBProxyEndpointName (string) - Required. Name for the proxy endpoint. VpcSubnetIds (list) - Required. VPC subnet IDs. VpcSecurityGroupIds (list) - VPC security group IDs. TargetRole (string) - Role of the proxy endpoint. Tags (list) - Tags for the proxy endpoint. Returns: dict with details of the DBProxyEndpoint."
    },
    "rds.client.create_db_security_group": {
        "new_func": "rds.client.create_db_security_group",
        "description": "Creates a new DB security group for EC2-Classic DB instances. Parameters: DBSecurityGroupName (string) - Required. The name for the DB security group. DBSecurityGroupDescription (string) - Required. The description for the DB security group. Tags (list of dicts) - Tags for the DB security group. Returns: dict with details of the DBSecurityGroup including OwnerId, DBSecurityGroupName, DBSecurityGroupDescription, VpcId, EC2SecurityGroups, IPRanges, and DBSecurityGroupArn."
    },
    "rds.client.create_db_shard_group": {
        "new_func": "rds.client.create_db_shard_group",
        "description": "Creates a new DB shard group for Aurora Limitless Database. Parameters: DBShardGroupIdentifier (string) - Required. Name of the DB shard group. DBClusterIdentifier (string) - Required. Name of the primary DB cluster. ComputeRedundancy (integer) - Specifies standby instances creation. MaxACU (float) - Required. Maximum capacity in ACUs. PubliclyAccessible (boolean) - Specifies public accessibility. Returns: dict with details of the DBShardGroup including DBShardGroupResourceId, DBShardGroupIdentifier, DBClusterIdentifier, MaxACU, ComputeRedundancy, Status, PubliclyAccessible, and Endpoint."
    },
    "rds.client.create_db_snapshot": {
        "new_func": "rds.client.create_db_snapshot",
        "description": "Creates a snapshot of a DB instance. Parameters: DBSnapshotIdentifier (string) - Required. Identifier for the DB snapshot. DBInstanceIdentifier (string) - Required. Identifier of the DB instance. Tags (list of dicts) - Tags for the DB snapshot. Returns: dict with details of the DBSnapshot including DBSnapshotIdentifier, DBInstanceIdentifier, SnapshotCreateTime, Engine, AllocatedStorage, among other snapshot details."
    },
    "rds.client.create_db_subnet_group": {
        "new_func": "rds.client.create_db_subnet_group",
        "description": "Creates a new DB subnet group. Parameters: DBSubnetGroupName (string) - Required. Name for the DB subnet group. DBSubnetGroupDescription (string) - Required. Description for the DB subnet group. SubnetIds (list of strings) - Required. EC2 Subnet IDs for the DB subnet group. Tags (list of dicts) - Tags for the DB subnet group. Returns: dict with details of the DBSubnetGroup including DBSubnetGroupName, DBSubnetGroupDescription, VpcId, SubnetGroupStatus, Subnets, DBSubnetGroupArn, and SupportedNetworkTypes."
    },
    "rds.client.create_event_subscription": {
        "new_func": "rds.client.create_event_subscription",
        "description": "Creates an RDS event notification subscription. Parameters: SubscriptionName (string) - Required. Name of the subscription. SnsTopicArn (string) - Required. ARN of the SNS topic. SourceType (string) - Type of source generating events. EventCategories (list of strings) - Event categories to subscribe to. SourceIds (list of strings) - Identifiers of event sources. Enabled (boolean) - Specifies if the subscription is active. Tags (list of dicts) - Tags for the event subscription. Returns: dict with details of the EventSubscription including CustomerAwsId, CustSubscriptionId, SnsTopicArn, Status, SubscriptionCreationTime, SourceType, SourceIdsList, EventCategoriesList, Enabled, and EventSubscriptionArn."
    },
    "rds.client.create_global_cluster": {
        "new_func": "rds.client.create_global_cluster",
        "description": "Creates an Aurora global database across multiple regions. Parameters: GlobalClusterIdentifier (string) - Required. SourceDBClusterIdentifier (string) - The ARN of the primary cluster. Engine (string) - The database engine (aurora-mysql | aurora-postgresql). EngineVersion (string) - The engine version. EngineLifecycleSupport (string) - The life cycle type. DeletionProtection (boolean) - Enables deletion protection. DatabaseName (string) - The database name. StorageEncrypted (boolean) - Enables storage encryption. Returns: dict with GlobalCluster details including members and status."
    },
    "rds.client.create_integration": {
        "new_func": "rds.client.create_integration",
        "description": "Creates a zero-ETL integration with Amazon Redshift. Parameters: SourceArn (string) - Required. The ARN of the source database. TargetArn (string) - Required. The ARN of the Redshift target. IntegrationName (string) - Required. The integration name. KMSKeyId (string) - The KMS key identifier for encryption. AdditionalEncryptionContext (dict) - Additional encryption context. Tags (list) - Tags for the resource. DataFilter (string) - Data filtering options. Description (string) - The integration description. Returns: dict with integration details including status, tags, and errors."
    },
    "rds.client.create_option_group": {
        "new_func": "rds.client.create_option_group",
        "description": "Creates a new option group for RDS instances. Parameters: OptionGroupName (string) - Required. The name of the new option group. EngineName (string) - Required. The engine name. MajorEngineVersion (string) - Required. Major engine version. OptionGroupDescription (string) - Required. A description of the option group. Tags (list) - Tags for the option group. Returns: dict with OptionGroup details including options, membership, and ARN."
    },
    "rds.client.create_tenant_database": {
        "new_func": "rds.client.create_tenant_database",
        "description": "Creates a tenant database in a multi-tenant configured DB instance. Parameters: DBInstanceIdentifier (string) - Required. The DB instance identifier. TenantDBName (string) - Required. Name of the tenant database. MasterUsername (string) - Required. Master user name. MasterUserPassword (string) - Required. Master user password. CharacterSetName (string) - Character set for the tenant database. NcharCharacterSetName (string) - NCHAR character set name. Tags (list) - Tags for the tenant database. Returns: dict with TenantDatabase details including creation time, status, and tags."
    },
    "rds.client.delete_blue_green_deployment": {
        "new_func": "rds.client.delete_blue_green_deployment",
        "description": "Deletes a blue/green deployment. Parameters: BlueGreenDeploymentIdentifier (string) - Required. Identifier of the blue/green deployment. DeleteTarget (boolean) - If true, deletes the resources in the green environment. Returns: dict with BlueGreenDeployment details including status, tasks, and deletion time."
    },
    "rds.client.delete_custom_db_engine_version": {
        "new_func": "rds.client.delete_custom_db_engine_version",
        "description": "Deletes a custom engine version for an RDS DB instance. Parameters: Engine (string) - Required. The database engine type. EngineVersion (string) - Required. The engine version of the CEV. Returns: dict with details of the deleted custom DB engine version."
    },
    "rds.client.delete_db_cluster": {
        "new_func": "rds.client.delete_db_cluster",
        "description": "Deletes a DB cluster and its automated backups. Can't be recovered once deleted. Parameters: DBClusterIdentifier (string) - Required. Identifier for the DB cluster. SkipFinalSnapshot (boolean) - If true, skips creation of final snapshot. FinalDBSnapshotIdentifier (string) - Identifier for the final DB cluster snapshot. DeleteAutomatedBackups (boolean) - If true, deletes automated backups immediately. Returns: dict with details of the deleted DB cluster."
    },
    "rds.client.delete_db_cluster_automated_backup": {
        "new_func": "rds.client.delete_db_cluster_automated_backup",
        "description": "Deletes automated backups for a DB cluster using its resource ID or ARN. Parameters: DbClusterResourceId (string) - Required. Identifier for the source DB cluster. Returns: dict with details of the deleted DB cluster automated backup."
    },
    "rds.client.delete_db_cluster_endpoint": {
        "new_func": "rds.client.delete_db_cluster_endpoint",
        "description": "Deletes a custom endpoint from an Aurora DB cluster. Parameters: DBClusterEndpointIdentifier (string) - Required. Identifier for the custom endpoint. Returns: dict with details of the deleted DB cluster endpoint."
    },
    "rds.client.delete_db_cluster_parameter_group": {
        "new_func": "rds.client.delete_db_cluster_parameter_group",
        "description": "Deletes a specified DB cluster parameter group. Parameters: DBClusterParameterGroupName (string) - Required. The name of the DB cluster parameter group. Returns: None."
    },
    "rds.client.delete_db_cluster_snapshot": {
        "new_func": "rds.client.delete_db_cluster_snapshot",
        "description": "Deletes a DB cluster snapshot. Parameters: DBClusterSnapshotIdentifier (string) - Required. The identifier of the snapshot to delete. Must be in the available state. Returns: dict with the DBClusterSnapshot details if the snapshot is deleted."
    },
    "rds.client.delete_db_instance": {
        "new_func": "rds.client.delete_db_instance",
        "description": "Deletes a DB instance. Parameters: DBInstanceIdentifier (string) - Required. Identifier for the instance to delete. SkipFinalSnapshot (boolean) - Whether to skip creation of a final snapshot. FinalDBSnapshotIdentifier (string) - Identifier for the final DB snapshot. DeleteAutomatedBackups (boolean) - Whether to remove automated backups immediately after deletion. Returns: dict with DBInstance details if the instance is deleted."
    },
    "rds.client.delete_db_instance_automated_backup": {
        "new_func": "rds.client.delete_db_instance_automated_backup",
        "description": "Deletes automated backups using DbiResourceId or ARN. Parameters: DbiResourceId (string) - Identifier for the source DB instance. DBInstanceAutomatedBackupsArn (string) - ARN of the automated backups to delete. Returns: dict with DBInstanceAutomatedBackup details if the backup is deleted."
    },
    "rds.client.delete_db_parameter_group": {
        "new_func": "rds.client.delete_db_parameter_group",
        "description": "Deletes a DB parameter group. Parameters: DBParameterGroupName (string) - Required. The name of the parameter group to delete. Cannot be associated with any DB instances. Returns: None."
    },
    "rds.client.delete_db_proxy": {
        "new_func": "rds.client.delete_db_proxy",
        "description": "Deletes an existing DB proxy. Parameters: DBProxyName (string) - Required. The name of the DB proxy to delete. Returns: dict with DBProxy details if the proxy is deleted."
    },
    "rds.client.delete_db_proxy_endpoint": {
        "new_func": "rds.client.delete_db_proxy_endpoint",
        "description": "Deletes a DBProxyEndpoint, removing the ability to access a DB proxy through the specified endpoint. Parameters: DBProxyEndpointName (string) - Required. The name of the DB proxy endpoint to delete. Returns: dict with DBProxyEndpoint details including DBProxyEndpointName, DBProxyEndpointArn, DBProxyName, Status, VpcId, VpcSecurityGroupIds, VpcSubnetIds, Endpoint, CreatedDate, TargetRole, and IsDefault."
    },
    "rds.client.delete_db_security_group": {
        "new_func": "rds.client.delete_db_security_group",
        "description": "Deletes a DB security group, which must not be associated with any DB instances. Parameters: DBSecurityGroupName (string) - Required. The name of the DB security group to delete. Constraints include 1 to 255 alphanumeric characters, must start with a letter, cannot end with a hyphen or contain two consecutive hyphens, and must not be 'Default'. Returns: None."
    },
    "rds.client.delete_db_shard_group": {
        "new_func": "rds.client.delete_db_shard_group",
        "description": "Deletes an Aurora Limitless Database DB shard group. Parameters: DBShardGroupIdentifier (string) - Required. The name of the DB shard group to delete. Returns: dict with details including DBShardGroupResourceId, DBShardGroupIdentifier, DBClusterIdentifier, MaxACU, ComputeRedundancy, Status, PubliclyAccessible, and Endpoint."
    },
    "rds.client.delete_db_snapshot": {
        "new_func": "rds.client.delete_db_snapshot",
        "description": "Deletes a DB snapshot in the 'available' state. Parameters: DBSnapshotIdentifier (string) - Required. Identifier for the DB snapshot. Returns: dict with DBSnapshot information including DBSnapshotIdentifier, DBInstanceIdentifier, SnapshotCreateTime, Engine, AllocatedStorage, Status, Port, AvailabilityZone, VpcId, InstanceCreateTime, MasterUsername, EngineVersion, LicenseModel, SnapshotType, Iops, OptionGroupName, PercentProgress, SourceRegion, SourceDBSnapshotIdentifier, StorageType, TdeCredentialArn, Encrypted, KmsKeyId, DBSnapshotArn, Timezone, IAMDatabaseAuthenticationEnabled, ProcessorFeatures, DbiResourceId, TagList, OriginalSnapshotCreateTime, SnapshotDatabaseTime, SnapshotTarget, StorageThroughput, DBSystemId, DedicatedLogVolume, and MultiTenant."
    },
    "rds.client.delete_db_subnet_group": {
        "new_func": "rds.client.delete_db_subnet_group",
        "description": "Deletes a DB subnet group, which must not be associated with any DB instances. Parameters: DBSubnetGroupName (string) - Required. The name of the DB subnet group to delete. Constraints: Must match an existing DBSubnetGroup and not be the default. Returns: None."
    },
    "rds.client.delete_event_subscription": {
        "new_func": "rds.client.delete_event_subscription",
        "description": "Deletes an RDS event notification subscription. Parameters: SubscriptionName (string) - Required. The name of the event notification subscription to delete. Returns: dict with details of the deleted subscription, including CustomerAwsId, CustSubscriptionId, SnsTopicArn, Status, SubscriptionCreationTime, SourceType, SourceIdsList, EventCategoriesList, Enabled, and EventSubscriptionArn."
    },
    "rds.client.delete_global_cluster": {
        "new_func": "rds.client.delete_global_cluster",
        "description": "Deletes a global database cluster in Aurora. Parameters: GlobalClusterIdentifier (string) - Required. The identifier of the global database cluster to delete. Returns: dict with details of the deleted global cluster, including GlobalClusterIdentifier, GlobalClusterResourceId, GlobalClusterArn, Status, Engine, EngineVersion, EngineLifecycleSupport, DatabaseName, StorageEncrypted, DeletionProtection, GlobalClusterMembers, and FailoverState."
    },
    "rds.client.delete_integration": {
        "new_func": "rds.client.delete_integration",
        "description": "Deletes a zero-ETL integration with Amazon Redshift. Parameters: IntegrationIdentifier (string) - Required. The unique identifier of the integration. Returns: dict with details of the deleted integration, including SourceArn, TargetArn, IntegrationName, IntegrationArn, KMSKeyId, AdditionalEncryptionContext, Status, Tags, CreateTime, Errors, DataFilter, and Description."
    },
    "rds.client.delete_option_group": {
        "new_func": "rds.client.delete_option_group",
        "description": "Deletes an existing option group. Parameters: OptionGroupName (string) - Required. The name of the option group to delete. Note: Default option groups cannot be deleted. Returns: None."
    },
    "rds.client.delete_tenant_database": {
        "new_func": "rds.client.delete_tenant_database",
        "description": "Deletes a tenant database from an RDS Oracle CDB instance. Parameters: DBInstanceIdentifier (string) - Required. The identifier for the DB instance containing the tenant database. TenantDBName (string) - Required. The name of the tenant database to delete. SkipFinalSnapshot (boolean) - Whether to skip the creation of a final DB snapshot. FinalDBSnapshotIdentifier (string) - The identifier for the final DB snapshot. Returns: dict with details of the deleted tenant database, including TenantDatabaseCreateTime, DBInstanceIdentifier, TenantDBName, Status, MasterUsername, DbiResourceId, TenantDatabaseResourceId, TenantDatabaseARN, CharacterSetName, NcharCharacterSetName, DeletionProtection, PendingModifiedValues, and TagList."
    },
    "rds.client.deregister_db_proxy_targets": {
        "new_func": "rds.client.deregister_db_proxy_targets",
        "description": "Removes association between DBProxyTarget and DBProxyTargetGroup. Parameters: DBProxyName (string) - Required. Identifier of the DBProxy. TargetGroupName (string) - Identifier of the DBProxyTargetGroup. DBInstanceIdentifiers (list) - DB instance identifiers. DBClusterIdentifiers (list) - DB cluster identifiers. Returns: dict with operation results."
    },
    "rds.client.describe_account_attributes": {
        "new_func": "rds.client.describe_account_attributes",
        "description": "Lists RDS account attributes including quotas such as the number of DB instances allowed. Returns: dict with AccountQuotas including AccountQuotaName, Used, and Max values."
    },
    "rds.client.describe_blue_green_deployments": {
        "new_func": "rds.client.describe_blue_green_deployments",
        "description": "Describes blue/green deployments. Parameters: BlueGreenDeploymentIdentifier (string) - Specific deployment identifier. Filters (list) - Filters for specific deployments. Marker (string) - Pagination token from previous request. MaxRecords (integer) - Maximum number of records to include. Returns: dict with BlueGreenDeployments details and Marker for pagination."
    },
    "rds.client.describe_certificates": {
        "new_func": "rds.client.describe_certificates",
        "description": "Lists CA certificates provided by Amazon RDS. Parameters: CertificateIdentifier (string) - Identifier for a specific certificate. Filters (list) - Unsupported. MaxRecords (integer) - Max number of records to include. Marker (string) - Pagination token from previous request. Returns: dict with DefaultCertificateForNewLaunches, Certificates list, and Marker."
    },
    "rds.client.describe_db_cluster_automated_backups": {
        "new_func": "rds.client.describe_db_cluster_automated_backups",
        "description": "Displays backups for current and deleted DB clusters. Parameters: DbClusterResourceId (string) - Resource ID of the DB cluster. DBClusterIdentifier (string) - Identifier of the DB cluster. Filters (list) - Filters based on status. MaxRecords (integer) - Max number of records to include. Marker (string) - Pagination token from previous request. Returns: dict with Marker and DBClusterAutomatedBackups list."
    },
    "rds.client.describe_db_cluster_backtracks": {
        "new_func": "rds.client.describe_db_cluster_backtracks",
        "description": "Retrieves information about backtracks for a DB cluster. Parameters: DBClusterIdentifier (string) - Required. The identifier of the DB cluster. BacktrackIdentifier (string) - The identifier of the backtrack. Filters (list) - Filters to apply to the operation. MaxRecords (integer) - The maximum number of records to include in the response. Marker (string) - Pagination token from a previous request. Returns: dict with 'Marker' and 'DBClusterBacktracks' containing backtrack details."
    },
    "rds.client.describe_db_cluster_endpoints": {
        "new_func": "rds.client.describe_db_cluster_endpoints",
        "description": "Retrieves information about the endpoints for an Amazon Aurora DB cluster. Parameters: DBClusterIdentifier (string) - The identifier of the DB cluster. DBClusterEndpointIdentifier (string) - The identifier of the endpoint. Filters (list) - Filters for the endpoint types or status. MaxRecords (integer) - The maximum number of records to include in the response. Marker (string) - Pagination token from a previous request. Returns: dict with 'Marker' and 'DBClusterEndpoints' containing endpoint details."
    },
    "rds.client.describe_db_cluster_parameter_groups": {
        "new_func": "rds.client.describe_db_cluster_parameter_groups",
        "description": "Lists descriptions of DB cluster parameter groups. Parameters: DBClusterParameterGroupName (string) - The name of the DB cluster parameter group. Filters (list) - Not currently supported. MaxRecords (integer) - The maximum number of records to include in the response. Marker (string) - Pagination token from a previous request. Returns: dict with 'Marker' and 'DBClusterParameterGroups' containing parameter group details."
    },
    "rds.client.describe_db_cluster_parameters": {
        "new_func": "rds.client.describe_db_cluster_parameters",
        "description": "Returns the detailed parameter list for a particular DB cluster parameter group. Parameters: DBClusterParameterGroupName (string) - Required. The name of the DB cluster parameter group. Source (string) - The source of the parameters to return. Filters (list) - Not currently supported. MaxRecords (integer) - The maximum number of records to include in the response. Marker (string) - Pagination token from a previous request. Returns: dict with 'Parameters' list and 'Marker'."
    },
    "rds.client.describe_db_cluster_snapshot_attributes": {
        "new_func": "rds.client.describe_db_cluster_snapshot_attributes",
        "description": "Lists DB cluster snapshot attribute names and values for a manual snapshot. Parameters: DBClusterSnapshotIdentifier (string) - Required. The identifier for the DB cluster snapshot. Returns: dict with 'DBClusterSnapshotAttributesResult' containing the snapshot identifier and attributes."
    },
    "rds.client.describe_db_cluster_snapshots": {
        "new_func": "rds.client.describe_db_cluster_snapshots",
        "description": "Returns information about DB cluster snapshots with pagination support. Parameters: DBClusterIdentifier (string) - The DB cluster ID. DBClusterSnapshotIdentifier (string) - The DB cluster snapshot identifier. SnapshotType (string) - The snapshot type. Filters (list) - Filters to use in the request. MaxRecords (integer) - The maximum number of records to include in the response. Marker (string) - The pagination token. IncludeShared (boolean) - Include shared snapshots. IncludePublic (boolean) - Include public snapshots. DbClusterResourceId (string) - The DB cluster resource ID. Returns: dict with 'Marker' and 'DBClusterSnapshots' containing snapshot details."
    },
    "rds.client.describe_db_clusters": {
        "new_func": "rds.client.describe_db_clusters",
        "description": "Describes existing Amazon Aurora and Multi-AZ DB clusters with pagination support. Parameters: DBClusterIdentifier (string) - The DB cluster identifier. Filters (list) - Filters to use in the request. MaxRecords (integer) - The maximum number of records to include in the response. Marker (string) - The pagination token. IncludeShared (boolean) - Include shared clusters. Returns: dict with 'Marker' and 'DBClusters' containing cluster details."
    },
    "rds.client.describe_db_engine_versions": {
        "new_func": "rds.client.describe_db_engine_versions",
        "description": "Describes the properties of DB engine versions. Parameters: Engine (string) - The database engine. EngineVersion (string) - The database engine version. DBParameterGroupFamily (string) - The name of the DB parameter group family. Filters (list) - Filters to use in the request. MaxRecords (integer) - The maximum number of records to include. Marker (string) - The pagination token. DefaultOnly (boolean) - Return only the default version. ListSupportedCharacterSets (boolean) - List supported character sets. ListSupportedTimezones (boolean) - List supported time zones. IncludeAll (boolean) - Also list unavailable engine versions. Returns: dict with 'Marker' and 'DBEngineVersions' containing engine version details."
    },
    "rds.client.describe_db_instance_automated_backups": {
        "new_func": "rds.client.describe_db_instance_automated_backups",
        "description": "Displays backups for current and deleted instances. Parameters: DbiResourceId (string) - The resource ID of the DB instance. DBInstanceIdentifier (string) - The DB instance identifier. Filters (list) - Filters to use in the request. MaxRecords (integer) - The maximum number of records to include. Marker (string) - The pagination token. DBInstanceAutomatedBackupsArn (string) - The ARN of the replicated automated backups. Returns: dict with 'Marker' and 'DBInstanceAutomatedBackups' containing backup details."
    },
    "rds.client.describe_db_instances": {
        "new_func": "rds.client.describe_db_instances",
        "description": "Describes provisioned RDS instances with pagination support. Parameters: DBInstanceIdentifier (string) - The DB instance identifier. Filters (list) - Filters to use in the request. MaxRecords (integer) - The maximum number of records to include. Marker (string) - The pagination token. Returns: dict with 'Marker' and 'DBInstances' containing instance details."
    },
    "rds.client.describe_db_log_files": {
        "new_func": "rds.client.describe_db_log_files",
        "description": "Lists DB log files for a DB instance. Parameters: DBInstanceIdentifier (string) - Required. FilenameContains (string) - Filters log file names. FileLastWritten (integer) - Filters files written since a specified date. FileSize (integer) - Filters files larger than a specified size. Filters (list) - Not supported. MaxRecords (integer) - Max records in response. Marker (string) - Pagination token. Returns: dict with 'DescribeDBLogFiles' containing 'LogFileName', 'LastWritten', 'Size', and 'Marker'. Exceptions: DBInstanceNotFoundFault."
    },
    "rds.client.describe_db_parameter_groups": {
        "new_func": "rds.client.describe_db_parameter_groups",
        "description": "Lists DBParameterGroup descriptions. Parameters: DBParameterGroupName (string) - Name of the DB parameter group. Filters (list) - Not supported. MaxRecords (integer) - Max records in response. Marker (string) - Pagination token. Returns: dict with 'Marker' and 'DBParameterGroups' containing 'DBParameterGroupName', 'DBParameterGroupFamily', 'Description', 'DBParameterGroupArn'. Exceptions: DBParameterGroupNotFoundFault."
    },
    "rds.client.describe_db_parameters": {
        "new_func": "rds.client.describe_db_parameters",
        "description": "Returns detailed parameter list for a DB parameter group. Parameters: DBParameterGroupName (string) - Required. Source (string) - Types of parameters to return. Filters (list) - Not supported. MaxRecords (integer) - Max records in response. Marker (string) - Pagination token. Returns: dict with 'Parameters' containing parameter details and 'Marker'. Exceptions: DBParameterGroupNotFoundFault."
    },
    "rds.client.describe_db_proxies": {
        "new_func": "rds.client.describe_db_proxies",
        "description": "Returns information about DB proxies. Parameters: DBProxyName (string) - Name of the DB proxy. Filters (list) - Not supported. Marker (string) - Pagination token. MaxRecords (integer) - Max records in response. Returns: dict with 'DBProxies' containing proxy details and 'Marker'. Exceptions: DBProxyNotFoundFault."
    },
    "rds.client.describe_db_proxy_endpoints": {
        "new_func": "rds.client.describe_db_proxy_endpoints",
        "description": "Returns information about DB proxy endpoints. Parameters: DBProxyName (string) - Name of the DB proxy. DBProxyEndpointName (string) - Specific endpoint to describe. Filters (list) - Not supported. Marker (string) - Pagination token. MaxRecords (integer) - Max records in response. Returns: dict with 'DBProxyEndpoints' containing endpoint details and 'Marker'. Exceptions: DBProxyNotFoundFault, DBProxyEndpointNotFoundFault."
    },
    "rds.client.describe_db_proxy_target_groups": {
        "new_func": "rds.client.describe_db_proxy_target_groups",
        "description": "Returns information about DB proxy target groups. Parameters: DBProxyName (string) - Required. Identifier of the DBProxy. TargetGroupName (string) - Identifier of the DBProxyTargetGroup. Filters (list) - Not supported. Marker (string) - Pagination token. MaxRecords (integer) - Max records to include in response, default 100. Returns: dict with TargetGroups and Marker."
    },
    "rds.client.describe_db_proxy_targets": {
        "new_func": "rds.client.describe_db_proxy_targets",
        "description": "Returns information about DBProxyTarget objects with pagination support. Parameters: DBProxyName (string) - Required. Identifier of the DBProxyTarget. TargetGroupName (string) - Identifier of the DBProxyTargetGroup. Filters (list) - Not supported. Marker (string) - Pagination token. MaxRecords (integer) - Max records to include in response, default 100. Returns: dict with Targets and Marker."
    },
    "rds.client.describe_db_recommendations": {
        "new_func": "rds.client.describe_db_recommendations",
        "description": "Describes recommendations for DB instances, clusters, and parameter groups. Parameters: LastUpdatedAfter (datetime) - Include recommendations updated after this time. LastUpdatedBefore (datetime) - Include recommendations updated before this time. Locale (string) - Language for the list of recommendations. Filters (list) - Filter recommendations by various criteria. MaxRecords (integer) - Max recommendations to include in the response. Marker (string) - Pagination token. Returns: dict with DBRecommendations and Marker."
    },
    "rds.client.describe_db_security_groups": {
        "new_func": "rds.client.describe_db_security_groups",
        "description": "Returns a list of DBSecurityGroup descriptions. Parameters: DBSecurityGroupName (string) - Name of the DB security group. Filters (list) - Not supported. MaxRecords (integer) - Max records to include in response, default 100. Marker (string) - Pagination token. Returns: dict with Marker and DBSecurityGroups."
    },
    "rds.client.describe_db_shard_groups": {
        "new_func": "rds.client.describe_db_shard_groups",
        "description": "Describes existing Aurora Limitless Database DB shard groups. Parameters: DBShardGroupIdentifier (string) - DB shard group identifier or ARN. Filters (list) - Filter DB shard groups by various criteria. Marker (string) - Pagination token. MaxRecords (integer) - Max records to include in response, default 100. Returns: dict with DBShardGroups and Marker."
    },
    "rds.client.describe_db_snapshot_attributes": {
        "new_func": "rds.client.describe_db_snapshot_attributes",
        "description": "Retrieves attributes for a manual DB snapshot. Parameters: DBSnapshotIdentifier (string) - Required. Identifier for the DB snapshot. Returns: dict containing 'DBSnapshotAttributesResult' with 'DBSnapshotIdentifier', 'DBSnapshotAttributes' including 'AttributeName' and 'AttributeValues'."
    },
    "rds.client.describe_db_snapshot_tenant_databases": {
        "new_func": "rds.client.describe_db_snapshot_tenant_databases",
        "description": "Describes tenant databases in a DB snapshot for RDS Oracle in multi-tenant configuration. Parameters: DBInstanceIdentifier (string) - ID of the DB instance. DBSnapshotIdentifier (string) - ID of the DB snapshot. SnapshotType (string) - Type of DB snapshots to return. Filters (list) - Filters for specific tenant databases. MaxRecords (integer) - Maximum number of records to include. Marker (string) - Pagination token from previous request. DbiResourceId (string) - Specific DB resource identifier. Returns: dict with 'Marker' and 'DBSnapshotTenantDatabases' providing details such as 'DBSnapshotIdentifier', 'DBInstanceIdentifier', 'DbiResourceId', etc."
    },
    "rds.client.describe_db_snapshots": {
        "new_func": "rds.client.describe_db_snapshots",
        "description": "Returns information about DB snapshots with pagination support. Parameters: DBInstanceIdentifier (string) - ID of the DB instance. DBSnapshotIdentifier (string) - Specific DB snapshot identifier. SnapshotType (string) - Type of snapshots to return. Filters (list) - Filters to describe DB snapshots. MaxRecords (integer) - Maximum number of records to include. Marker (string) - Pagination token from previous request. IncludeShared (boolean) - Include shared manual DB snapshots. IncludePublic (boolean) - Include manual public DB snapshots. DbiResourceId (string) - Specific DB resource ID. Returns: dict with 'Marker' and 'DBSnapshots' containing details such as 'DBSnapshotIdentifier', 'DBInstanceIdentifier', 'SnapshotCreateTime', etc."
    },
    "rds.client.describe_db_subnet_groups": {
        "new_func": "rds.client.describe_db_subnet_groups",
        "description": "Returns a list of DBSubnetGroup descriptions. Parameters: DBSubnetGroupName (string) - Name of the DB subnet group. Filters (list) - Currently not supported. MaxRecords (integer) - Maximum number of records to include. Marker (string) - Pagination token from previous request. Returns: dict with 'Marker' and 'DBSubnetGroups' providing details such as 'DBSubnetGroupName', 'DBSubnetGroupDescription', 'VpcId', 'SubnetGroupStatus', 'Subnets', etc."
    },
    "rds.client.describe_engine_default_cluster_parameters": {
        "new_func": "rds.client.describe_engine_default_cluster_parameters",
        "description": "Returns default engine and system parameter information for the cluster database engine. Parameters: DBParameterGroupFamily (string) - Required. DB cluster parameter group family name. Filters (list) - Currently not supported. MaxRecords (integer) - Maximum number of records to include. Marker (string) - Pagination token from previous request. Returns: dict with 'EngineDefaults' containing 'DBParameterGroupFamily', 'Marker', and 'Parameters' with details such as 'ParameterName', 'ParameterValue', 'Description', etc."
    },
    "rds.client.describe_engine_default_parameters": {
        "new_func": "rds.client.describe_engine_default_parameters",
        "description": "Returns default parameter information for the specified database engine. Parameters: DBParameterGroupFamily (string) - Required. The DB parameter group family name. Filters (list) - Not currently supported. MaxRecords (integer) - Maximum number of records to include in the response, defaults to 100. Marker (string) - Pagination token provided by a previous request. Returns: dict with EngineDefaults including DBParameterGroupFamily, Marker, and a list of Parameters."
    },
    "rds.client.describe_event_categories": {
        "new_func": "rds.client.describe_event_categories",
        "description": "Displays a list of categories for all event source types or a specified source type. Parameters: SourceType (string) - Type of source generating the events. Filters (list) - Not currently supported. Returns: dict with EventCategoriesMapList containing SourceType and EventCategories."
    },
    "rds.client.describe_event_subscriptions": {
        "new_func": "rds.client.describe_event_subscriptions",
        "description": "Lists all subscription descriptions for a customer account. Parameters: SubscriptionName (string) - Name of the RDS event notification subscription. Filters (list) - Not currently supported. MaxRecords (integer) - Maximum number of records to include in the response, defaults to 100. Marker (string) - Pagination token provided by a previous request. Returns: dict with Marker and EventSubscriptionsList including details like CustomerAwsId, CustSubscriptionId, SnsTopicArn, Status, SubscriptionCreationTime, SourceType, SourceIdsList, EventCategoriesList, Enabled, and EventSubscriptionArn."
    },
    "rds.client.describe_events": {
        "new_func": "rds.client.describe_events",
        "description": "Returns events related to RDS and Aurora resources for the past 14 days. Parameters: SourceIdentifier (string) - Identifier of the event source. SourceType (string) - The event source type. StartTime (datetime) - Beginning of the time interval for events. EndTime (datetime) - End of the time interval for events. Duration (integer) - Number of minutes to retrieve events for. EventCategories (list) - List of event categories. Filters (list) - Not currently supported. MaxRecords (integer) - Maximum number of records to include in the response, defaults to 100. Marker (string) - Pagination token provided by a previous request. Returns: dict with Marker and a list of Events including SourceIdentifier, SourceType, Message, EventCategories, Date, and SourceArn."
    },
    "rds.client.describe_export_tasks": {
        "new_func": "rds.client.describe_export_tasks",
        "description": "Returns information about snapshot or cluster exports to Amazon S3 with pagination support. Parameters: ExportTaskIdentifier (string) - Identifier of the export task. SourceArn (string) - ARN of the snapshot or cluster. Filters (list) - Filters for the export tasks. Marker (string) - Pagination token from a previous request. MaxRecords (integer) - Maximum number of records to include in the response, defaults to 100. SourceType (string) - Type of source for the export. Returns: dict with Marker and ExportTasks list including details like ExportTaskIdentifier, SourceArn, ExportOnly, SnapshotTime, TaskStartTime, TaskEndTime, S3Bucket, S3Prefix, IamRoleArn, KmsKeyId, Status, PercentProgress, TotalExtractedDataInGB, FailureCause, WarningMessage, and SourceType."
    },
    "rds.client.describe_global_clusters": {
        "new_func": "rds.client.describe_global_clusters",
        "description": "Retrieves information about Aurora global database clusters with pagination support. Parameters: GlobalClusterIdentifier (string) - Identifier for a specific DB cluster. Filters (list) - Filters results by one or more clusters. MaxRecords (integer) - Maximum number of records to include in the response. Marker (string) - Pagination token from a previous request. Returns: dict with Marker and GlobalClusters containing cluster details like GlobalClusterIdentifier, Engine, Status, DatabaseName, etc."
    },
    "rds.client.describe_integrations": {
        "new_func": "rds.client.describe_integrations",
        "description": "Describes zero-ETL integrations with Amazon Redshift. Parameters: IntegrationIdentifier (string) - Identifier for the integration. Filters (list) - Filters results by one or more resources. MaxRecords (integer) - Maximum number of records to include in the response. Marker (string) - Pagination token from a previous request. Returns: dict with Marker and Integrations containing integration details like SourceArn, TargetArn, IntegrationName, Status, etc."
    },
    "rds.client.describe_option_group_options": {
        "new_func": "rds.client.describe_option_group_options",
        "description": "Describes all available options for the specified engine. Parameters: EngineName (string) - Name of the engine. MajorEngineVersion (string) - Major engine version. Filters (list) - Not currently supported. MaxRecords (integer) - Maximum number of records to include in the response. Marker (string) - Pagination token from a previous request. Returns: dict with OptionGroupOptions containing option details and Marker for pagination."
    },
    "rds.client.describe_option_groups": {
        "new_func": "rds.client.describe_option_groups",
        "description": "Describes the available option groups. Parameters: OptionGroupName (string) - Name of the option group to describe. Filters (list) - Not currently supported. Marker (string) - Pagination token from a previous request. MaxRecords (integer) - Maximum number of records to include in the response. EngineName (string) - Filter for option groups associated with a database engine. MajorEngineVersion (string) - Filters option groups by engine version. Returns: dict with OptionGroupsList containing option group details and Marker for pagination."
    },
    "rds.client.describe_orderable_db_instance_options": {
        "new_func": "rds.client.describe_orderable_db_instance_options",
        "description": "Describes the orderable DB instance options for a specified DB engine. Parameters: Engine (string) - Name of the database engine. EngineVersion (string) - Engine version filter. DBInstanceClass (string) - DB instance class filter. LicenseModel (string) - License model filter. AvailabilityZoneGroup (string) - Local Zone group filter. Vpc (boolean) - VPC offering filter. Filters (list) - Not currently supported. MaxRecords (integer) - Maximum number of records to include in the response. Marker (string) - Pagination token from a previous request. Returns: dict with OrderableDBInstanceOptions containing instance option details and Marker for pagination."
    },
    "rds.client.describe_pending_maintenance_actions": {
        "new_func": "rds.client.describe_pending_maintenance_actions",
        "description": "Returns a list of resources with pending maintenance actions. Parameters: ResourceIdentifier (string) - The ARN of the resource. Filters (list) - Filters to match resources by specific criteria. Marker (string) - Pagination token from a previous request. MaxRecords (integer) - Maximum number of records to include in response. Returns: dict with list of PendingMaintenanceActions, and an optional Marker."
    },
    "rds.client.describe_reserved_db_instances": {
        "new_func": "rds.client.describe_reserved_db_instances",
        "description": "Returns information about reserved DB instances for an account or a specified reserved DB instance. Parameters: ReservedDBInstanceId (string) - Filter for a specific reservation ID. ReservedDBInstancesOfferingId (string) - Filter for a specific offering ID. DBInstanceClass (string) - Filter for a specific DB instance class. Duration (string) - Filter for a specific duration. ProductDescription (string) - Filter for a specific product description. OfferingType (string) - Filter for a specific offering type. MultiAZ (boolean) - Filter for Multi-AZ support. LeaseId (string) - Filter for a specific lease ID. Filters (list) - Not currently supported. MaxRecords (integer) - Maximum number of records to include in response. Marker (string) - Pagination token from a previous request. Returns: dict with list of ReservedDBInstances and an optional Marker."
    },
    "rds.client.describe_reserved_db_instances_offerings": {
        "new_func": "rds.client.describe_reserved_db_instances_offerings",
        "description": "Lists available reserved DB instance offerings. Parameters: ReservedDBInstancesOfferingId (string) - Filter for a specific reservation offering ID. DBInstanceClass (string) - Filter for a specific DB instance class. Duration (string) - Filter for a specific duration. ProductDescription (string) - Filter for a specific product description. OfferingType (string) - Filter for a specific offering type. MultiAZ (boolean) - Filter for Multi-AZ support. Filters (list) - Not currently supported. MaxRecords (integer) - Maximum number of records to include in response. Marker (string) - Pagination token from a previous request. Returns: dict with list of ReservedDBInstancesOfferings and an optional Marker."
    },
    "rds.client.describe_source_regions": {
        "new_func": "rds.client.describe_source_regions",
        "description": "Returns a list of source AWS Regions for cross-Region features. Parameters: RegionName (string) - Source AWS Region name. MaxRecords (integer) - Maximum number of records to include in response. Marker (string) - Pagination token from a previous request. Filters (list) - Not currently supported. Returns: dict with list of SourceRegions and an optional Marker."
    },
    "rds.client.describe_tenant_databases": {
        "new_func": "rds.client.describe_tenant_databases",
        "description": "Describes tenant databases in a multi-tenant DB instance. Parameters: DBInstanceIdentifier (string) - Identifier of the DB instance. TenantDBName (string) - Name of the tenant database. Filters (list) - Filters for one or more database tenants. Marker (string) - Pagination token from a previous request. MaxRecords (integer) - Maximum number of records to include in response. Returns: dict with list of TenantDatabases and an optional Marker."
    },
    "rds.client.describe_valid_db_instance_modifications": {
        "new_func": "rds.client.describe_valid_db_instance_modifications",
        "description": "Retrieves information about valid modifications for a DB instance. Parameters: DBInstanceIdentifier (string) - Required. The customer identifier or the ARN of the DB instance. Returns: dict with ValidDBInstanceModificationsMessage, detailing valid storage options and processor features, and whether it supports storage autoscaling and a dedicated log volume."
    },
    "rds.client.disable_http_endpoint": {
        "new_func": "rds.client.disable_http_endpoint",
        "description": "Disables the HTTP endpoint for a specified DB cluster, which disables the RDS Data API. Parameters: ResourceArn (string) - Required. The ARN of the DB cluster. Returns: dict with the DB cluster's ARN and a boolean indicating HTTP endpoint status."
    },
    "rds.client.download_db_log_file_portion": {
        "new_func": "rds.client.download_db_log_file_portion",
        "description": "Downloads a portion of the specified log file from a DB instance. Parameters: DBInstanceIdentifier (string), LogFileName (string) - Required. Marker (string) - Pagination token. NumberOfLines (integer) - Number of lines to download. Returns: dict with the log file data, a new pagination token, and a boolean indicating if more data is pending."
    },
    "rds.client.enable_http_endpoint": {
        "new_func": "rds.client.enable_http_endpoint",
        "description": "Enables the HTTP endpoint for a DB cluster for use with the RDS Data API. Parameters: ResourceArn (string) - Required. The ARN of the DB cluster. Returns: dict with the DB cluster's ARN and a boolean indicating HTTP endpoint status."
    },
    "rds.client.failover_db_cluster": {
        "new_func": "rds.client.failover_db_cluster",
        "description": "Forces a failover for a DB cluster, promoting a replica to be the primary DB instance. Parameters: DBClusterIdentifier (string) - Required. The identifier of the DB cluster. TargetDBInstanceIdentifier (string) - The DB instance to promote to primary. Returns: dict with information about the DB cluster post-failover."
    },
    "rds.client.failover_global_cluster": {
        "new_func": "rds.client.failover_global_cluster",
        "description": "Promotes a secondary DB cluster to primary for global database failover or switchover. Parameters: GlobalClusterIdentifier (string) - Required. Identifier of the global database. TargetDbClusterIdentifier (string) - Required. Identifier of the secondary DB cluster. AllowDataLoss (boolean) - Allows data loss for failover. Switchover (boolean) - Specifies a switchover operation. Returns: dict with 'GlobalCluster' containing details such as GlobalClusterIdentifier, Status, Engine, DatabaseName, StorageEncrypted, and FailoverState."
    },
    "rds.client.generate_db_auth_token": {
        "new_func": "rds.client.generate_db_auth_token",
        "description": "Generates an authentication token for database connection. Parameters: DBHostname (str) - Required. Hostname of the database. Port (int) - Required. Database port number. DBUsername (str) - Required. Username for login. Region (str) - Optional. Database region. Returns: A presigned URL as an auth token."
    },
    "rds.client.get_paginator": {
        "new_func": "rds.client.get_paginator",
        "description": "Creates a paginator for a specified operation. Parameters: operation_name (string) - Required. Name of the operation to paginate. Raises OperationNotPageableError if the operation cannot be paginated. Returns: Paginator object."
    },
    "rds.client.get_waiter": {
        "new_func": "rds.client.get_waiter",
        "description": "Returns an object to wait for a certain condition. Parameters: waiter_name (str) - Required. Name of the waiter. Returns: Waiter object."
    },
    "rds.client.list_tags_for_resource": {
        "new_func": "rds.client.list_tags_for_resource",
        "description": "Lists all tags on an RDS resource. Parameters: ResourceName (string) - Required. ARN of the RDS resource. Filters (list) - Optional. Filters to refine the results. Returns: dict with 'TagList' containing the tags."
    },
    "rds.client.modify_activity_stream": {
        "new_func": "rds.client.modify_activity_stream",
        "description": "Changes the audit policy state of a database activity stream. Parameters: ResourceArn (string) - Required. ARN of the DB instance. AuditPolicyState (string) - Required. The audit policy state ('locked' or 'unlocked'). Returns: dict with KmsKeyId, KinesisStreamName, Status, Mode, EngineNativeAuditFieldsIncluded, and PolicyStatus."
    },
    "rds.client.modify_certificates": {
        "new_func": "rds.client.modify_certificates",
        "description": "Overrides the default SSL/TLS certificate for new DB instances, or removes the override. Parameters: CertificateIdentifier (string) - The new default certificate identifier. RemoveCustomerOverride (boolean) - Specifies whether to remove the override. Returns: dict with Certificate details including CertificateIdentifier, CertificateType, Thumbprint, ValidFrom, ValidTill, CertificateArn, CustomerOverride, and CustomerOverrideValidTill."
    },
    "rds.client.modify_current_db_cluster_capacity": {
        "new_func": "rds.client.modify_current_db_cluster_capacity",
        "description": "Sets the capacity of an Aurora Serverless v1 DB cluster. Parameters: DBClusterIdentifier (string) - Required. Identifier for the DB cluster. Capacity (integer) - The DB cluster capacity. SecondsBeforeTimeout (integer) - Time before timeout. TimeoutAction (string) - Action to take on timeout. Returns: dict with DBClusterIdentifier, PendingCapacity, CurrentCapacity, SecondsBeforeTimeout, and TimeoutAction."
    },
    "rds.client.modify_custom_db_engine_version": {
        "new_func": "rds.client.modify_custom_db_engine_version",
        "description": "Modifies the status of a custom engine version. Parameters: Engine (string) - Required. The database engine. EngineVersion (string) - Required. The CEV to modify. Description (string) - Description of your CEV. Status (string) - The availability status for the CEV. Returns: dict with details of the modified CEV including Engine, EngineVersion, DBParameterGroupFamily, DBEngineDescription, DBEngineVersionDescription, and Status."
    },
    "rds.client.modify_db_cluster": {
        "new_func": "rds.client.modify_db_cluster",
        "description": "Modifies settings of a DB cluster. Parameters: DBClusterIdentifier (string) - Required. Identifier for the DB cluster. NewDBClusterIdentifier (string) - New identifier for the DB cluster. ApplyImmediately (boolean) - Whether to apply changes immediately. BackupRetentionPeriod (integer) - Days to retain backups. DBClusterParameterGroupName (string) - Name of the DB cluster parameter group. VpcSecurityGroupIds (list) - List of VPC security group IDs. Other various options and flags. Returns: dict with details of the modified DBCluster."
    },
    "rds.client.modify_db_cluster_endpoint": {
        "new_func": "rds.client.modify_db_cluster_endpoint",
        "description": "Modifies properties of an Aurora DB cluster endpoint. Parameters: DBClusterEndpointIdentifier (string) - Required. Identifier for the endpoint. EndpointType (string) - Type of the endpoint (READER, WRITER, ANY). StaticMembers (list) - DB instance identifiers in the custom endpoint group. ExcludedMembers (list) - DB instance identifiers not in the custom endpoint group. Returns: dict with endpoint details including identifier, cluster identifier, resource identifier, endpoint address, status, and ARN."
    },
    "rds.client.modify_db_cluster_parameter_group": {
        "new_func": "rds.client.modify_db_cluster_parameter_group",
        "description": "Modifies parameters of a DB cluster parameter group. Parameters: DBClusterParameterGroupName (string) - Required. Name of the parameter group. Parameters (list) - Required. Parameters to modify (names, values, apply method). Returns: dict with the name of the DB cluster parameter group."
    },
    "rds.client.modify_db_cluster_snapshot_attribute": {
        "new_func": "rds.client.modify_db_cluster_snapshot_attribute",
        "description": "Adds or removes an attribute from a DB cluster snapshot. Parameters: DBClusterSnapshotIdentifier (string) - Required. Snapshot identifier. AttributeName (string) - Required. Name of the attribute (restore). ValuesToAdd (list) - Attribute values to add. ValuesToRemove (list) - Attribute values to remove. Returns: dict with the DB cluster snapshot attributes result, including snapshot identifier and attributes."
    },
    "rds.client.modify_db_instance": {
        "new_func": "rds.client.modify_db_instance",
        "description": "Modifies settings for a DB instance. Parameters: DBInstanceIdentifier (string) - Required. Identifier for the instance. Numerous optional parameters to specify new settings like AllocatedStorage, DBInstanceClass, ApplyImmediately, MasterUserPassword, etc. Returns: dict with details of the DBInstance including its identifier, class, engine, status, endpoint, storage, and various timestamps and settings."
    },
    "rds.client.modify_db_parameter_group": {
        "new_func": "rds.client.modify_db_parameter_group",
        "description": "Modifies the parameters of a DB parameter group. Parameters: DBParameterGroupName (string) - Required. Name of the parameter group. Parameters (list) - Required. Parameters to modify (names, values, apply method). Returns: dict with the name of the DB parameter group."
    },
    "rds.client.modify_db_proxy": {
        "new_func": "rds.client.modify_db_proxy",
        "description": "Modifies an existing DB proxy's settings. Parameters: DBProxyName (string) - Required. Identifier for the DBProxy. NewDBProxyName (string) - New identifier for the DBProxy. Auth (list) - New authentication settings. RequireTLS (boolean) - If TLS encryption is required. IdleClientTimeout (integer) - Inactive connection timeout. DebugLogging (boolean) - Include detailed SQL statements in logs. RoleArn (string) - ARN of IAM role for Secrets Manager access. SecurityGroups (list) - New list of security groups. Returns: dict with 'DBProxy' details such as DBProxyName, DBProxyArn, Status, EngineFamily, and more."
    },
    "rds.client.modify_db_proxy_endpoint": {
        "new_func": "rds.client.modify_db_proxy_endpoint",
        "description": "Changes settings for an existing DB proxy endpoint. Parameters: DBProxyEndpointName (string) - Required. Name of the DB proxy endpoint. NewDBProxyEndpointName (string) - New identifier for the DBProxyEndpoint. VpcSecurityGroupIds (list) - VPC security group IDs. Returns: dict with 'DBProxyEndpoint' details such as DBProxyEndpointName, DBProxyEndpointArn, DBProxyName, Status, VpcId, and more."
    },
    "rds.client.modify_db_proxy_target_group": {
        "new_func": "rds.client.modify_db_proxy_target_group",
        "description": "Modifies properties of a DBProxyTargetGroup. Parameters: TargetGroupName (string) - Required. Name of the target group. DBProxyName (string) - Required. Name of the proxy. ConnectionPoolConfig (dict) - Settings for connection pool size and behavior. NewName (string) - New name for the DBProxyTarget. Returns: dict with 'DBProxyTargetGroup' details such as DBProxyName, TargetGroupName, TargetGroupArn, Status, ConnectionPoolConfig, and more."
    },
    "rds.client.modify_db_recommendation": {
        "new_func": "rds.client.modify_db_recommendation",
        "description": "Updates the recommendation status and recommended action status for a recommendation. Parameters: RecommendationId (string) - Required. Identifier of the recommendation. Locale (string) - Language of the recommendation. Status (string) - Recommendation status to update. RecommendedActionUpdates (list) - List of recommended action status updates. Returns: dict with 'DBRecommendation' details such as RecommendationId, TypeId, Severity, ResourceArn, Status, RecommendedActions, and more."
    },
    "rds.client.modify_db_shard_group": {
        "new_func": "rds.client.modify_db_shard_group",
        "description": "Modifies settings of an Aurora Limitless Database DB shard group. Parameters: DBShardGroupIdentifier (string) - Required. Name of the DB shard group. MaxACU (float) - Maximum capacity in Aurora capacity units (ACUs). Returns: dict with 'DBShardGroup' details such as DBShardGroupResourceId, DBShardGroupIdentifier, DBClusterIdentifier, MaxACU, ComputeRedundancy, Status, and more."
    },
    "rds.client.modify_db_snapshot": {
        "new_func": "rds.client.modify_db_snapshot",
        "description": "Updates the engine version for a manual DB snapshot. Parameters: DBSnapshotIdentifier (string) - Required. Identifier for the DB snapshot. EngineVersion (string) - Engine version to upgrade the DB snapshot to. OptionGroupName (string) - Option group for the upgraded DB snapshot (Oracle only). Returns: dict with DBSnapshot details including identifiers, creation times, engine info, status, and more."
    },
    "rds.client.modify_db_snapshot_attribute": {
        "new_func": "rds.client.modify_db_snapshot_attribute",
        "description": "Modifies attributes for a manual DB snapshot. Parameters: DBSnapshotIdentifier (string) - Required. Snapshot identifier. AttributeName (string) - Required. Attribute to modify, e.g., 'restore'. ValuesToAdd (list) - DB snapshot attributes to add. ValuesToRemove (list) - DB snapshot attributes to remove. Returns: dict with DBSnapshotAttributesResult including DBSnapshotIdentifier and attributes list."
    },
    "rds.client.modify_db_subnet_group": {
        "new_func": "rds.client.modify_db_subnet_group",
        "description": "Modifies an existing DB subnet group. Parameters: DBSubnetGroupName (string) - Required. Subnet group name. DBSubnetGroupDescription (string) - Description for the subnet group. SubnetIds (list) - Required. EC2 subnet IDs for the group. Returns: dict with DBSubnetGroup details including name, description, VpcId, status, subnets, and more."
    },
    "rds.client.modify_event_subscription": {
        "new_func": "rds.client.modify_event_subscription",
        "description": "Modifies an RDS event notification subscription. Parameters: SubscriptionName (string) - Required. Subscription name. SnsTopicArn (string) - SNS topic ARN for notifications. SourceType (string) - Type of source generating events. EventCategories (list) - Event categories to subscribe to. Enabled (boolean) - Whether the subscription is enabled. Returns: dict with EventSubscription details including ARN, status, creation time, source info, and more."
    },
    "rds.client.modify_global_cluster": {
        "new_func": "rds.client.modify_global_cluster",
        "description": "Modifies a setting for an Aurora global database cluster. Parameters: GlobalClusterIdentifier (string) - Current cluster identifier. NewGlobalClusterIdentifier (string) - New cluster identifier. DeletionProtection (boolean) - Enables or disables deletion protection. EngineVersion (string) - Database engine version to upgrade to. AllowMajorVersionUpgrade (boolean) - Allows major version upgrades. Returns: dict with GlobalCluster details including identifiers, status, engine info, members, and more."
    },
    "rds.client.modify_integration": {
        "new_func": "rds.client.modify_integration",
        "description": "Modifies a zero-ETL integration with Amazon Redshift for Aurora MySQL source DB clusters. Parameters: IntegrationIdentifier (string) - Required. Unique identifier of the integration. IntegrationName (string) - New integration name. DataFilter (string) - New data filter. Description (string) - New integration description. Returns: dict with details of the integration, including SourceArn, TargetArn, IntegrationName, IntegrationArn, KMSKeyId, Status, Tags, CreateTime, Errors, DataFilter, and Description."
    },
    "rds.client.modify_option_group": {
        "new_func": "rds.client.modify_option_group",
        "description": "Modifies an existing option group. Parameters: OptionGroupName (string) - Required. Option group name. OptionsToInclude (list) - Options to add or update in the group. OptionsToRemove (list) - Options to remove from the group. ApplyImmediately (boolean) - Apply changes immediately or during next maintenance window. Returns: dict with details of the modified OptionGroup, including OptionGroupName, OptionGroupDescription, EngineName, MajorEngineVersion, Options, AllowsVpcAndNonVpcInstanceMemberships, VpcId, OptionGroupArn, and more."
    },
    "rds.client.modify_tenant_database": {
        "new_func": "rds.client.modify_tenant_database",
        "description": "Modifies an existing tenant database in a DB instance for RDS for Oracle CDB instances. Parameters: DBInstanceIdentifier (string) - Required. DB instance identifier. TenantDBName (string) - Required. Tenant database name. MasterUserPassword (string) - New master user password. NewTenantDBName (string) - New tenant database name. Returns: dict with details of the TenantDatabase, including TenantDatabaseCreateTime, DBInstanceIdentifier, TenantDBName, Status, MasterUsername, and more."
    },
    "rds.client.promote_read_replica": {
        "new_func": "rds.client.promote_read_replica",
        "description": "Promotes a read replica DB instance to a standalone DB instance. Parameters: DBInstanceIdentifier (string) - Required. Identifier of the read replica. BackupRetentionPeriod (integer) - Number of days to retain backups. PreferredBackupWindow (string) - Time range for automated backups. Returns: dict with details of the promoted DBInstance, including DBInstanceIdentifier, DBInstanceClass, Engine, DBInstanceStatus, Endpoint, and more."
    },
    "rds.client.promote_read_replica_db_cluster": {
        "new_func": "rds.client.promote_read_replica_db_cluster",
        "description": "Promotes a read replica DB cluster to a standalone DB cluster. Parameters: DBClusterIdentifier (string) - Required. Identifier of the DB cluster read replica. Returns: dict with details of the promoted DBCluster, including AllocatedStorage, AvailabilityZones, BackupRetentionPeriod, DBClusterIdentifier, Engine, EngineVersion, Status, and more."
    },
    "rds.client.purchase_reserved_db_instances_offering": {
        "new_func": "rds.client.purchase_reserved_db_instances_offering",
        "description": "Purchases a reserved DB instance offering. Parameters: ReservedDBInstancesOfferingId (string) - Required ID of the Reserved DB instance offering. ReservedDBInstanceId (string) - Identifier for tracking the reservation. DBInstanceCount (integer) - Number of instances to reserve, default 1. Tags (list of dicts) - Tags for the resource. Returns: dict with details of the ReservedDBInstance including IDs, class, start time, duration, prices, state, and other metadata."
    },
    "rds.client.reboot_db_cluster": {
        "new_func": "rds.client.reboot_db_cluster",
        "description": "Reboots a non-Aurora Multi-AZ DB cluster, causing a momentary outage. Parameters: DBClusterIdentifier (string) - Required identifier for the DB cluster. Returns: dict with details of the DBCluster including storage, status, endpoints, settings, and other metadata."
    },
    "rds.client.reboot_db_instance": {
        "new_func": "rds.client.reboot_db_instance",
        "description": "Reboots a DB instance, causing a momentary outage. Parameters: DBInstanceIdentifier (string) - Required identifier for the DB instance. ForceFailover (boolean) - Whether to conduct the reboot through a Multi-AZ failover. Returns: dict with details of the DBInstance including identifier, class, engine, status, endpoint, storage, and other metadata."
    },
    "rds.client.reboot_db_shard_group": {
        "new_func": "rds.client.reboot_db_shard_group",
        "description": "Reboots a DB shard group, typically for maintenance. Parameters: DBShardGroupIdentifier (string) - Required name of the DB shard group to reboot. Applies to Aurora Limitless Database DB shard groups only. Returns: dict with DBShardGroupResourceId, identifier, cluster identifier, capacity, status, endpoint, and other attributes."
    },
    "rds.client.register_db_proxy_targets": {
        "new_func": "rds.client.register_db_proxy_targets",
        "description": "Associates DB instances or clusters with a DBProxyTargetGroup. Parameters: DBProxyName (string) - Required identifier of the DBProxy. TargetGroupName (string) - Identifier of the DBProxyTargetGroup. DBInstanceIdentifiers (list of strings) - Identifiers for DB instances. DBClusterIdentifiers (list of strings) - Identifiers for DB clusters. Returns: dict with details of DBProxyTargets including ARN, endpoint, resource ID, port, type, role, and health information."
    },
    "rds.client.remove_from_global_cluster": {
        "new_func": "rds.client.remove_from_global_cluster",
        "description": "Detaches an Aurora secondary cluster from an Aurora global database cluster, making it a standalone cluster with read-write capability. Parameters: GlobalClusterIdentifier (string) - Identifier to detach from the global database cluster. DbClusterIdentifier (string) - ARN identifying the detached cluster. Returns: dict with GlobalCluster details including GlobalClusterIdentifier, GlobalClusterResourceId, GlobalClusterArn, Status, Engine, EngineVersion, EngineLifecycleSupport, DatabaseName, StorageEncrypted, DeletionProtection, GlobalClusterMembers, and FailoverState."
    },
    "rds.client.remove_role_from_db_cluster": {
        "new_func": "rds.client.remove_role_from_db_cluster",
        "description": "Removes an IAM role association from a DB cluster. Parameters: DBClusterIdentifier (string) - Name of the DB cluster. RoleArn (string) - ARN of the IAM role to disassociate. FeatureName (string) - Feature name for the DB cluster. Returns: None"
    },
    "rds.client.remove_role_from_db_instance": {
        "new_func": "rds.client.remove_role_from_db_instance",
        "description": "Disassociates an IAM role from a DB instance. Parameters: DBInstanceIdentifier (string) - Name of the DB instance. RoleArn (string) - ARN of the IAM role. FeatureName (string) - Feature name for the DB instance. Returns: None"
    },
    "rds.client.remove_source_identifier_from_subscription": {
        "new_func": "rds.client.remove_source_identifier_from_subscription",
        "description": "Removes a source identifier from an RDS event notification subscription. Parameters: SubscriptionName (string) - Name of the subscription. SourceIdentifier (string) - Source identifier to remove. Returns: dict with EventSubscription details including CustomerAwsId, CustSubscriptionId, SnsTopicArn, Status, SubscriptionCreationTime, SourceType, SourceIdsList, EventCategoriesList, Enabled, and EventSubscriptionArn."
    },
    "rds.client.remove_tags_from_resource": {
        "new_func": "rds.client.remove_tags_from_resource",
        "description": "Removes metadata tags from an RDS resource. Parameters: ResourceName (string) - ARN of the RDS resource. TagKeys (list of strings) - Tag keys to remove. Returns: None"
    },
    "rds.client.reset_db_cluster_parameter_group": {
        "new_func": "rds.client.reset_db_cluster_parameter_group",
        "description": "Resets a DB cluster parameter group to default values. Parameters: DBClusterParameterGroupName (string) - Required. Name of the parameter group. ResetAllParameters (boolean) - Whether to reset all parameters. Parameters (list) - List of specific parameters to reset. Returns: dict with DBClusterParameterGroupName."
    },
    "rds.client.reset_db_parameter_group": {
        "new_func": "rds.client.reset_db_parameter_group",
        "description": "Resets a DB parameter group to default values. Parameters: DBParameterGroupName (string) - Required. Name of the parameter group. ResetAllParameters (boolean) - Whether to reset all parameters. Parameters (list) - Specific parameters to reset. Returns: dict with DBParameterGroupName."
    },
    "rds.client.restore_db_cluster_from_s3": {
        "new_func": "rds.client.restore_db_cluster_from_s3",
        "description": "Creates an Aurora DB cluster from MySQL data in an S3 bucket. Parameters include AvailabilityZones (list), BackupRetentionPeriod (integer), DBClusterIdentifier (string) - Required, and many others for configuration. Returns: dict with details of the DBCluster."
    },
    "rds.client.restore_db_cluster_from_snapshot": {
        "new_func": "rds.client.restore_db_cluster_from_snapshot",
        "description": "Creates a new DB cluster from a DB snapshot or DB cluster snapshot. Parameters include AvailabilityZones (list), DBClusterIdentifier (string) - Required, SnapshotIdentifier (string) - Required, and more. Returns: dict with DBCluster information."
    },
    "rds.client.restore_db_cluster_to_point_in_time": {
        "new_func": "rds.client.restore_db_cluster_to_point_in_time",
        "description": "Restores a DB cluster to a specified time. Parameters: DBClusterIdentifier (string) - Required, SourceDBClusterIdentifier (string), RestoreToTime (datetime), UseLatestRestorableTime (boolean), and others. Returns: dict with DBCluster details."
    },
    "rds.client.restore_db_instance_from_db_snapshot": {
        "new_func": "rds.client.restore_db_instance_from_db_snapshot",
        "description": "Creates a new DB instance from a DB snapshot. Parameters: DBInstanceIdentifier (string) - Required. Name of the DB instance to create. DBSnapshotIdentifier (string) - Identifier for the DB snapshot to restore from. DBInstanceClass (string) - Compute and memory capacity of the instance. Port (integer) - Port number on which the database accepts connections. MultiAZ (boolean) - Specifies if the DB instance is a Multi-AZ deployment. PubliclyAccessible (boolean) - Specifies if the DB instance is publicly accessible. Tags (list) - List of tags to be applied to the resource. Returns: dict with details of the DBInstance."
    },
    "rds.client.restore_db_instance_from_s3": {
        "new_func": "rds.client.restore_db_instance_from_s3",
        "description": "Restores a DB instance from an S3 bucket. Parameters: DBName (string) - Database name. DBInstanceIdentifier (string) - Required. Identifier for the instance. DBInstanceClass (string) - Required. Compute and memory capacity. Engine (string) - Required. Database engine. MasterUsername (string) - Master user name. MasterUserPassword (string) - Master user password. S3BucketName (string) - Required. S3 bucket name containing the backup. S3IngestionRoleArn (string) - Required. IAM role ARN for accessing S3. Returns: dict with details of the DBInstance."
    },
    "rds.client.restore_db_instance_to_point_in_time": {
        "new_func": "rds.client.restore_db_instance_to_point_in_time",
        "description": "Restores a DB instance to a specified time. Parameters: SourceDBInstanceIdentifier (string) - Identifier of the source instance. TargetDBInstanceIdentifier (string) - Required. Name for the new instance. RestoreTime (datetime) - Point in time to restore from. UseLatestRestorableTime (boolean) - Use the latest restorable time. DBInstanceClass (string) - Compute and memory capacity of the instance. MultiAZ (boolean) - Specifies if the DB instance is a Multi-AZ deployment. PubliclyAccessible (boolean) - Specifies if the DB instance is publicly accessible. Returns: dict with details of the DBInstance."
    },
    "rds.client.revoke_db_security_group_ingress": {
        "new_func": "rds.client.revoke_db_security_group_ingress",
        "description": "Revokes ingress from a DBSecurityGroup. Parameters: DBSecurityGroupName (string) - Required. Name of the security group. CIDRIP (string) - IP range to revoke access from. EC2SecurityGroupId (string) - EC2 security group ID to revoke access from. Returns: dict with details of the DBSecurityGroup."
    },
    "rds.client.start_activity_stream": {
        "new_func": "rds.client.start_activity_stream",
        "description": "Starts a database activity stream. Parameters: ResourceArn (string) - Required. ARN of the DB cluster. Mode (string) - Required. Mode of the activity stream ('sync' or 'async'). KmsKeyId (string) - Required. KMS key identifier for encryption. ApplyImmediately (boolean) - Start the activity stream immediately. EngineNativeAuditFieldsIncluded (boolean) - Include engine-native audit fields. Returns: dict with details of the activity stream status and settings."
    },
    "rds.client.start_db_cluster": {
        "new_func": "rds.client.start_db_cluster",
        "description": "Starts an Amazon Aurora DB cluster that was stopped. Parameters: DBClusterIdentifier (string) - Required. The identifier of the DB cluster to start. Returns: dict with DBCluster details including status and endpoints."
    },
    "rds.client.start_db_instance": {
        "new_func": "rds.client.start_db_instance",
        "description": "Starts an Amazon RDS DB instance that was stopped. Parameters: DBInstanceIdentifier (string) - Required. The identifier of the instance to start. Returns: dict with DBInstance details including status and endpoint."
    },
    "rds.client.start_db_instance_automated_backups_replication": {
        "new_func": "rds.client.start_db_instance_automated_backups_replication",
        "description": "Enables replication of automated backups to a different AWS Region. Parameters: SourceDBInstanceArn (string) - Required. The ARN of the source DB instance. BackupRetentionPeriod (integer) - The retention period for the backups. KmsKeyId (string) - The AWS KMS key ID for encrypting the backups. Returns: dict with details of the DBInstanceAutomatedBackup replication."
    },
    "rds.client.start_export_task": {
        "new_func": "rds.client.start_export_task",
        "description": "Starts an export task of DB snapshot or DB cluster data to Amazon S3. Parameters: ExportTaskIdentifier (string) - Required. Unique identifier for the export task. SourceArn (string) - Required. The ARN of the snapshot or cluster to export. S3BucketName (string) - Required. The S3 bucket name for exporting the data. IamRoleArn (string) - Required. The IAM role for writing to S3. KmsKeyId (string) - Required. The AWS KMS key ID for encryption. S3Prefix (string) - The S3 bucket prefix for the exported data. ExportOnly (list) - Specific data to export. Returns: dict with details of the export task including status and progress."
    },
    "rds.client.stop_activity_stream": {
        "new_func": "rds.client.stop_activity_stream",
        "description": "Stops a database activity stream. Parameters: ResourceArn (string) - Required. The ARN of the DB cluster for the activity stream. ApplyImmediately (boolean) - Whether to stop the stream immediately. Returns: dict with details including KmsKeyId, KinesisStreamName, and Status."
    },
    "rds.client.stop_db_cluster": {
        "new_func": "rds.client.stop_db_cluster",
        "description": "Stops an Aurora DB cluster retaining metadata and transaction logs. Parameters: DBClusterIdentifier (string) - Required. The identifier of the DB cluster to stop. Returns: dict with details of the stopped DB cluster."
    },
    "rds.client.stop_db_instance": {
        "new_func": "rds.client.stop_db_instance",
        "description": "Stops an RDS DB instance, retaining metadata and logs. Parameters: DBInstanceIdentifier (string) - Required. The identifier of the instance. DBSnapshotIdentifier (string) - Identifier for the DB Snapshot created before the instance is stopped. Returns: dict with details of the stopped DB instance."
    },
    "rds.client.stop_db_instance_automated_backups_replication": {
        "new_func": "rds.client.stop_db_instance_automated_backups_replication",
        "description": "Stops automated backup replication for a DB instance. Parameters: SourceDBInstanceArn (string) - Required. The ARN of the source DB instance. Returns: dict with details of the automated backup for which replication was stopped."
    },
    "rds.client.switchover_blue_green_deployment": {
        "new_func": "rds.client.switchover_blue_green_deployment",
        "description": "Switches over a blue/green deployment. Parameters: BlueGreenDeploymentIdentifier (string) - Required. The identifier of the blue/green deployment. SwitchoverTimeout (integer) - Time in seconds for switchover to complete. Returns: dict with details of the blue/green deployment after the switchover."
    },
    "rds.client.switchover_global_cluster": {
        "new_func": "rds.client.switchover_global_cluster",
        "description": "Switches over the secondary DB cluster to be primary in a global database cluster. Parameters: GlobalClusterIdentifier (string) - Required. The identifier of the global database cluster. TargetDbClusterIdentifier (string) - Required. The ARN of the cluster to promote to primary. Returns: dict with details of the global cluster after the switchover."
    },
    "rds.client.switchover_read_replica": {
        "new_func": "rds.client.switchover_read_replica",
        "description": "Switches the current Oracle standby database to the new primary database in an Oracle Data Guard environment. Parameters: DBInstanceIdentifier (string) - Required. Identifier of the current standby database. Returns: dict with details of the switched-over DB instance."
    },
    "sns.client.add_permission": {
        "new_func": "sns.client.add_permission",
        "description": "Adds a statement to a topic's access control policy, allowing specified AWS accounts to perform specified actions. Parameters: TopicArn (string) - Required. The ARN of the topic. Label (string) - Required. Unique identifier for the policy statement. AWSAccountId (list) - Required. AWS account IDs of users granted access. ActionName (list) - Required. Actions allowed for the specified principal(s). Returns: None."
    },
    "sns.client.can_paginate": {
        "new_func": "sns.client.can_paginate",
        "description": "Checks if an operation can be paginated. Parameters: operation_name (string) - Required. The operation name as the method name on the client. Returns: True if operation can be paginated, False otherwise."
    },
    "sns.client.check_if_phone_number_is_opted_out": {
        "new_func": "sns.client.check_if_phone_number_is_opted_out",
        "description": "Checks if a phone number is opted out of receiving SMS messages from your AWS account. Parameters: phoneNumber (string) - Required. The phone number to check. Returns: dict with isOptedOut (boolean) indicating the opt-out status."
    },
    "sns.client.close": {
        "new_func": "sns.client.close",
        "description": "Closes underlying endpoint connections. No parameters. Returns: None."
    },
    "sns.client.confirm_subscription": {
        "new_func": "sns.client.confirm_subscription",
        "description": "Verifies intent to receive messages by validating the token from Subscribe action. Parameters: TopicArn (string) - Required. ARN of the topic. Token (string) - Required. Subscription token. AuthenticateOnUnsubscribe (string) - Disallows unauthenticated unsubscribes if true. Returns: dict with 'SubscriptionArn' (string)."
    },
    "sns.client.create_platform_application": {
        "new_func": "sns.client.create_platform_application",
        "description": "Creates a platform application object for push notification services. Parameters: Name (string) - Required. Application name. Platform (string) - Required. Supported platform. Attributes (dict) - Required. Platform-specific credentials. Returns: dict with 'PlatformApplicationArn' (string)."
    },
    "sns.client.create_platform_endpoint": {
        "new_func": "sns.client.create_platform_endpoint",
        "description": "Creates an endpoint for a device on a push notification service. Parameters: PlatformApplicationArn (string) - Required. ARN from CreatePlatformApplication. Token (string) - Required. Unique identifier for the app on the device. CustomUserData (string) - User data associated with the endpoint. Attributes (dict) - Endpoint attributes. Returns: dict with 'EndpointArn' (string)."
    },
    "sns.client.create_sms_sandbox_phone_number": {
        "new_func": "sns.client.create_sms_sandbox_phone_number",
        "description": "Adds a phone number to the SMS sandbox and sends an OTP. Parameters: PhoneNumber (string) - Required. Destination phone number. LanguageCode (string) - Language for the OTP. Returns: dict (empty)."
    },
    "sns.client.create_topic": {
        "new_func": "sns.client.create_topic",
        "description": "Creates a topic for notifications. Idempotent. Parameters: Name (string) - Required. Topic name. Attributes (dict) - Topic attributes. Tags (list) - Tags for the topic. DataProtectionPolicy (string) - Policy document for the topic. Returns: dict with 'TopicArn' (string)."
    },
    "sns.client.delete_endpoint": {
        "new_func": "sns.client.delete_endpoint",
        "description": "Deletes an SNS endpoint for a device and mobile app. Parameters: EndpointArn (string) - Required. The ARN of the endpoint to delete. Returns: None."
    },
    "sns.client.delete_platform_application": {
        "new_func": "sns.client.delete_platform_application",
        "description": "Deletes an SNS platform application object for push notification services. Parameters: PlatformApplicationArn (string) - Required. The ARN of the platform application to delete. Returns: None."
    },
    "sns.client.delete_sms_sandbox_phone_number": {
        "new_func": "sns.client.delete_sms_sandbox_phone_number",
        "description": "Deletes a phone number from an AWS account's SMS sandbox. Parameters: PhoneNumber (string) - Required. The phone number to delete. Returns: Empty dict."
    },
    "sns.client.delete_topic": {
        "new_func": "sns.client.delete_topic",
        "description": "Deletes an SNS topic and all its subscriptions. Parameters: TopicArn (string) - Required. The ARN of the topic to delete. Returns: None."
    },
    "sns.client.get_data_protection_policy": {
        "new_func": "sns.client.get_data_protection_policy",
        "description": "Retrieves the DataProtectionPolicy document for an SNS topic. Parameters: ResourceArn (string) - Required. The ARN of the topic. Returns: dict with 'DataProtectionPolicy' as a JSON string."
    },
    "sns.client.get_endpoint_attributes": {
        "new_func": "sns.client.get_endpoint_attributes",
        "description": "Retrieves attributes for a device's endpoint in push notification services. Parameters: EndpointArn (string) - Required. The Amazon Resource Name (ARN) of the endpoint. Returns: dict with 'Attributes' containing 'CustomUserData', 'Enabled', and 'Token'."
    },
    "sns.client.get_paginator": {
        "new_func": "sns.client.get_paginator",
        "description": "Creates a paginator for a client operation. Parameters: operation_name (string) - The name of the operation to paginate. Returns: Paginator object. Raises OperationNotPageableError if the operation cannot be paginated."
    },
    "sns.client.get_platform_application_attributes": {
        "new_func": "sns.client.get_platform_application_attributes",
        "description": "Retrieves attributes of the platform application object for push notification services. Parameters: PlatformApplicationArn (string) - Required. The ARN for the platform application. Returns: dict with 'Attributes' containing various keys like 'AppleCertificateExpiryDate', 'ApplePlatformTeamID', 'ApplePlatformBundleID', 'AuthenticationMethod', 'EventEndpointCreated', 'EventEndpointDeleted', 'EventEndpointUpdated', 'EventDeliveryFailure'."
    },
    "sns.client.get_sms_attributes": {
        "new_func": "sns.client.get_sms_attributes",
        "description": "Returns settings for sending SMS messages from AWS account. Parameters: attributes (list) - Optional. Attribute names to retrieve values for. If not used, all SMS attributes are returned. Returns: dict with 'attributes' containing attribute names and values."
    },
    "sns.client.get_sms_sandbox_account_status": {
        "new_func": "sns.client.get_sms_sandbox_account_status",
        "description": "Retrieves the SMS sandbox status for the AWS account in the target region. Returns: dict with 'IsInSandbox' indicating whether the account is in the SMS sandbox."
    },
    "sns.client.get_subscription_attributes": {
        "new_func": "sns.client.get_subscription_attributes",
        "description": "Retrieves properties of a subscription. Parameters: SubscriptionArn (string) - Required. The subscription's ARN. Returns: dict with 'Attributes' containing a map of the subscription's attributes such as ConfirmationWasAuthenticated, DeliveryPolicy, EffectiveDeliveryPolicy, FilterPolicy, Owner, RawMessageDelivery, RedrivePolicy, SubscriptionArn, TopicArn, and potentially SubscriptionRoleArn for Firehose delivery stream subscriptions."
    },
    "sns.client.get_topic_attributes": {
        "new_func": "sns.client.get_topic_attributes",
        "description": "Fetches properties of a topic. Parameters: TopicArn (string) - Required. The topic's ARN. Returns: dict with 'Attributes' containing a map of the topic's attributes, including DeliveryPolicy, DisplayName, EffectiveDeliveryPolicy, Owner, Policy, SignatureVersion, SubscriptionsConfirmed, SubscriptionsDeleted, SubscriptionsPending, TopicArn, TracingConfig, KmsMasterKeyId, and, for FIFO topics, FifoTopic, and ContentBasedDeduplication."
    },
    "sns.client.get_waiter": {
        "new_func": "sns.client.get_waiter",
        "description": "Returns a waiter object that waits for a condition. Parameters: waiter_name (str) - Name of the waiter. Returns: botocore.waiter.Waiter object."
    },
    "sns.client.list_endpoints_by_platform_application": {
        "new_func": "sns.client.list_endpoints_by_platform_application",
        "description": "Lists endpoints and their attributes for devices in a push notification service. Results are paginated and limited to 100 endpoints per page."
    },
    "sns.client.list_origination_numbers": {
        "new_func": "sns.client.list_origination_numbers",
        "description": "Lists the AWS account's dedicated origination numbers and metadata. Parameters: none specified. Returns: dict with a list of origination numbers and their attributes."
    },
    "sns.client.list_phone_numbers_opted_out": {
        "new_func": "sns.client.list_phone_numbers_opted_out",
        "description": "Returns a paginated list of phone numbers opted out of receiving SMS messages. Each page can contain up to 100 phone numbers. Parameters: NextToken (string) - Token to retrieve the next set of results. Returns: dict with 'phoneNumbers' (list of strings) and 'nextToken' (string)."
    },
    "sns.client.list_platform_applications": {
        "new_func": "sns.client.list_platform_applications",
        "description": "Lists paginated platform applications for push notification services like APNS and GCM, with up to 100 applications per page. Parameters: NextToken (string) - Token to retrieve the next set of results. Returns: dict with 'PlatformApplications' (list of dicts) and 'NextToken' (string)."
    },
    "sns.client.list_sms_sandbox_phone_numbers": {
        "new_func": "sns.client.list_sms_sandbox_phone_numbers",
        "description": "Lists verified and pending phone numbers in the SMS sandbox for the calling AWS account. Parameters: NextToken (string) - Token to retrieve the next set of results. MaxResults (integer) - Maximum number of results to return per call. Returns: dict with 'PhoneNumbers' (list of dicts), 'NextToken' (string)."
    },
    "sns.client.list_subscriptions": {
        "new_func": "sns.client.list_subscriptions",
        "description": "Returns a paginated list of the requester\u2019s subscriptions, with up to 100 subscriptions per page. Parameters: NextToken (string) - Token to retrieve the next set of results. Returns: dict with 'Subscriptions' (list of dicts) and 'NextToken' (string)."
    },
    "sns.client.list_subscriptions_by_topic": {
        "new_func": "sns.client.list_subscriptions_by_topic",
        "description": "Returns a paginated list of subscriptions for a specific topic, with up to 100 subscriptions per page. Parameters: TopicArn (string) - Required. The ARN of the topic. NextToken (string) - Token to retrieve the next set of results. Returns: dict with 'Subscriptions' (list of dicts) and 'NextToken' (string)."
    },
    "sns.client.list_tags_for_resource": {
        "new_func": "sns.client.list_tags_for_resource",
        "description": "Lists all tags for an Amazon SNS topic. Parameters: ResourceArn (string) - Required. ARN of the topic. Returns: dict with 'Tags' as a list of key-value pairs."
    },
    "sns.client.list_topics": {
        "new_func": "sns.client.list_topics",
        "description": "Returns a list of the requester's topics, up to 100. Continuation token provided if more topics exist."
    },
    "sns.client.opt_in_phone_number": {
        "new_func": "sns.client.opt_in_phone_number",
        "description": "Opts in a phone number to resume sending SMS messages. Parameters: phoneNumber (string) - Required. Phone number in E.164 format. Returns: Empty dict."
    },
    "sns.client.publish": {
        "new_func": "sns.client.publish",
        "description": "Sends a message to an SNS topic, SMS, or mobile endpoint. Parameters include TopicArn, TargetArn, PhoneNumber, Message, Subject, MessageStructure, MessageAttributes, MessageDeduplicationId, and MessageGroupId. Returns: dict with 'MessageId' and 'SequenceNumber' for FIFO topics."
    },
    "sns.client.publish_batch": {
        "new_func": "sns.client.publish_batch",
        "description": "Publishes up to ten messages to an SNS topic. Parameters: TopicArn (string) - Required. ARN of the topic; PublishBatchRequestEntries (list) - Required. List of request entries with Id, Message, Subject, MessageStructure, MessageAttributes, MessageDeduplicationId, and MessageGroupId. Returns: dict with 'Successful' and 'Failed' lists containing the outcome of each message."
    },
    "sns.client.put_data_protection_policy": {
        "new_func": "sns.client.put_data_protection_policy",
        "description": "Adds or updates a DataProtectionPolicy for an Amazon SNS topic. Parameters: ResourceArn (string) - Required. ARN of the topic. DataProtectionPolicy (string) - Required. JSON serialization of the policy. Returns: None."
    },
    "sns.client.remove_permission": {
        "new_func": "sns.client.remove_permission",
        "description": "Removes a statement from a topic's access control policy. Parameters: TopicArn (string) - Required. ARN of the topic. Label (string) - Required. Label of the statement to remove. Returns: None."
    },
    "sns.client.set_endpoint_attributes": {
        "new_func": "sns.client.set_endpoint_attributes",
        "description": "Sets attributes for a device's push notification service endpoint. Parameters: EndpointArn (string) - Required. ARN for the endpoint. Attributes (dict) - Required. Map of attributes for the endpoint. Returns: None."
    },
    "sns.client.set_platform_application_attributes": {
        "new_func": "sns.client.set_platform_application_attributes",
        "description": "Sets attributes for a platform application object for push notification services. Parameters: PlatformApplicationArn (string) - Required. ARN for the platform application. Attributes (dict) - Required. Map of the platform application attributes. Returns: None."
    },
    "sns.client.set_sms_attributes": {
        "new_func": "sns.client.set_sms_attributes",
        "description": "Sets default settings for sending SMS messages and receiving daily SMS usage reports. Parameters: attributes (dict) - Required. Map of attributes for SMS settings. Returns: dict with the response."
    },
    "sns.client.set_subscription_attributes": {
        "new_func": "sns.client.set_subscription_attributes",
        "description": "Sets an attribute of a subscription to a new value. Parameters: SubscriptionArn (string) - The ARN of the subscription to modify. AttributeName (string) - The name of the attribute to modify. AttributeValue (string) - The new value for the attribute, in JSON format. Returns: None."
    },
    "sns.client.set_topic_attributes": {
        "new_func": "sns.client.set_topic_attributes",
        "description": "Sets an attribute of a topic to a new value. Parameters: TopicArn (string) - The ARN of the topic to modify. AttributeName (string) - The name of the attribute to modify. AttributeValue (string) - The new value for the attribute. Returns: None."
    },
    "sns.client.subscribe": {
        "new_func": "sns.client.subscribe",
        "description": "Subscribes an endpoint to an SNS topic. Parameters: TopicArn (string) - The ARN of the topic. Protocol (string) - The protocol to use for the subscription. Endpoint (string) - The endpoint to receive notifications. Attributes (dict) - A map of attributes for the subscription. ReturnSubscriptionArn (boolean) - If true, includes the subscription ARN in the response. Returns: dict with 'SubscriptionArn'."
    },
    "sns.client.tag_resource": {
        "new_func": "sns.client.tag_resource",
        "description": "Adds tags to an SNS topic. Parameters: ResourceArn (string) - The ARN of the topic to tag. Tags (list of dicts) - The tags to add to the topic. Returns: dict (empty)."
    },
    "sns.client.unsubscribe": {
        "new_func": "sns.client.unsubscribe",
        "description": "Deletes a subscription. Parameters: SubscriptionArn (string) - The ARN of the subscription to delete. Returns: None."
    },
    "sns.client.untag_resource": {
        "new_func": "sns.client.untag_resource",
        "description": "Removes tags from an Amazon SNS topic. Parameters: ResourceArn (string) - Required. The ARN of the topic. TagKeys (list of strings) - Required. Tag keys to remove. Returns: Empty dict if successful."
    },
    "sns.client.verify_sms_sandbox_phone_number": {
        "new_func": "sns.client.verify_sms_sandbox_phone_number",
        "description": "Verifies a phone number with a one-time password (OTP) in the SMS sandbox environment. Parameters: PhoneNumber (string) - Required. The phone number to verify. OneTimePassword (string) - Required. The OTP for verification. Returns: Empty dict indicating the verification status."
    }
}
